# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SimpleITK
else:
    import _SimpleITK

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _SimpleITK.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _SimpleITK.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _SimpleITK.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _SimpleITK.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _SimpleITK.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _SimpleITK.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _SimpleITK.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _SimpleITK.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _SimpleITK.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _SimpleITK.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _SimpleITK.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _SimpleITK.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _SimpleITK.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _SimpleITK.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _SimpleITK.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _SimpleITK.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SimpleITK:
_SimpleITK.SwigPyIterator_swigregister(SwigPyIterator)

class VectorBool(object):
    r"""Proxy of C++ std::vector< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorBool self) -> SwigPyIterator"""
        return _SimpleITK.VectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorBool self) -> bool"""
        return _SimpleITK.VectorBool___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorBool self) -> bool"""
        return _SimpleITK.VectorBool___bool__(self)

    def __len__(self):
        r"""__len__(VectorBool self) -> std::vector< bool >::size_type"""
        return _SimpleITK.VectorBool___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorBool self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j) -> VectorBool"""
        return _SimpleITK.VectorBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorBool self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)
        __setslice__(VectorBool self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j, VectorBool v)
        """
        return _SimpleITK.VectorBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorBool self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)"""
        return _SimpleITK.VectorBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorBool self, std::vector< bool >::difference_type i)
        __delitem__(VectorBool self, PySliceObject * slice)
        """
        return _SimpleITK.VectorBool___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorBool self, PySliceObject * slice) -> VectorBool
        __getitem__(VectorBool self, std::vector< bool >::difference_type i) -> std::vector< bool >::value_type
        """
        return _SimpleITK.VectorBool___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorBool self, PySliceObject * slice, VectorBool v)
        __setitem__(VectorBool self, PySliceObject * slice)
        __setitem__(VectorBool self, std::vector< bool >::difference_type i, std::vector< bool >::value_type x)
        """
        return _SimpleITK.VectorBool___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorBool self) -> std::vector< bool >::value_type"""
        return _SimpleITK.VectorBool_pop(self)

    def append(self, x):
        r"""append(VectorBool self, std::vector< bool >::value_type x)"""
        return _SimpleITK.VectorBool_append(self, x)

    def empty(self):
        r"""empty(VectorBool self) -> bool"""
        return _SimpleITK.VectorBool_empty(self)

    def size(self):
        r"""size(VectorBool self) -> std::vector< bool >::size_type"""
        return _SimpleITK.VectorBool_size(self)

    def swap(self, v):
        r"""swap(VectorBool self, VectorBool v)"""
        return _SimpleITK.VectorBool_swap(self, v)

    def begin(self):
        r"""begin(VectorBool self) -> std::vector< bool >::iterator"""
        return _SimpleITK.VectorBool_begin(self)

    def end(self):
        r"""end(VectorBool self) -> std::vector< bool >::iterator"""
        return _SimpleITK.VectorBool_end(self)

    def rbegin(self):
        r"""rbegin(VectorBool self) -> std::vector< bool >::reverse_iterator"""
        return _SimpleITK.VectorBool_rbegin(self)

    def rend(self):
        r"""rend(VectorBool self) -> std::vector< bool >::reverse_iterator"""
        return _SimpleITK.VectorBool_rend(self)

    def clear(self):
        r"""clear(VectorBool self)"""
        return _SimpleITK.VectorBool_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorBool self) -> std::vector< bool >::allocator_type"""
        return _SimpleITK.VectorBool_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorBool self)"""
        return _SimpleITK.VectorBool_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorBool self, std::vector< bool >::iterator pos) -> std::vector< bool >::iterator
        erase(VectorBool self, std::vector< bool >::iterator first, std::vector< bool >::iterator last) -> std::vector< bool >::iterator
        """
        return _SimpleITK.VectorBool_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorBool self) -> VectorBool
        __init__(VectorBool self, VectorBool other) -> VectorBool
        __init__(VectorBool self, std::vector< bool >::size_type size) -> VectorBool
        __init__(VectorBool self, std::vector< bool >::size_type size, std::vector< bool >::value_type value) -> VectorBool
        """
        _SimpleITK.VectorBool_swiginit(self, _SimpleITK.new_VectorBool(*args))

    def push_back(self, x):
        r"""push_back(VectorBool self, std::vector< bool >::value_type x)"""
        return _SimpleITK.VectorBool_push_back(self, x)

    def front(self):
        r"""front(VectorBool self) -> std::vector< bool >::value_type"""
        return _SimpleITK.VectorBool_front(self)

    def back(self):
        r"""back(VectorBool self) -> std::vector< bool >::value_type"""
        return _SimpleITK.VectorBool_back(self)

    def assign(self, n, x):
        r"""assign(VectorBool self, std::vector< bool >::size_type n, std::vector< bool >::value_type x)"""
        return _SimpleITK.VectorBool_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorBool self, std::vector< bool >::size_type new_size)
        resize(VectorBool self, std::vector< bool >::size_type new_size, std::vector< bool >::value_type x)
        """
        return _SimpleITK.VectorBool_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorBool self, std::vector< bool >::iterator pos, std::vector< bool >::value_type x) -> std::vector< bool >::iterator
        insert(VectorBool self, std::vector< bool >::iterator pos, std::vector< bool >::size_type n, std::vector< bool >::value_type x)
        """
        return _SimpleITK.VectorBool_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorBool self, std::vector< bool >::size_type n)"""
        return _SimpleITK.VectorBool_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorBool self) -> std::vector< bool >::size_type"""
        return _SimpleITK.VectorBool_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorBool

# Register VectorBool in _SimpleITK:
_SimpleITK.VectorBool_swigregister(VectorBool)

class VectorUInt8(object):
    r"""Proxy of C++ std::vector< uint8_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorUInt8 self) -> SwigPyIterator"""
        return _SimpleITK.VectorUInt8_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorUInt8 self) -> bool"""
        return _SimpleITK.VectorUInt8___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorUInt8 self) -> bool"""
        return _SimpleITK.VectorUInt8___bool__(self)

    def __len__(self):
        r"""__len__(VectorUInt8 self) -> std::vector< unsigned char >::size_type"""
        return _SimpleITK.VectorUInt8___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorUInt8 self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j) -> VectorUInt8"""
        return _SimpleITK.VectorUInt8___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorUInt8 self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)
        __setslice__(VectorUInt8 self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j, VectorUInt8 v)
        """
        return _SimpleITK.VectorUInt8___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorUInt8 self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)"""
        return _SimpleITK.VectorUInt8___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorUInt8 self, std::vector< unsigned char >::difference_type i)
        __delitem__(VectorUInt8 self, PySliceObject * slice)
        """
        return _SimpleITK.VectorUInt8___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorUInt8 self, PySliceObject * slice) -> VectorUInt8
        __getitem__(VectorUInt8 self, std::vector< unsigned char >::difference_type i) -> std::vector< unsigned char >::value_type const &
        """
        return _SimpleITK.VectorUInt8___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorUInt8 self, PySliceObject * slice, VectorUInt8 v)
        __setitem__(VectorUInt8 self, PySliceObject * slice)
        __setitem__(VectorUInt8 self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::value_type const & x)
        """
        return _SimpleITK.VectorUInt8___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorUInt8 self) -> std::vector< unsigned char >::value_type"""
        return _SimpleITK.VectorUInt8_pop(self)

    def append(self, x):
        r"""append(VectorUInt8 self, std::vector< unsigned char >::value_type const & x)"""
        return _SimpleITK.VectorUInt8_append(self, x)

    def empty(self):
        r"""empty(VectorUInt8 self) -> bool"""
        return _SimpleITK.VectorUInt8_empty(self)

    def size(self):
        r"""size(VectorUInt8 self) -> std::vector< unsigned char >::size_type"""
        return _SimpleITK.VectorUInt8_size(self)

    def swap(self, v):
        r"""swap(VectorUInt8 self, VectorUInt8 v)"""
        return _SimpleITK.VectorUInt8_swap(self, v)

    def begin(self):
        r"""begin(VectorUInt8 self) -> std::vector< unsigned char >::iterator"""
        return _SimpleITK.VectorUInt8_begin(self)

    def end(self):
        r"""end(VectorUInt8 self) -> std::vector< unsigned char >::iterator"""
        return _SimpleITK.VectorUInt8_end(self)

    def rbegin(self):
        r"""rbegin(VectorUInt8 self) -> std::vector< unsigned char >::reverse_iterator"""
        return _SimpleITK.VectorUInt8_rbegin(self)

    def rend(self):
        r"""rend(VectorUInt8 self) -> std::vector< unsigned char >::reverse_iterator"""
        return _SimpleITK.VectorUInt8_rend(self)

    def clear(self):
        r"""clear(VectorUInt8 self)"""
        return _SimpleITK.VectorUInt8_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorUInt8 self) -> std::vector< unsigned char >::allocator_type"""
        return _SimpleITK.VectorUInt8_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorUInt8 self)"""
        return _SimpleITK.VectorUInt8_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorUInt8 self, std::vector< unsigned char >::iterator pos) -> std::vector< unsigned char >::iterator
        erase(VectorUInt8 self, std::vector< unsigned char >::iterator first, std::vector< unsigned char >::iterator last) -> std::vector< unsigned char >::iterator
        """
        return _SimpleITK.VectorUInt8_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorUInt8 self) -> VectorUInt8
        __init__(VectorUInt8 self, VectorUInt8 other) -> VectorUInt8
        __init__(VectorUInt8 self, std::vector< unsigned char >::size_type size) -> VectorUInt8
        __init__(VectorUInt8 self, std::vector< unsigned char >::size_type size, std::vector< unsigned char >::value_type const & value) -> VectorUInt8
        """
        _SimpleITK.VectorUInt8_swiginit(self, _SimpleITK.new_VectorUInt8(*args))

    def push_back(self, x):
        r"""push_back(VectorUInt8 self, std::vector< unsigned char >::value_type const & x)"""
        return _SimpleITK.VectorUInt8_push_back(self, x)

    def front(self):
        r"""front(VectorUInt8 self) -> std::vector< unsigned char >::value_type const &"""
        return _SimpleITK.VectorUInt8_front(self)

    def back(self):
        r"""back(VectorUInt8 self) -> std::vector< unsigned char >::value_type const &"""
        return _SimpleITK.VectorUInt8_back(self)

    def assign(self, n, x):
        r"""assign(VectorUInt8 self, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)"""
        return _SimpleITK.VectorUInt8_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorUInt8 self, std::vector< unsigned char >::size_type new_size)
        resize(VectorUInt8 self, std::vector< unsigned char >::size_type new_size, std::vector< unsigned char >::value_type const & x)
        """
        return _SimpleITK.VectorUInt8_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorUInt8 self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::value_type const & x) -> std::vector< unsigned char >::iterator
        insert(VectorUInt8 self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)
        """
        return _SimpleITK.VectorUInt8_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorUInt8 self, std::vector< unsigned char >::size_type n)"""
        return _SimpleITK.VectorUInt8_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorUInt8 self) -> std::vector< unsigned char >::size_type"""
        return _SimpleITK.VectorUInt8_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorUInt8

# Register VectorUInt8 in _SimpleITK:
_SimpleITK.VectorUInt8_swigregister(VectorUInt8)

class VectorInt8(object):
    r"""Proxy of C++ std::vector< int8_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorInt8 self) -> SwigPyIterator"""
        return _SimpleITK.VectorInt8_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorInt8 self) -> bool"""
        return _SimpleITK.VectorInt8___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorInt8 self) -> bool"""
        return _SimpleITK.VectorInt8___bool__(self)

    def __len__(self):
        r"""__len__(VectorInt8 self) -> std::vector< signed char >::size_type"""
        return _SimpleITK.VectorInt8___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorInt8 self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j) -> VectorInt8"""
        return _SimpleITK.VectorInt8___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorInt8 self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j)
        __setslice__(VectorInt8 self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j, VectorInt8 v)
        """
        return _SimpleITK.VectorInt8___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorInt8 self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j)"""
        return _SimpleITK.VectorInt8___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorInt8 self, std::vector< signed char >::difference_type i)
        __delitem__(VectorInt8 self, PySliceObject * slice)
        """
        return _SimpleITK.VectorInt8___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorInt8 self, PySliceObject * slice) -> VectorInt8
        __getitem__(VectorInt8 self, std::vector< signed char >::difference_type i) -> std::vector< signed char >::value_type const &
        """
        return _SimpleITK.VectorInt8___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorInt8 self, PySliceObject * slice, VectorInt8 v)
        __setitem__(VectorInt8 self, PySliceObject * slice)
        __setitem__(VectorInt8 self, std::vector< signed char >::difference_type i, std::vector< signed char >::value_type const & x)
        """
        return _SimpleITK.VectorInt8___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorInt8 self) -> std::vector< signed char >::value_type"""
        return _SimpleITK.VectorInt8_pop(self)

    def append(self, x):
        r"""append(VectorInt8 self, std::vector< signed char >::value_type const & x)"""
        return _SimpleITK.VectorInt8_append(self, x)

    def empty(self):
        r"""empty(VectorInt8 self) -> bool"""
        return _SimpleITK.VectorInt8_empty(self)

    def size(self):
        r"""size(VectorInt8 self) -> std::vector< signed char >::size_type"""
        return _SimpleITK.VectorInt8_size(self)

    def swap(self, v):
        r"""swap(VectorInt8 self, VectorInt8 v)"""
        return _SimpleITK.VectorInt8_swap(self, v)

    def begin(self):
        r"""begin(VectorInt8 self) -> std::vector< signed char >::iterator"""
        return _SimpleITK.VectorInt8_begin(self)

    def end(self):
        r"""end(VectorInt8 self) -> std::vector< signed char >::iterator"""
        return _SimpleITK.VectorInt8_end(self)

    def rbegin(self):
        r"""rbegin(VectorInt8 self) -> std::vector< signed char >::reverse_iterator"""
        return _SimpleITK.VectorInt8_rbegin(self)

    def rend(self):
        r"""rend(VectorInt8 self) -> std::vector< signed char >::reverse_iterator"""
        return _SimpleITK.VectorInt8_rend(self)

    def clear(self):
        r"""clear(VectorInt8 self)"""
        return _SimpleITK.VectorInt8_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorInt8 self) -> std::vector< signed char >::allocator_type"""
        return _SimpleITK.VectorInt8_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorInt8 self)"""
        return _SimpleITK.VectorInt8_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorInt8 self, std::vector< signed char >::iterator pos) -> std::vector< signed char >::iterator
        erase(VectorInt8 self, std::vector< signed char >::iterator first, std::vector< signed char >::iterator last) -> std::vector< signed char >::iterator
        """
        return _SimpleITK.VectorInt8_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorInt8 self) -> VectorInt8
        __init__(VectorInt8 self, VectorInt8 other) -> VectorInt8
        __init__(VectorInt8 self, std::vector< signed char >::size_type size) -> VectorInt8
        __init__(VectorInt8 self, std::vector< signed char >::size_type size, std::vector< signed char >::value_type const & value) -> VectorInt8
        """
        _SimpleITK.VectorInt8_swiginit(self, _SimpleITK.new_VectorInt8(*args))

    def push_back(self, x):
        r"""push_back(VectorInt8 self, std::vector< signed char >::value_type const & x)"""
        return _SimpleITK.VectorInt8_push_back(self, x)

    def front(self):
        r"""front(VectorInt8 self) -> std::vector< signed char >::value_type const &"""
        return _SimpleITK.VectorInt8_front(self)

    def back(self):
        r"""back(VectorInt8 self) -> std::vector< signed char >::value_type const &"""
        return _SimpleITK.VectorInt8_back(self)

    def assign(self, n, x):
        r"""assign(VectorInt8 self, std::vector< signed char >::size_type n, std::vector< signed char >::value_type const & x)"""
        return _SimpleITK.VectorInt8_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorInt8 self, std::vector< signed char >::size_type new_size)
        resize(VectorInt8 self, std::vector< signed char >::size_type new_size, std::vector< signed char >::value_type const & x)
        """
        return _SimpleITK.VectorInt8_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorInt8 self, std::vector< signed char >::iterator pos, std::vector< signed char >::value_type const & x) -> std::vector< signed char >::iterator
        insert(VectorInt8 self, std::vector< signed char >::iterator pos, std::vector< signed char >::size_type n, std::vector< signed char >::value_type const & x)
        """
        return _SimpleITK.VectorInt8_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorInt8 self, std::vector< signed char >::size_type n)"""
        return _SimpleITK.VectorInt8_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorInt8 self) -> std::vector< signed char >::size_type"""
        return _SimpleITK.VectorInt8_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorInt8

# Register VectorInt8 in _SimpleITK:
_SimpleITK.VectorInt8_swigregister(VectorInt8)

class VectorUInt16(object):
    r"""Proxy of C++ std::vector< uint16_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorUInt16 self) -> SwigPyIterator"""
        return _SimpleITK.VectorUInt16_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorUInt16 self) -> bool"""
        return _SimpleITK.VectorUInt16___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorUInt16 self) -> bool"""
        return _SimpleITK.VectorUInt16___bool__(self)

    def __len__(self):
        r"""__len__(VectorUInt16 self) -> std::vector< unsigned short >::size_type"""
        return _SimpleITK.VectorUInt16___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorUInt16 self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j) -> VectorUInt16"""
        return _SimpleITK.VectorUInt16___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorUInt16 self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j)
        __setslice__(VectorUInt16 self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j, VectorUInt16 v)
        """
        return _SimpleITK.VectorUInt16___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorUInt16 self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j)"""
        return _SimpleITK.VectorUInt16___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorUInt16 self, std::vector< unsigned short >::difference_type i)
        __delitem__(VectorUInt16 self, PySliceObject * slice)
        """
        return _SimpleITK.VectorUInt16___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorUInt16 self, PySliceObject * slice) -> VectorUInt16
        __getitem__(VectorUInt16 self, std::vector< unsigned short >::difference_type i) -> std::vector< unsigned short >::value_type const &
        """
        return _SimpleITK.VectorUInt16___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorUInt16 self, PySliceObject * slice, VectorUInt16 v)
        __setitem__(VectorUInt16 self, PySliceObject * slice)
        __setitem__(VectorUInt16 self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::value_type const & x)
        """
        return _SimpleITK.VectorUInt16___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorUInt16 self) -> std::vector< unsigned short >::value_type"""
        return _SimpleITK.VectorUInt16_pop(self)

    def append(self, x):
        r"""append(VectorUInt16 self, std::vector< unsigned short >::value_type const & x)"""
        return _SimpleITK.VectorUInt16_append(self, x)

    def empty(self):
        r"""empty(VectorUInt16 self) -> bool"""
        return _SimpleITK.VectorUInt16_empty(self)

    def size(self):
        r"""size(VectorUInt16 self) -> std::vector< unsigned short >::size_type"""
        return _SimpleITK.VectorUInt16_size(self)

    def swap(self, v):
        r"""swap(VectorUInt16 self, VectorUInt16 v)"""
        return _SimpleITK.VectorUInt16_swap(self, v)

    def begin(self):
        r"""begin(VectorUInt16 self) -> std::vector< unsigned short >::iterator"""
        return _SimpleITK.VectorUInt16_begin(self)

    def end(self):
        r"""end(VectorUInt16 self) -> std::vector< unsigned short >::iterator"""
        return _SimpleITK.VectorUInt16_end(self)

    def rbegin(self):
        r"""rbegin(VectorUInt16 self) -> std::vector< unsigned short >::reverse_iterator"""
        return _SimpleITK.VectorUInt16_rbegin(self)

    def rend(self):
        r"""rend(VectorUInt16 self) -> std::vector< unsigned short >::reverse_iterator"""
        return _SimpleITK.VectorUInt16_rend(self)

    def clear(self):
        r"""clear(VectorUInt16 self)"""
        return _SimpleITK.VectorUInt16_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorUInt16 self) -> std::vector< unsigned short >::allocator_type"""
        return _SimpleITK.VectorUInt16_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorUInt16 self)"""
        return _SimpleITK.VectorUInt16_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorUInt16 self, std::vector< unsigned short >::iterator pos) -> std::vector< unsigned short >::iterator
        erase(VectorUInt16 self, std::vector< unsigned short >::iterator first, std::vector< unsigned short >::iterator last) -> std::vector< unsigned short >::iterator
        """
        return _SimpleITK.VectorUInt16_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorUInt16 self) -> VectorUInt16
        __init__(VectorUInt16 self, VectorUInt16 other) -> VectorUInt16
        __init__(VectorUInt16 self, std::vector< unsigned short >::size_type size) -> VectorUInt16
        __init__(VectorUInt16 self, std::vector< unsigned short >::size_type size, std::vector< unsigned short >::value_type const & value) -> VectorUInt16
        """
        _SimpleITK.VectorUInt16_swiginit(self, _SimpleITK.new_VectorUInt16(*args))

    def push_back(self, x):
        r"""push_back(VectorUInt16 self, std::vector< unsigned short >::value_type const & x)"""
        return _SimpleITK.VectorUInt16_push_back(self, x)

    def front(self):
        r"""front(VectorUInt16 self) -> std::vector< unsigned short >::value_type const &"""
        return _SimpleITK.VectorUInt16_front(self)

    def back(self):
        r"""back(VectorUInt16 self) -> std::vector< unsigned short >::value_type const &"""
        return _SimpleITK.VectorUInt16_back(self)

    def assign(self, n, x):
        r"""assign(VectorUInt16 self, std::vector< unsigned short >::size_type n, std::vector< unsigned short >::value_type const & x)"""
        return _SimpleITK.VectorUInt16_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorUInt16 self, std::vector< unsigned short >::size_type new_size)
        resize(VectorUInt16 self, std::vector< unsigned short >::size_type new_size, std::vector< unsigned short >::value_type const & x)
        """
        return _SimpleITK.VectorUInt16_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorUInt16 self, std::vector< unsigned short >::iterator pos, std::vector< unsigned short >::value_type const & x) -> std::vector< unsigned short >::iterator
        insert(VectorUInt16 self, std::vector< unsigned short >::iterator pos, std::vector< unsigned short >::size_type n, std::vector< unsigned short >::value_type const & x)
        """
        return _SimpleITK.VectorUInt16_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorUInt16 self, std::vector< unsigned short >::size_type n)"""
        return _SimpleITK.VectorUInt16_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorUInt16 self) -> std::vector< unsigned short >::size_type"""
        return _SimpleITK.VectorUInt16_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorUInt16

# Register VectorUInt16 in _SimpleITK:
_SimpleITK.VectorUInt16_swigregister(VectorUInt16)

class VectorInt16(object):
    r"""Proxy of C++ std::vector< int16_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorInt16 self) -> SwigPyIterator"""
        return _SimpleITK.VectorInt16_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorInt16 self) -> bool"""
        return _SimpleITK.VectorInt16___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorInt16 self) -> bool"""
        return _SimpleITK.VectorInt16___bool__(self)

    def __len__(self):
        r"""__len__(VectorInt16 self) -> std::vector< short >::size_type"""
        return _SimpleITK.VectorInt16___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorInt16 self, std::vector< short >::difference_type i, std::vector< short >::difference_type j) -> VectorInt16"""
        return _SimpleITK.VectorInt16___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorInt16 self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)
        __setslice__(VectorInt16 self, std::vector< short >::difference_type i, std::vector< short >::difference_type j, VectorInt16 v)
        """
        return _SimpleITK.VectorInt16___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorInt16 self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)"""
        return _SimpleITK.VectorInt16___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorInt16 self, std::vector< short >::difference_type i)
        __delitem__(VectorInt16 self, PySliceObject * slice)
        """
        return _SimpleITK.VectorInt16___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorInt16 self, PySliceObject * slice) -> VectorInt16
        __getitem__(VectorInt16 self, std::vector< short >::difference_type i) -> std::vector< short >::value_type const &
        """
        return _SimpleITK.VectorInt16___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorInt16 self, PySliceObject * slice, VectorInt16 v)
        __setitem__(VectorInt16 self, PySliceObject * slice)
        __setitem__(VectorInt16 self, std::vector< short >::difference_type i, std::vector< short >::value_type const & x)
        """
        return _SimpleITK.VectorInt16___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorInt16 self) -> std::vector< short >::value_type"""
        return _SimpleITK.VectorInt16_pop(self)

    def append(self, x):
        r"""append(VectorInt16 self, std::vector< short >::value_type const & x)"""
        return _SimpleITK.VectorInt16_append(self, x)

    def empty(self):
        r"""empty(VectorInt16 self) -> bool"""
        return _SimpleITK.VectorInt16_empty(self)

    def size(self):
        r"""size(VectorInt16 self) -> std::vector< short >::size_type"""
        return _SimpleITK.VectorInt16_size(self)

    def swap(self, v):
        r"""swap(VectorInt16 self, VectorInt16 v)"""
        return _SimpleITK.VectorInt16_swap(self, v)

    def begin(self):
        r"""begin(VectorInt16 self) -> std::vector< short >::iterator"""
        return _SimpleITK.VectorInt16_begin(self)

    def end(self):
        r"""end(VectorInt16 self) -> std::vector< short >::iterator"""
        return _SimpleITK.VectorInt16_end(self)

    def rbegin(self):
        r"""rbegin(VectorInt16 self) -> std::vector< short >::reverse_iterator"""
        return _SimpleITK.VectorInt16_rbegin(self)

    def rend(self):
        r"""rend(VectorInt16 self) -> std::vector< short >::reverse_iterator"""
        return _SimpleITK.VectorInt16_rend(self)

    def clear(self):
        r"""clear(VectorInt16 self)"""
        return _SimpleITK.VectorInt16_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorInt16 self) -> std::vector< short >::allocator_type"""
        return _SimpleITK.VectorInt16_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorInt16 self)"""
        return _SimpleITK.VectorInt16_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorInt16 self, std::vector< short >::iterator pos) -> std::vector< short >::iterator
        erase(VectorInt16 self, std::vector< short >::iterator first, std::vector< short >::iterator last) -> std::vector< short >::iterator
        """
        return _SimpleITK.VectorInt16_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorInt16 self) -> VectorInt16
        __init__(VectorInt16 self, VectorInt16 other) -> VectorInt16
        __init__(VectorInt16 self, std::vector< short >::size_type size) -> VectorInt16
        __init__(VectorInt16 self, std::vector< short >::size_type size, std::vector< short >::value_type const & value) -> VectorInt16
        """
        _SimpleITK.VectorInt16_swiginit(self, _SimpleITK.new_VectorInt16(*args))

    def push_back(self, x):
        r"""push_back(VectorInt16 self, std::vector< short >::value_type const & x)"""
        return _SimpleITK.VectorInt16_push_back(self, x)

    def front(self):
        r"""front(VectorInt16 self) -> std::vector< short >::value_type const &"""
        return _SimpleITK.VectorInt16_front(self)

    def back(self):
        r"""back(VectorInt16 self) -> std::vector< short >::value_type const &"""
        return _SimpleITK.VectorInt16_back(self)

    def assign(self, n, x):
        r"""assign(VectorInt16 self, std::vector< short >::size_type n, std::vector< short >::value_type const & x)"""
        return _SimpleITK.VectorInt16_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorInt16 self, std::vector< short >::size_type new_size)
        resize(VectorInt16 self, std::vector< short >::size_type new_size, std::vector< short >::value_type const & x)
        """
        return _SimpleITK.VectorInt16_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorInt16 self, std::vector< short >::iterator pos, std::vector< short >::value_type const & x) -> std::vector< short >::iterator
        insert(VectorInt16 self, std::vector< short >::iterator pos, std::vector< short >::size_type n, std::vector< short >::value_type const & x)
        """
        return _SimpleITK.VectorInt16_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorInt16 self, std::vector< short >::size_type n)"""
        return _SimpleITK.VectorInt16_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorInt16 self) -> std::vector< short >::size_type"""
        return _SimpleITK.VectorInt16_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorInt16

# Register VectorInt16 in _SimpleITK:
_SimpleITK.VectorInt16_swigregister(VectorInt16)

class VectorUInt32(object):
    r"""Proxy of C++ std::vector< uint32_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorUInt32 self) -> SwigPyIterator"""
        return _SimpleITK.VectorUInt32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorUInt32 self) -> bool"""
        return _SimpleITK.VectorUInt32___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorUInt32 self) -> bool"""
        return _SimpleITK.VectorUInt32___bool__(self)

    def __len__(self):
        r"""__len__(VectorUInt32 self) -> std::vector< unsigned int >::size_type"""
        return _SimpleITK.VectorUInt32___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorUInt32 self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> VectorUInt32"""
        return _SimpleITK.VectorUInt32___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorUInt32 self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        __setslice__(VectorUInt32 self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, VectorUInt32 v)
        """
        return _SimpleITK.VectorUInt32___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorUInt32 self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _SimpleITK.VectorUInt32___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorUInt32 self, std::vector< unsigned int >::difference_type i)
        __delitem__(VectorUInt32 self, PySliceObject * slice)
        """
        return _SimpleITK.VectorUInt32___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorUInt32 self, PySliceObject * slice) -> VectorUInt32
        __getitem__(VectorUInt32 self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _SimpleITK.VectorUInt32___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorUInt32 self, PySliceObject * slice, VectorUInt32 v)
        __setitem__(VectorUInt32 self, PySliceObject * slice)
        __setitem__(VectorUInt32 self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _SimpleITK.VectorUInt32___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorUInt32 self) -> std::vector< unsigned int >::value_type"""
        return _SimpleITK.VectorUInt32_pop(self)

    def append(self, x):
        r"""append(VectorUInt32 self, std::vector< unsigned int >::value_type const & x)"""
        return _SimpleITK.VectorUInt32_append(self, x)

    def empty(self):
        r"""empty(VectorUInt32 self) -> bool"""
        return _SimpleITK.VectorUInt32_empty(self)

    def size(self):
        r"""size(VectorUInt32 self) -> std::vector< unsigned int >::size_type"""
        return _SimpleITK.VectorUInt32_size(self)

    def swap(self, v):
        r"""swap(VectorUInt32 self, VectorUInt32 v)"""
        return _SimpleITK.VectorUInt32_swap(self, v)

    def begin(self):
        r"""begin(VectorUInt32 self) -> std::vector< unsigned int >::iterator"""
        return _SimpleITK.VectorUInt32_begin(self)

    def end(self):
        r"""end(VectorUInt32 self) -> std::vector< unsigned int >::iterator"""
        return _SimpleITK.VectorUInt32_end(self)

    def rbegin(self):
        r"""rbegin(VectorUInt32 self) -> std::vector< unsigned int >::reverse_iterator"""
        return _SimpleITK.VectorUInt32_rbegin(self)

    def rend(self):
        r"""rend(VectorUInt32 self) -> std::vector< unsigned int >::reverse_iterator"""
        return _SimpleITK.VectorUInt32_rend(self)

    def clear(self):
        r"""clear(VectorUInt32 self)"""
        return _SimpleITK.VectorUInt32_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorUInt32 self) -> std::vector< unsigned int >::allocator_type"""
        return _SimpleITK.VectorUInt32_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorUInt32 self)"""
        return _SimpleITK.VectorUInt32_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorUInt32 self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(VectorUInt32 self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _SimpleITK.VectorUInt32_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorUInt32 self) -> VectorUInt32
        __init__(VectorUInt32 self, VectorUInt32 other) -> VectorUInt32
        __init__(VectorUInt32 self, std::vector< unsigned int >::size_type size) -> VectorUInt32
        __init__(VectorUInt32 self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> VectorUInt32
        """
        _SimpleITK.VectorUInt32_swiginit(self, _SimpleITK.new_VectorUInt32(*args))

    def push_back(self, x):
        r"""push_back(VectorUInt32 self, std::vector< unsigned int >::value_type const & x)"""
        return _SimpleITK.VectorUInt32_push_back(self, x)

    def front(self):
        r"""front(VectorUInt32 self) -> std::vector< unsigned int >::value_type const &"""
        return _SimpleITK.VectorUInt32_front(self)

    def back(self):
        r"""back(VectorUInt32 self) -> std::vector< unsigned int >::value_type const &"""
        return _SimpleITK.VectorUInt32_back(self)

    def assign(self, n, x):
        r"""assign(VectorUInt32 self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _SimpleITK.VectorUInt32_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorUInt32 self, std::vector< unsigned int >::size_type new_size)
        resize(VectorUInt32 self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _SimpleITK.VectorUInt32_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorUInt32 self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(VectorUInt32 self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)
        """
        return _SimpleITK.VectorUInt32_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorUInt32 self, std::vector< unsigned int >::size_type n)"""
        return _SimpleITK.VectorUInt32_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorUInt32 self) -> std::vector< unsigned int >::size_type"""
        return _SimpleITK.VectorUInt32_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorUInt32

# Register VectorUInt32 in _SimpleITK:
_SimpleITK.VectorUInt32_swigregister(VectorUInt32)

class VectorInt32(object):
    r"""Proxy of C++ std::vector< int32_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorInt32 self) -> SwigPyIterator"""
        return _SimpleITK.VectorInt32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorInt32 self) -> bool"""
        return _SimpleITK.VectorInt32___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorInt32 self) -> bool"""
        return _SimpleITK.VectorInt32___bool__(self)

    def __len__(self):
        r"""__len__(VectorInt32 self) -> std::vector< int >::size_type"""
        return _SimpleITK.VectorInt32___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorInt32 self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> VectorInt32"""
        return _SimpleITK.VectorInt32___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorInt32 self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(VectorInt32 self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, VectorInt32 v)
        """
        return _SimpleITK.VectorInt32___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorInt32 self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _SimpleITK.VectorInt32___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorInt32 self, std::vector< int >::difference_type i)
        __delitem__(VectorInt32 self, PySliceObject * slice)
        """
        return _SimpleITK.VectorInt32___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorInt32 self, PySliceObject * slice) -> VectorInt32
        __getitem__(VectorInt32 self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _SimpleITK.VectorInt32___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorInt32 self, PySliceObject * slice, VectorInt32 v)
        __setitem__(VectorInt32 self, PySliceObject * slice)
        __setitem__(VectorInt32 self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _SimpleITK.VectorInt32___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorInt32 self) -> std::vector< int >::value_type"""
        return _SimpleITK.VectorInt32_pop(self)

    def append(self, x):
        r"""append(VectorInt32 self, std::vector< int >::value_type const & x)"""
        return _SimpleITK.VectorInt32_append(self, x)

    def empty(self):
        r"""empty(VectorInt32 self) -> bool"""
        return _SimpleITK.VectorInt32_empty(self)

    def size(self):
        r"""size(VectorInt32 self) -> std::vector< int >::size_type"""
        return _SimpleITK.VectorInt32_size(self)

    def swap(self, v):
        r"""swap(VectorInt32 self, VectorInt32 v)"""
        return _SimpleITK.VectorInt32_swap(self, v)

    def begin(self):
        r"""begin(VectorInt32 self) -> std::vector< int >::iterator"""
        return _SimpleITK.VectorInt32_begin(self)

    def end(self):
        r"""end(VectorInt32 self) -> std::vector< int >::iterator"""
        return _SimpleITK.VectorInt32_end(self)

    def rbegin(self):
        r"""rbegin(VectorInt32 self) -> std::vector< int >::reverse_iterator"""
        return _SimpleITK.VectorInt32_rbegin(self)

    def rend(self):
        r"""rend(VectorInt32 self) -> std::vector< int >::reverse_iterator"""
        return _SimpleITK.VectorInt32_rend(self)

    def clear(self):
        r"""clear(VectorInt32 self)"""
        return _SimpleITK.VectorInt32_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorInt32 self) -> std::vector< int >::allocator_type"""
        return _SimpleITK.VectorInt32_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorInt32 self)"""
        return _SimpleITK.VectorInt32_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorInt32 self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(VectorInt32 self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _SimpleITK.VectorInt32_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorInt32 self) -> VectorInt32
        __init__(VectorInt32 self, VectorInt32 other) -> VectorInt32
        __init__(VectorInt32 self, std::vector< int >::size_type size) -> VectorInt32
        __init__(VectorInt32 self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> VectorInt32
        """
        _SimpleITK.VectorInt32_swiginit(self, _SimpleITK.new_VectorInt32(*args))

    def push_back(self, x):
        r"""push_back(VectorInt32 self, std::vector< int >::value_type const & x)"""
        return _SimpleITK.VectorInt32_push_back(self, x)

    def front(self):
        r"""front(VectorInt32 self) -> std::vector< int >::value_type const &"""
        return _SimpleITK.VectorInt32_front(self)

    def back(self):
        r"""back(VectorInt32 self) -> std::vector< int >::value_type const &"""
        return _SimpleITK.VectorInt32_back(self)

    def assign(self, n, x):
        r"""assign(VectorInt32 self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _SimpleITK.VectorInt32_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorInt32 self, std::vector< int >::size_type new_size)
        resize(VectorInt32 self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _SimpleITK.VectorInt32_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorInt32 self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(VectorInt32 self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _SimpleITK.VectorInt32_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorInt32 self, std::vector< int >::size_type n)"""
        return _SimpleITK.VectorInt32_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorInt32 self) -> std::vector< int >::size_type"""
        return _SimpleITK.VectorInt32_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorInt32

# Register VectorInt32 in _SimpleITK:
_SimpleITK.VectorInt32_swigregister(VectorInt32)

class VectorUInt64(object):
    r"""Proxy of C++ std::vector< uint64_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorUInt64 self) -> SwigPyIterator"""
        return _SimpleITK.VectorUInt64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorUInt64 self) -> bool"""
        return _SimpleITK.VectorUInt64___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorUInt64 self) -> bool"""
        return _SimpleITK.VectorUInt64___bool__(self)

    def __len__(self):
        r"""__len__(VectorUInt64 self) -> std::vector< unsigned long long >::size_type"""
        return _SimpleITK.VectorUInt64___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorUInt64 self, std::vector< unsigned long long >::difference_type i, std::vector< unsigned long long >::difference_type j) -> VectorUInt64"""
        return _SimpleITK.VectorUInt64___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorUInt64 self, std::vector< unsigned long long >::difference_type i, std::vector< unsigned long long >::difference_type j)
        __setslice__(VectorUInt64 self, std::vector< unsigned long long >::difference_type i, std::vector< unsigned long long >::difference_type j, VectorUInt64 v)
        """
        return _SimpleITK.VectorUInt64___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorUInt64 self, std::vector< unsigned long long >::difference_type i, std::vector< unsigned long long >::difference_type j)"""
        return _SimpleITK.VectorUInt64___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorUInt64 self, std::vector< unsigned long long >::difference_type i)
        __delitem__(VectorUInt64 self, PySliceObject * slice)
        """
        return _SimpleITK.VectorUInt64___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorUInt64 self, PySliceObject * slice) -> VectorUInt64
        __getitem__(VectorUInt64 self, std::vector< unsigned long long >::difference_type i) -> std::vector< unsigned long long >::value_type const &
        """
        return _SimpleITK.VectorUInt64___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorUInt64 self, PySliceObject * slice, VectorUInt64 v)
        __setitem__(VectorUInt64 self, PySliceObject * slice)
        __setitem__(VectorUInt64 self, std::vector< unsigned long long >::difference_type i, std::vector< unsigned long long >::value_type const & x)
        """
        return _SimpleITK.VectorUInt64___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorUInt64 self) -> std::vector< unsigned long long >::value_type"""
        return _SimpleITK.VectorUInt64_pop(self)

    def append(self, x):
        r"""append(VectorUInt64 self, std::vector< unsigned long long >::value_type const & x)"""
        return _SimpleITK.VectorUInt64_append(self, x)

    def empty(self):
        r"""empty(VectorUInt64 self) -> bool"""
        return _SimpleITK.VectorUInt64_empty(self)

    def size(self):
        r"""size(VectorUInt64 self) -> std::vector< unsigned long long >::size_type"""
        return _SimpleITK.VectorUInt64_size(self)

    def swap(self, v):
        r"""swap(VectorUInt64 self, VectorUInt64 v)"""
        return _SimpleITK.VectorUInt64_swap(self, v)

    def begin(self):
        r"""begin(VectorUInt64 self) -> std::vector< unsigned long long >::iterator"""
        return _SimpleITK.VectorUInt64_begin(self)

    def end(self):
        r"""end(VectorUInt64 self) -> std::vector< unsigned long long >::iterator"""
        return _SimpleITK.VectorUInt64_end(self)

    def rbegin(self):
        r"""rbegin(VectorUInt64 self) -> std::vector< unsigned long long >::reverse_iterator"""
        return _SimpleITK.VectorUInt64_rbegin(self)

    def rend(self):
        r"""rend(VectorUInt64 self) -> std::vector< unsigned long long >::reverse_iterator"""
        return _SimpleITK.VectorUInt64_rend(self)

    def clear(self):
        r"""clear(VectorUInt64 self)"""
        return _SimpleITK.VectorUInt64_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorUInt64 self) -> std::vector< unsigned long long >::allocator_type"""
        return _SimpleITK.VectorUInt64_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorUInt64 self)"""
        return _SimpleITK.VectorUInt64_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorUInt64 self, std::vector< unsigned long long >::iterator pos) -> std::vector< unsigned long long >::iterator
        erase(VectorUInt64 self, std::vector< unsigned long long >::iterator first, std::vector< unsigned long long >::iterator last) -> std::vector< unsigned long long >::iterator
        """
        return _SimpleITK.VectorUInt64_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorUInt64 self) -> VectorUInt64
        __init__(VectorUInt64 self, VectorUInt64 other) -> VectorUInt64
        __init__(VectorUInt64 self, std::vector< unsigned long long >::size_type size) -> VectorUInt64
        __init__(VectorUInt64 self, std::vector< unsigned long long >::size_type size, std::vector< unsigned long long >::value_type const & value) -> VectorUInt64
        """
        _SimpleITK.VectorUInt64_swiginit(self, _SimpleITK.new_VectorUInt64(*args))

    def push_back(self, x):
        r"""push_back(VectorUInt64 self, std::vector< unsigned long long >::value_type const & x)"""
        return _SimpleITK.VectorUInt64_push_back(self, x)

    def front(self):
        r"""front(VectorUInt64 self) -> std::vector< unsigned long long >::value_type const &"""
        return _SimpleITK.VectorUInt64_front(self)

    def back(self):
        r"""back(VectorUInt64 self) -> std::vector< unsigned long long >::value_type const &"""
        return _SimpleITK.VectorUInt64_back(self)

    def assign(self, n, x):
        r"""assign(VectorUInt64 self, std::vector< unsigned long long >::size_type n, std::vector< unsigned long long >::value_type const & x)"""
        return _SimpleITK.VectorUInt64_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorUInt64 self, std::vector< unsigned long long >::size_type new_size)
        resize(VectorUInt64 self, std::vector< unsigned long long >::size_type new_size, std::vector< unsigned long long >::value_type const & x)
        """
        return _SimpleITK.VectorUInt64_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorUInt64 self, std::vector< unsigned long long >::iterator pos, std::vector< unsigned long long >::value_type const & x) -> std::vector< unsigned long long >::iterator
        insert(VectorUInt64 self, std::vector< unsigned long long >::iterator pos, std::vector< unsigned long long >::size_type n, std::vector< unsigned long long >::value_type const & x)
        """
        return _SimpleITK.VectorUInt64_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorUInt64 self, std::vector< unsigned long long >::size_type n)"""
        return _SimpleITK.VectorUInt64_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorUInt64 self) -> std::vector< unsigned long long >::size_type"""
        return _SimpleITK.VectorUInt64_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorUInt64

# Register VectorUInt64 in _SimpleITK:
_SimpleITK.VectorUInt64_swigregister(VectorUInt64)

class VectorInt64(object):
    r"""Proxy of C++ std::vector< int64_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorInt64 self) -> SwigPyIterator"""
        return _SimpleITK.VectorInt64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorInt64 self) -> bool"""
        return _SimpleITK.VectorInt64___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorInt64 self) -> bool"""
        return _SimpleITK.VectorInt64___bool__(self)

    def __len__(self):
        r"""__len__(VectorInt64 self) -> std::vector< long long >::size_type"""
        return _SimpleITK.VectorInt64___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorInt64 self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j) -> VectorInt64"""
        return _SimpleITK.VectorInt64___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorInt64 self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j)
        __setslice__(VectorInt64 self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j, VectorInt64 v)
        """
        return _SimpleITK.VectorInt64___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorInt64 self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j)"""
        return _SimpleITK.VectorInt64___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorInt64 self, std::vector< long long >::difference_type i)
        __delitem__(VectorInt64 self, PySliceObject * slice)
        """
        return _SimpleITK.VectorInt64___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorInt64 self, PySliceObject * slice) -> VectorInt64
        __getitem__(VectorInt64 self, std::vector< long long >::difference_type i) -> std::vector< long long >::value_type const &
        """
        return _SimpleITK.VectorInt64___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorInt64 self, PySliceObject * slice, VectorInt64 v)
        __setitem__(VectorInt64 self, PySliceObject * slice)
        __setitem__(VectorInt64 self, std::vector< long long >::difference_type i, std::vector< long long >::value_type const & x)
        """
        return _SimpleITK.VectorInt64___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorInt64 self) -> std::vector< long long >::value_type"""
        return _SimpleITK.VectorInt64_pop(self)

    def append(self, x):
        r"""append(VectorInt64 self, std::vector< long long >::value_type const & x)"""
        return _SimpleITK.VectorInt64_append(self, x)

    def empty(self):
        r"""empty(VectorInt64 self) -> bool"""
        return _SimpleITK.VectorInt64_empty(self)

    def size(self):
        r"""size(VectorInt64 self) -> std::vector< long long >::size_type"""
        return _SimpleITK.VectorInt64_size(self)

    def swap(self, v):
        r"""swap(VectorInt64 self, VectorInt64 v)"""
        return _SimpleITK.VectorInt64_swap(self, v)

    def begin(self):
        r"""begin(VectorInt64 self) -> std::vector< long long >::iterator"""
        return _SimpleITK.VectorInt64_begin(self)

    def end(self):
        r"""end(VectorInt64 self) -> std::vector< long long >::iterator"""
        return _SimpleITK.VectorInt64_end(self)

    def rbegin(self):
        r"""rbegin(VectorInt64 self) -> std::vector< long long >::reverse_iterator"""
        return _SimpleITK.VectorInt64_rbegin(self)

    def rend(self):
        r"""rend(VectorInt64 self) -> std::vector< long long >::reverse_iterator"""
        return _SimpleITK.VectorInt64_rend(self)

    def clear(self):
        r"""clear(VectorInt64 self)"""
        return _SimpleITK.VectorInt64_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorInt64 self) -> std::vector< long long >::allocator_type"""
        return _SimpleITK.VectorInt64_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorInt64 self)"""
        return _SimpleITK.VectorInt64_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorInt64 self, std::vector< long long >::iterator pos) -> std::vector< long long >::iterator
        erase(VectorInt64 self, std::vector< long long >::iterator first, std::vector< long long >::iterator last) -> std::vector< long long >::iterator
        """
        return _SimpleITK.VectorInt64_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorInt64 self) -> VectorInt64
        __init__(VectorInt64 self, VectorInt64 other) -> VectorInt64
        __init__(VectorInt64 self, std::vector< long long >::size_type size) -> VectorInt64
        __init__(VectorInt64 self, std::vector< long long >::size_type size, std::vector< long long >::value_type const & value) -> VectorInt64
        """
        _SimpleITK.VectorInt64_swiginit(self, _SimpleITK.new_VectorInt64(*args))

    def push_back(self, x):
        r"""push_back(VectorInt64 self, std::vector< long long >::value_type const & x)"""
        return _SimpleITK.VectorInt64_push_back(self, x)

    def front(self):
        r"""front(VectorInt64 self) -> std::vector< long long >::value_type const &"""
        return _SimpleITK.VectorInt64_front(self)

    def back(self):
        r"""back(VectorInt64 self) -> std::vector< long long >::value_type const &"""
        return _SimpleITK.VectorInt64_back(self)

    def assign(self, n, x):
        r"""assign(VectorInt64 self, std::vector< long long >::size_type n, std::vector< long long >::value_type const & x)"""
        return _SimpleITK.VectorInt64_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorInt64 self, std::vector< long long >::size_type new_size)
        resize(VectorInt64 self, std::vector< long long >::size_type new_size, std::vector< long long >::value_type const & x)
        """
        return _SimpleITK.VectorInt64_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorInt64 self, std::vector< long long >::iterator pos, std::vector< long long >::value_type const & x) -> std::vector< long long >::iterator
        insert(VectorInt64 self, std::vector< long long >::iterator pos, std::vector< long long >::size_type n, std::vector< long long >::value_type const & x)
        """
        return _SimpleITK.VectorInt64_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorInt64 self, std::vector< long long >::size_type n)"""
        return _SimpleITK.VectorInt64_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorInt64 self) -> std::vector< long long >::size_type"""
        return _SimpleITK.VectorInt64_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorInt64

# Register VectorInt64 in _SimpleITK:
_SimpleITK.VectorInt64_swigregister(VectorInt64)

class VectorFloat(object):
    r"""Proxy of C++ std::vector< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorFloat self) -> SwigPyIterator"""
        return _SimpleITK.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorFloat self) -> bool"""
        return _SimpleITK.VectorFloat___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorFloat self) -> bool"""
        return _SimpleITK.VectorFloat___bool__(self)

    def __len__(self):
        r"""__len__(VectorFloat self) -> std::vector< float >::size_type"""
        return _SimpleITK.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> VectorFloat"""
        return _SimpleITK.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)
        __setslice__(VectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, VectorFloat v)
        """
        return _SimpleITK.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"""
        return _SimpleITK.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorFloat self, std::vector< float >::difference_type i)
        __delitem__(VectorFloat self, PySliceObject * slice)
        """
        return _SimpleITK.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorFloat self, PySliceObject * slice) -> VectorFloat
        __getitem__(VectorFloat self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &
        """
        return _SimpleITK.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorFloat self, PySliceObject * slice, VectorFloat v)
        __setitem__(VectorFloat self, PySliceObject * slice)
        __setitem__(VectorFloat self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)
        """
        return _SimpleITK.VectorFloat___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorFloat self) -> std::vector< float >::value_type"""
        return _SimpleITK.VectorFloat_pop(self)

    def append(self, x):
        r"""append(VectorFloat self, std::vector< float >::value_type const & x)"""
        return _SimpleITK.VectorFloat_append(self, x)

    def empty(self):
        r"""empty(VectorFloat self) -> bool"""
        return _SimpleITK.VectorFloat_empty(self)

    def size(self):
        r"""size(VectorFloat self) -> std::vector< float >::size_type"""
        return _SimpleITK.VectorFloat_size(self)

    def swap(self, v):
        r"""swap(VectorFloat self, VectorFloat v)"""
        return _SimpleITK.VectorFloat_swap(self, v)

    def begin(self):
        r"""begin(VectorFloat self) -> std::vector< float >::iterator"""
        return _SimpleITK.VectorFloat_begin(self)

    def end(self):
        r"""end(VectorFloat self) -> std::vector< float >::iterator"""
        return _SimpleITK.VectorFloat_end(self)

    def rbegin(self):
        r"""rbegin(VectorFloat self) -> std::vector< float >::reverse_iterator"""
        return _SimpleITK.VectorFloat_rbegin(self)

    def rend(self):
        r"""rend(VectorFloat self) -> std::vector< float >::reverse_iterator"""
        return _SimpleITK.VectorFloat_rend(self)

    def clear(self):
        r"""clear(VectorFloat self)"""
        return _SimpleITK.VectorFloat_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorFloat self) -> std::vector< float >::allocator_type"""
        return _SimpleITK.VectorFloat_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorFloat self)"""
        return _SimpleITK.VectorFloat_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorFloat self, std::vector< float >::iterator pos) -> std::vector< float >::iterator
        erase(VectorFloat self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator
        """
        return _SimpleITK.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorFloat self) -> VectorFloat
        __init__(VectorFloat self, VectorFloat other) -> VectorFloat
        __init__(VectorFloat self, std::vector< float >::size_type size) -> VectorFloat
        __init__(VectorFloat self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> VectorFloat
        """
        _SimpleITK.VectorFloat_swiginit(self, _SimpleITK.new_VectorFloat(*args))

    def push_back(self, x):
        r"""push_back(VectorFloat self, std::vector< float >::value_type const & x)"""
        return _SimpleITK.VectorFloat_push_back(self, x)

    def front(self):
        r"""front(VectorFloat self) -> std::vector< float >::value_type const &"""
        return _SimpleITK.VectorFloat_front(self)

    def back(self):
        r"""back(VectorFloat self) -> std::vector< float >::value_type const &"""
        return _SimpleITK.VectorFloat_back(self)

    def assign(self, n, x):
        r"""assign(VectorFloat self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"""
        return _SimpleITK.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorFloat self, std::vector< float >::size_type new_size)
        resize(VectorFloat self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)
        """
        return _SimpleITK.VectorFloat_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorFloat self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator
        insert(VectorFloat self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)
        """
        return _SimpleITK.VectorFloat_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorFloat self, std::vector< float >::size_type n)"""
        return _SimpleITK.VectorFloat_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorFloat self) -> std::vector< float >::size_type"""
        return _SimpleITK.VectorFloat_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorFloat

# Register VectorFloat in _SimpleITK:
_SimpleITK.VectorFloat_swigregister(VectorFloat)

class VectorDouble(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorDouble self) -> SwigPyIterator"""
        return _SimpleITK.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorDouble self) -> bool"""
        return _SimpleITK.VectorDouble___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorDouble self) -> bool"""
        return _SimpleITK.VectorDouble___bool__(self)

    def __len__(self):
        r"""__len__(VectorDouble self) -> std::vector< double >::size_type"""
        return _SimpleITK.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> VectorDouble"""
        return _SimpleITK.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(VectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, VectorDouble v)
        """
        return _SimpleITK.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _SimpleITK.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorDouble self, std::vector< double >::difference_type i)
        __delitem__(VectorDouble self, PySliceObject * slice)
        """
        return _SimpleITK.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorDouble self, PySliceObject * slice) -> VectorDouble
        __getitem__(VectorDouble self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _SimpleITK.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorDouble self, PySliceObject * slice, VectorDouble v)
        __setitem__(VectorDouble self, PySliceObject * slice)
        __setitem__(VectorDouble self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _SimpleITK.VectorDouble___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorDouble self) -> std::vector< double >::value_type"""
        return _SimpleITK.VectorDouble_pop(self)

    def append(self, x):
        r"""append(VectorDouble self, std::vector< double >::value_type const & x)"""
        return _SimpleITK.VectorDouble_append(self, x)

    def empty(self):
        r"""empty(VectorDouble self) -> bool"""
        return _SimpleITK.VectorDouble_empty(self)

    def size(self):
        r"""size(VectorDouble self) -> std::vector< double >::size_type"""
        return _SimpleITK.VectorDouble_size(self)

    def swap(self, v):
        r"""swap(VectorDouble self, VectorDouble v)"""
        return _SimpleITK.VectorDouble_swap(self, v)

    def begin(self):
        r"""begin(VectorDouble self) -> std::vector< double >::iterator"""
        return _SimpleITK.VectorDouble_begin(self)

    def end(self):
        r"""end(VectorDouble self) -> std::vector< double >::iterator"""
        return _SimpleITK.VectorDouble_end(self)

    def rbegin(self):
        r"""rbegin(VectorDouble self) -> std::vector< double >::reverse_iterator"""
        return _SimpleITK.VectorDouble_rbegin(self)

    def rend(self):
        r"""rend(VectorDouble self) -> std::vector< double >::reverse_iterator"""
        return _SimpleITK.VectorDouble_rend(self)

    def clear(self):
        r"""clear(VectorDouble self)"""
        return _SimpleITK.VectorDouble_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorDouble self) -> std::vector< double >::allocator_type"""
        return _SimpleITK.VectorDouble_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorDouble self)"""
        return _SimpleITK.VectorDouble_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorDouble self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(VectorDouble self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _SimpleITK.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorDouble self) -> VectorDouble
        __init__(VectorDouble self, VectorDouble other) -> VectorDouble
        __init__(VectorDouble self, std::vector< double >::size_type size) -> VectorDouble
        __init__(VectorDouble self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> VectorDouble
        """
        _SimpleITK.VectorDouble_swiginit(self, _SimpleITK.new_VectorDouble(*args))

    def push_back(self, x):
        r"""push_back(VectorDouble self, std::vector< double >::value_type const & x)"""
        return _SimpleITK.VectorDouble_push_back(self, x)

    def front(self):
        r"""front(VectorDouble self) -> std::vector< double >::value_type const &"""
        return _SimpleITK.VectorDouble_front(self)

    def back(self):
        r"""back(VectorDouble self) -> std::vector< double >::value_type const &"""
        return _SimpleITK.VectorDouble_back(self)

    def assign(self, n, x):
        r"""assign(VectorDouble self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _SimpleITK.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorDouble self, std::vector< double >::size_type new_size)
        resize(VectorDouble self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _SimpleITK.VectorDouble_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorDouble self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(VectorDouble self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _SimpleITK.VectorDouble_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorDouble self, std::vector< double >::size_type n)"""
        return _SimpleITK.VectorDouble_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorDouble self) -> std::vector< double >::size_type"""
        return _SimpleITK.VectorDouble_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorDouble

# Register VectorDouble in _SimpleITK:
_SimpleITK.VectorDouble_swigregister(VectorDouble)

class VectorOfImage(object):
    r"""Proxy of C++ std::vector< itk::simple::Image > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorOfImage self) -> SwigPyIterator"""
        return _SimpleITK.VectorOfImage_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorOfImage self) -> bool"""
        return _SimpleITK.VectorOfImage___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorOfImage self) -> bool"""
        return _SimpleITK.VectorOfImage___bool__(self)

    def __len__(self):
        r"""__len__(VectorOfImage self) -> std::vector< itk::simple::Image >::size_type"""
        return _SimpleITK.VectorOfImage___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorOfImage self, std::vector< itk::simple::Image >::difference_type i, std::vector< itk::simple::Image >::difference_type j) -> VectorOfImage"""
        return _SimpleITK.VectorOfImage___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorOfImage self, std::vector< itk::simple::Image >::difference_type i, std::vector< itk::simple::Image >::difference_type j)
        __setslice__(VectorOfImage self, std::vector< itk::simple::Image >::difference_type i, std::vector< itk::simple::Image >::difference_type j, VectorOfImage v)
        """
        return _SimpleITK.VectorOfImage___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorOfImage self, std::vector< itk::simple::Image >::difference_type i, std::vector< itk::simple::Image >::difference_type j)"""
        return _SimpleITK.VectorOfImage___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorOfImage self, std::vector< itk::simple::Image >::difference_type i)
        __delitem__(VectorOfImage self, PySliceObject * slice)
        """
        return _SimpleITK.VectorOfImage___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorOfImage self, PySliceObject * slice) -> VectorOfImage
        __getitem__(VectorOfImage self, std::vector< itk::simple::Image >::difference_type i) -> Image
        """
        return _SimpleITK.VectorOfImage___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorOfImage self, PySliceObject * slice, VectorOfImage v)
        __setitem__(VectorOfImage self, PySliceObject * slice)
        __setitem__(VectorOfImage self, std::vector< itk::simple::Image >::difference_type i, Image x)
        """
        return _SimpleITK.VectorOfImage___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorOfImage self) -> Image"""
        return _SimpleITK.VectorOfImage_pop(self)

    def append(self, x):
        r"""append(VectorOfImage self, Image x)"""
        return _SimpleITK.VectorOfImage_append(self, x)

    def empty(self):
        r"""empty(VectorOfImage self) -> bool"""
        return _SimpleITK.VectorOfImage_empty(self)

    def size(self):
        r"""size(VectorOfImage self) -> std::vector< itk::simple::Image >::size_type"""
        return _SimpleITK.VectorOfImage_size(self)

    def swap(self, v):
        r"""swap(VectorOfImage self, VectorOfImage v)"""
        return _SimpleITK.VectorOfImage_swap(self, v)

    def begin(self):
        r"""begin(VectorOfImage self) -> std::vector< itk::simple::Image >::iterator"""
        return _SimpleITK.VectorOfImage_begin(self)

    def end(self):
        r"""end(VectorOfImage self) -> std::vector< itk::simple::Image >::iterator"""
        return _SimpleITK.VectorOfImage_end(self)

    def rbegin(self):
        r"""rbegin(VectorOfImage self) -> std::vector< itk::simple::Image >::reverse_iterator"""
        return _SimpleITK.VectorOfImage_rbegin(self)

    def rend(self):
        r"""rend(VectorOfImage self) -> std::vector< itk::simple::Image >::reverse_iterator"""
        return _SimpleITK.VectorOfImage_rend(self)

    def clear(self):
        r"""clear(VectorOfImage self)"""
        return _SimpleITK.VectorOfImage_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorOfImage self) -> std::vector< itk::simple::Image >::allocator_type"""
        return _SimpleITK.VectorOfImage_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorOfImage self)"""
        return _SimpleITK.VectorOfImage_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorOfImage self, std::vector< itk::simple::Image >::iterator pos) -> std::vector< itk::simple::Image >::iterator
        erase(VectorOfImage self, std::vector< itk::simple::Image >::iterator first, std::vector< itk::simple::Image >::iterator last) -> std::vector< itk::simple::Image >::iterator
        """
        return _SimpleITK.VectorOfImage_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorOfImage self) -> VectorOfImage
        __init__(VectorOfImage self, VectorOfImage other) -> VectorOfImage
        __init__(VectorOfImage self, std::vector< itk::simple::Image >::size_type size) -> VectorOfImage
        __init__(VectorOfImage self, std::vector< itk::simple::Image >::size_type size, Image value) -> VectorOfImage
        """
        _SimpleITK.VectorOfImage_swiginit(self, _SimpleITK.new_VectorOfImage(*args))

    def push_back(self, x):
        r"""push_back(VectorOfImage self, Image x)"""
        return _SimpleITK.VectorOfImage_push_back(self, x)

    def front(self):
        r"""front(VectorOfImage self) -> Image"""
        return _SimpleITK.VectorOfImage_front(self)

    def back(self):
        r"""back(VectorOfImage self) -> Image"""
        return _SimpleITK.VectorOfImage_back(self)

    def assign(self, n, x):
        r"""assign(VectorOfImage self, std::vector< itk::simple::Image >::size_type n, Image x)"""
        return _SimpleITK.VectorOfImage_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorOfImage self, std::vector< itk::simple::Image >::size_type new_size)
        resize(VectorOfImage self, std::vector< itk::simple::Image >::size_type new_size, Image x)
        """
        return _SimpleITK.VectorOfImage_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorOfImage self, std::vector< itk::simple::Image >::iterator pos, Image x) -> std::vector< itk::simple::Image >::iterator
        insert(VectorOfImage self, std::vector< itk::simple::Image >::iterator pos, std::vector< itk::simple::Image >::size_type n, Image x)
        """
        return _SimpleITK.VectorOfImage_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorOfImage self, std::vector< itk::simple::Image >::size_type n)"""
        return _SimpleITK.VectorOfImage_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorOfImage self) -> std::vector< itk::simple::Image >::size_type"""
        return _SimpleITK.VectorOfImage_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorOfImage

# Register VectorOfImage in _SimpleITK:
_SimpleITK.VectorOfImage_swigregister(VectorOfImage)

class VectorOfTransform(object):
    r"""Proxy of C++ std::vector< itk::simple::Transform > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorOfTransform self) -> SwigPyIterator"""
        return _SimpleITK.VectorOfTransform_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorOfTransform self) -> bool"""
        return _SimpleITK.VectorOfTransform___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorOfTransform self) -> bool"""
        return _SimpleITK.VectorOfTransform___bool__(self)

    def __len__(self):
        r"""__len__(VectorOfTransform self) -> std::vector< itk::simple::Transform >::size_type"""
        return _SimpleITK.VectorOfTransform___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorOfTransform self, std::vector< itk::simple::Transform >::difference_type i, std::vector< itk::simple::Transform >::difference_type j) -> VectorOfTransform"""
        return _SimpleITK.VectorOfTransform___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorOfTransform self, std::vector< itk::simple::Transform >::difference_type i, std::vector< itk::simple::Transform >::difference_type j)
        __setslice__(VectorOfTransform self, std::vector< itk::simple::Transform >::difference_type i, std::vector< itk::simple::Transform >::difference_type j, VectorOfTransform v)
        """
        return _SimpleITK.VectorOfTransform___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorOfTransform self, std::vector< itk::simple::Transform >::difference_type i, std::vector< itk::simple::Transform >::difference_type j)"""
        return _SimpleITK.VectorOfTransform___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorOfTransform self, std::vector< itk::simple::Transform >::difference_type i)
        __delitem__(VectorOfTransform self, PySliceObject * slice)
        """
        return _SimpleITK.VectorOfTransform___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorOfTransform self, PySliceObject * slice) -> VectorOfTransform
        __getitem__(VectorOfTransform self, std::vector< itk::simple::Transform >::difference_type i) -> Transform
        """
        return _SimpleITK.VectorOfTransform___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorOfTransform self, PySliceObject * slice, VectorOfTransform v)
        __setitem__(VectorOfTransform self, PySliceObject * slice)
        __setitem__(VectorOfTransform self, std::vector< itk::simple::Transform >::difference_type i, Transform x)
        """
        return _SimpleITK.VectorOfTransform___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorOfTransform self) -> Transform"""
        return _SimpleITK.VectorOfTransform_pop(self)

    def append(self, x):
        r"""append(VectorOfTransform self, Transform x)"""
        return _SimpleITK.VectorOfTransform_append(self, x)

    def empty(self):
        r"""empty(VectorOfTransform self) -> bool"""
        return _SimpleITK.VectorOfTransform_empty(self)

    def size(self):
        r"""size(VectorOfTransform self) -> std::vector< itk::simple::Transform >::size_type"""
        return _SimpleITK.VectorOfTransform_size(self)

    def swap(self, v):
        r"""swap(VectorOfTransform self, VectorOfTransform v)"""
        return _SimpleITK.VectorOfTransform_swap(self, v)

    def begin(self):
        r"""begin(VectorOfTransform self) -> std::vector< itk::simple::Transform >::iterator"""
        return _SimpleITK.VectorOfTransform_begin(self)

    def end(self):
        r"""end(VectorOfTransform self) -> std::vector< itk::simple::Transform >::iterator"""
        return _SimpleITK.VectorOfTransform_end(self)

    def rbegin(self):
        r"""rbegin(VectorOfTransform self) -> std::vector< itk::simple::Transform >::reverse_iterator"""
        return _SimpleITK.VectorOfTransform_rbegin(self)

    def rend(self):
        r"""rend(VectorOfTransform self) -> std::vector< itk::simple::Transform >::reverse_iterator"""
        return _SimpleITK.VectorOfTransform_rend(self)

    def clear(self):
        r"""clear(VectorOfTransform self)"""
        return _SimpleITK.VectorOfTransform_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorOfTransform self) -> std::vector< itk::simple::Transform >::allocator_type"""
        return _SimpleITK.VectorOfTransform_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorOfTransform self)"""
        return _SimpleITK.VectorOfTransform_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorOfTransform self, std::vector< itk::simple::Transform >::iterator pos) -> std::vector< itk::simple::Transform >::iterator
        erase(VectorOfTransform self, std::vector< itk::simple::Transform >::iterator first, std::vector< itk::simple::Transform >::iterator last) -> std::vector< itk::simple::Transform >::iterator
        """
        return _SimpleITK.VectorOfTransform_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorOfTransform self) -> VectorOfTransform
        __init__(VectorOfTransform self, VectorOfTransform other) -> VectorOfTransform
        __init__(VectorOfTransform self, std::vector< itk::simple::Transform >::size_type size) -> VectorOfTransform
        __init__(VectorOfTransform self, std::vector< itk::simple::Transform >::size_type size, Transform value) -> VectorOfTransform
        """
        _SimpleITK.VectorOfTransform_swiginit(self, _SimpleITK.new_VectorOfTransform(*args))

    def push_back(self, x):
        r"""push_back(VectorOfTransform self, Transform x)"""
        return _SimpleITK.VectorOfTransform_push_back(self, x)

    def front(self):
        r"""front(VectorOfTransform self) -> Transform"""
        return _SimpleITK.VectorOfTransform_front(self)

    def back(self):
        r"""back(VectorOfTransform self) -> Transform"""
        return _SimpleITK.VectorOfTransform_back(self)

    def assign(self, n, x):
        r"""assign(VectorOfTransform self, std::vector< itk::simple::Transform >::size_type n, Transform x)"""
        return _SimpleITK.VectorOfTransform_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorOfTransform self, std::vector< itk::simple::Transform >::size_type new_size)
        resize(VectorOfTransform self, std::vector< itk::simple::Transform >::size_type new_size, Transform x)
        """
        return _SimpleITK.VectorOfTransform_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorOfTransform self, std::vector< itk::simple::Transform >::iterator pos, Transform x) -> std::vector< itk::simple::Transform >::iterator
        insert(VectorOfTransform self, std::vector< itk::simple::Transform >::iterator pos, std::vector< itk::simple::Transform >::size_type n, Transform x)
        """
        return _SimpleITK.VectorOfTransform_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorOfTransform self, std::vector< itk::simple::Transform >::size_type n)"""
        return _SimpleITK.VectorOfTransform_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorOfTransform self) -> std::vector< itk::simple::Transform >::size_type"""
        return _SimpleITK.VectorOfTransform_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorOfTransform

# Register VectorOfTransform in _SimpleITK:
_SimpleITK.VectorOfTransform_swigregister(VectorOfTransform)

class VectorUIntList(object):
    r"""Proxy of C++ std::vector< std::vector< unsigned int > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorUIntList self) -> SwigPyIterator"""
        return _SimpleITK.VectorUIntList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorUIntList self) -> bool"""
        return _SimpleITK.VectorUIntList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorUIntList self) -> bool"""
        return _SimpleITK.VectorUIntList___bool__(self)

    def __len__(self):
        r"""__len__(VectorUIntList self) -> std::vector< std::vector< unsigned int > >::size_type"""
        return _SimpleITK.VectorUIntList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorUIntList self, std::vector< std::vector< unsigned int > >::difference_type i, std::vector< std::vector< unsigned int > >::difference_type j) -> VectorUIntList"""
        return _SimpleITK.VectorUIntList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorUIntList self, std::vector< std::vector< unsigned int > >::difference_type i, std::vector< std::vector< unsigned int > >::difference_type j)
        __setslice__(VectorUIntList self, std::vector< std::vector< unsigned int > >::difference_type i, std::vector< std::vector< unsigned int > >::difference_type j, VectorUIntList v)
        """
        return _SimpleITK.VectorUIntList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorUIntList self, std::vector< std::vector< unsigned int > >::difference_type i, std::vector< std::vector< unsigned int > >::difference_type j)"""
        return _SimpleITK.VectorUIntList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorUIntList self, std::vector< std::vector< unsigned int > >::difference_type i)
        __delitem__(VectorUIntList self, PySliceObject * slice)
        """
        return _SimpleITK.VectorUIntList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorUIntList self, PySliceObject * slice) -> VectorUIntList
        __getitem__(VectorUIntList self, std::vector< std::vector< unsigned int > >::difference_type i) -> VectorUInt32
        """
        return _SimpleITK.VectorUIntList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorUIntList self, PySliceObject * slice, VectorUIntList v)
        __setitem__(VectorUIntList self, PySliceObject * slice)
        __setitem__(VectorUIntList self, std::vector< std::vector< unsigned int > >::difference_type i, VectorUInt32 x)
        """
        return _SimpleITK.VectorUIntList___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorUIntList self) -> VectorUInt32"""
        return _SimpleITK.VectorUIntList_pop(self)

    def append(self, x):
        r"""append(VectorUIntList self, VectorUInt32 x)"""
        return _SimpleITK.VectorUIntList_append(self, x)

    def empty(self):
        r"""empty(VectorUIntList self) -> bool"""
        return _SimpleITK.VectorUIntList_empty(self)

    def size(self):
        r"""size(VectorUIntList self) -> std::vector< std::vector< unsigned int > >::size_type"""
        return _SimpleITK.VectorUIntList_size(self)

    def swap(self, v):
        r"""swap(VectorUIntList self, std::vector< std::vector< unsigned int,std::allocator< unsigned int > > > & v)"""
        return _SimpleITK.VectorUIntList_swap(self, v)

    def begin(self):
        r"""begin(VectorUIntList self) -> std::vector< std::vector< unsigned int > >::iterator"""
        return _SimpleITK.VectorUIntList_begin(self)

    def end(self):
        r"""end(VectorUIntList self) -> std::vector< std::vector< unsigned int > >::iterator"""
        return _SimpleITK.VectorUIntList_end(self)

    def rbegin(self):
        r"""rbegin(VectorUIntList self) -> std::vector< std::vector< unsigned int > >::reverse_iterator"""
        return _SimpleITK.VectorUIntList_rbegin(self)

    def rend(self):
        r"""rend(VectorUIntList self) -> std::vector< std::vector< unsigned int > >::reverse_iterator"""
        return _SimpleITK.VectorUIntList_rend(self)

    def clear(self):
        r"""clear(VectorUIntList self)"""
        return _SimpleITK.VectorUIntList_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorUIntList self) -> std::vector< std::vector< unsigned int > >::allocator_type"""
        return _SimpleITK.VectorUIntList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorUIntList self)"""
        return _SimpleITK.VectorUIntList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorUIntList self, std::vector< std::vector< unsigned int > >::iterator pos) -> std::vector< std::vector< unsigned int > >::iterator
        erase(VectorUIntList self, std::vector< std::vector< unsigned int > >::iterator first, std::vector< std::vector< unsigned int > >::iterator last) -> std::vector< std::vector< unsigned int > >::iterator
        """
        return _SimpleITK.VectorUIntList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorUIntList self) -> VectorUIntList
        __init__(VectorUIntList self, std::vector< std::vector< unsigned int,std::allocator< unsigned int > > > const & other) -> VectorUIntList
        __init__(VectorUIntList self, std::vector< std::vector< unsigned int > >::size_type size) -> VectorUIntList
        __init__(VectorUIntList self, std::vector< std::vector< unsigned int > >::size_type size, VectorUInt32 value) -> VectorUIntList
        """
        _SimpleITK.VectorUIntList_swiginit(self, _SimpleITK.new_VectorUIntList(*args))

    def push_back(self, x):
        r"""push_back(VectorUIntList self, VectorUInt32 x)"""
        return _SimpleITK.VectorUIntList_push_back(self, x)

    def front(self):
        r"""front(VectorUIntList self) -> VectorUInt32"""
        return _SimpleITK.VectorUIntList_front(self)

    def back(self):
        r"""back(VectorUIntList self) -> VectorUInt32"""
        return _SimpleITK.VectorUIntList_back(self)

    def assign(self, n, x):
        r"""assign(VectorUIntList self, std::vector< std::vector< unsigned int > >::size_type n, VectorUInt32 x)"""
        return _SimpleITK.VectorUIntList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorUIntList self, std::vector< std::vector< unsigned int > >::size_type new_size)
        resize(VectorUIntList self, std::vector< std::vector< unsigned int > >::size_type new_size, VectorUInt32 x)
        """
        return _SimpleITK.VectorUIntList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorUIntList self, std::vector< std::vector< unsigned int > >::iterator pos, VectorUInt32 x) -> std::vector< std::vector< unsigned int > >::iterator
        insert(VectorUIntList self, std::vector< std::vector< unsigned int > >::iterator pos, std::vector< std::vector< unsigned int > >::size_type n, VectorUInt32 x)
        """
        return _SimpleITK.VectorUIntList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorUIntList self, std::vector< std::vector< unsigned int > >::size_type n)"""
        return _SimpleITK.VectorUIntList_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorUIntList self) -> std::vector< std::vector< unsigned int > >::size_type"""
        return _SimpleITK.VectorUIntList_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorUIntList

# Register VectorUIntList in _SimpleITK:
_SimpleITK.VectorUIntList_swigregister(VectorUIntList)

class VectorString(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorString self) -> SwigPyIterator"""
        return _SimpleITK.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorString self) -> bool"""
        return _SimpleITK.VectorString___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorString self) -> bool"""
        return _SimpleITK.VectorString___bool__(self)

    def __len__(self):
        r"""__len__(VectorString self) -> std::vector< std::string >::size_type"""
        return _SimpleITK.VectorString___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> VectorString"""
        return _SimpleITK.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, VectorString v)
        """
        return _SimpleITK.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _SimpleITK.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorString self, std::vector< std::string >::difference_type i)
        __delitem__(VectorString self, PySliceObject * slice)
        """
        return _SimpleITK.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorString self, PySliceObject * slice) -> VectorString
        __getitem__(VectorString self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _SimpleITK.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorString self, PySliceObject * slice, VectorString v)
        __setitem__(VectorString self, PySliceObject * slice)
        __setitem__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _SimpleITK.VectorString___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorString self) -> std::vector< std::string >::value_type"""
        return _SimpleITK.VectorString_pop(self)

    def append(self, x):
        r"""append(VectorString self, std::vector< std::string >::value_type const & x)"""
        return _SimpleITK.VectorString_append(self, x)

    def empty(self):
        r"""empty(VectorString self) -> bool"""
        return _SimpleITK.VectorString_empty(self)

    def size(self):
        r"""size(VectorString self) -> std::vector< std::string >::size_type"""
        return _SimpleITK.VectorString_size(self)

    def swap(self, v):
        r"""swap(VectorString self, VectorString v)"""
        return _SimpleITK.VectorString_swap(self, v)

    def begin(self):
        r"""begin(VectorString self) -> std::vector< std::string >::iterator"""
        return _SimpleITK.VectorString_begin(self)

    def end(self):
        r"""end(VectorString self) -> std::vector< std::string >::iterator"""
        return _SimpleITK.VectorString_end(self)

    def rbegin(self):
        r"""rbegin(VectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _SimpleITK.VectorString_rbegin(self)

    def rend(self):
        r"""rend(VectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _SimpleITK.VectorString_rend(self)

    def clear(self):
        r"""clear(VectorString self)"""
        return _SimpleITK.VectorString_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorString self) -> std::vector< std::string >::allocator_type"""
        return _SimpleITK.VectorString_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorString self)"""
        return _SimpleITK.VectorString_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorString self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(VectorString self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _SimpleITK.VectorString_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorString self) -> VectorString
        __init__(VectorString self, VectorString other) -> VectorString
        __init__(VectorString self, std::vector< std::string >::size_type size) -> VectorString
        __init__(VectorString self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> VectorString
        """
        _SimpleITK.VectorString_swiginit(self, _SimpleITK.new_VectorString(*args))

    def push_back(self, x):
        r"""push_back(VectorString self, std::vector< std::string >::value_type const & x)"""
        return _SimpleITK.VectorString_push_back(self, x)

    def front(self):
        r"""front(VectorString self) -> std::vector< std::string >::value_type const &"""
        return _SimpleITK.VectorString_front(self)

    def back(self):
        r"""back(VectorString self) -> std::vector< std::string >::value_type const &"""
        return _SimpleITK.VectorString_back(self)

    def assign(self, n, x):
        r"""assign(VectorString self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _SimpleITK.VectorString_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorString self, std::vector< std::string >::size_type new_size)
        resize(VectorString self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _SimpleITK.VectorString_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(VectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _SimpleITK.VectorString_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorString self, std::vector< std::string >::size_type n)"""
        return _SimpleITK.VectorString_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorString self) -> std::vector< std::string >::size_type"""
        return _SimpleITK.VectorString_capacity(self)
    __swig_destroy__ = _SimpleITK.delete_VectorString

# Register VectorString in _SimpleITK:
_SimpleITK.VectorString_swigregister(VectorString)

class DoubleDoubleMap(object):
    r"""Proxy of C++ std::map< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DoubleDoubleMap self) -> SwigPyIterator"""
        return _SimpleITK.DoubleDoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DoubleDoubleMap self) -> bool"""
        return _SimpleITK.DoubleDoubleMap___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DoubleDoubleMap self) -> bool"""
        return _SimpleITK.DoubleDoubleMap___bool__(self)

    def __len__(self):
        r"""__len__(DoubleDoubleMap self) -> std::map< double,double >::size_type"""
        return _SimpleITK.DoubleDoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(DoubleDoubleMap self, std::map< double,double >::key_type const & key) -> std::map< double,double >::mapped_type const &"""
        return _SimpleITK.DoubleDoubleMap___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(DoubleDoubleMap self, std::map< double,double >::key_type const & key)"""
        return _SimpleITK.DoubleDoubleMap___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(DoubleDoubleMap self, std::map< double,double >::key_type const & key) -> bool"""
        return _SimpleITK.DoubleDoubleMap_has_key(self, key)

    def keys(self):
        r"""keys(DoubleDoubleMap self) -> PyObject *"""
        return _SimpleITK.DoubleDoubleMap_keys(self)

    def values(self):
        r"""values(DoubleDoubleMap self) -> PyObject *"""
        return _SimpleITK.DoubleDoubleMap_values(self)

    def items(self):
        r"""items(DoubleDoubleMap self) -> PyObject *"""
        return _SimpleITK.DoubleDoubleMap_items(self)

    def __contains__(self, key):
        r"""__contains__(DoubleDoubleMap self, std::map< double,double >::key_type const & key) -> bool"""
        return _SimpleITK.DoubleDoubleMap___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(DoubleDoubleMap self) -> SwigPyIterator"""
        return _SimpleITK.DoubleDoubleMap_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(DoubleDoubleMap self) -> SwigPyIterator"""
        return _SimpleITK.DoubleDoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(DoubleDoubleMap self, std::map< double,double >::key_type const & key)
        __setitem__(DoubleDoubleMap self, std::map< double,double >::key_type const & key, std::map< double,double >::mapped_type const & x)
        """
        return _SimpleITK.DoubleDoubleMap___setitem__(self, *args)

    def asdict(self):
        r"""asdict(DoubleDoubleMap self) -> PyObject *"""
        return _SimpleITK.DoubleDoubleMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(DoubleDoubleMap self, std::less< double > const & other) -> DoubleDoubleMap
        __init__(DoubleDoubleMap self) -> DoubleDoubleMap
        __init__(DoubleDoubleMap self, DoubleDoubleMap other) -> DoubleDoubleMap
        """
        _SimpleITK.DoubleDoubleMap_swiginit(self, _SimpleITK.new_DoubleDoubleMap(*args))

    def empty(self):
        r"""empty(DoubleDoubleMap self) -> bool"""
        return _SimpleITK.DoubleDoubleMap_empty(self)

    def size(self):
        r"""size(DoubleDoubleMap self) -> std::map< double,double >::size_type"""
        return _SimpleITK.DoubleDoubleMap_size(self)

    def swap(self, v):
        r"""swap(DoubleDoubleMap self, DoubleDoubleMap v)"""
        return _SimpleITK.DoubleDoubleMap_swap(self, v)

    def begin(self):
        r"""begin(DoubleDoubleMap self) -> std::map< double,double >::iterator"""
        return _SimpleITK.DoubleDoubleMap_begin(self)

    def end(self):
        r"""end(DoubleDoubleMap self) -> std::map< double,double >::iterator"""
        return _SimpleITK.DoubleDoubleMap_end(self)

    def rbegin(self):
        r"""rbegin(DoubleDoubleMap self) -> std::map< double,double >::reverse_iterator"""
        return _SimpleITK.DoubleDoubleMap_rbegin(self)

    def rend(self):
        r"""rend(DoubleDoubleMap self) -> std::map< double,double >::reverse_iterator"""
        return _SimpleITK.DoubleDoubleMap_rend(self)

    def clear(self):
        r"""clear(DoubleDoubleMap self)"""
        return _SimpleITK.DoubleDoubleMap_clear(self)

    def get_allocator(self):
        r"""get_allocator(DoubleDoubleMap self) -> std::map< double,double >::allocator_type"""
        return _SimpleITK.DoubleDoubleMap_get_allocator(self)

    def count(self, x):
        r"""count(DoubleDoubleMap self, std::map< double,double >::key_type const & x) -> std::map< double,double >::size_type"""
        return _SimpleITK.DoubleDoubleMap_count(self, x)

    def erase(self, *args):
        r"""
        erase(DoubleDoubleMap self, std::map< double,double >::key_type const & x) -> std::map< double,double >::size_type
        erase(DoubleDoubleMap self, std::map< double,double >::iterator position)
        erase(DoubleDoubleMap self, std::map< double,double >::iterator first, std::map< double,double >::iterator last)
        """
        return _SimpleITK.DoubleDoubleMap_erase(self, *args)

    def find(self, x):
        r"""find(DoubleDoubleMap self, std::map< double,double >::key_type const & x) -> std::map< double,double >::iterator"""
        return _SimpleITK.DoubleDoubleMap_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(DoubleDoubleMap self, std::map< double,double >::key_type const & x) -> std::map< double,double >::iterator"""
        return _SimpleITK.DoubleDoubleMap_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(DoubleDoubleMap self, std::map< double,double >::key_type const & x) -> std::map< double,double >::iterator"""
        return _SimpleITK.DoubleDoubleMap_upper_bound(self, x)
    __swig_destroy__ = _SimpleITK.delete_DoubleDoubleMap

# Register DoubleDoubleMap in _SimpleITK:
_SimpleITK.DoubleDoubleMap_swigregister(DoubleDoubleMap)


import operator
import sys
from collections import namedtuple

SITK_MAX_DIMENSION = _SimpleITK.SITK_MAX_DIMENSION

SITK_ITK_VERSION_MAJOR = _SimpleITK.SITK_ITK_VERSION_MAJOR

SITK_ITK_VERSION_MINOR = _SimpleITK.SITK_ITK_VERSION_MINOR

SITK_ITK_VERSION_PATCH = _SimpleITK.SITK_ITK_VERSION_PATCH

class Version(object):
    r"""Proxy of C++ itk::simple::Version class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def MajorVersion():
        r"""MajorVersion() -> unsigned int"""
        return _SimpleITK.Version_MajorVersion()

    @staticmethod
    def MinorVersion():
        r"""MinorVersion() -> unsigned int"""
        return _SimpleITK.Version_MinorVersion()

    @staticmethod
    def PatchVersion():
        r"""PatchVersion() -> unsigned int"""
        return _SimpleITK.Version_PatchVersion()

    @staticmethod
    def TweakVersion():
        r"""TweakVersion() -> unsigned int"""
        return _SimpleITK.Version_TweakVersion()

    @staticmethod
    def VersionString():
        r"""VersionString() -> std::string const &"""
        return _SimpleITK.Version_VersionString()

    @staticmethod
    def BuildDate():
        r"""BuildDate() -> std::string const &"""
        return _SimpleITK.Version_BuildDate()

    @staticmethod
    def ITKMajorVersion():
        r"""ITKMajorVersion() -> unsigned int"""
        return _SimpleITK.Version_ITKMajorVersion()

    @staticmethod
    def ITKMinorVersion():
        r"""ITKMinorVersion() -> unsigned int"""
        return _SimpleITK.Version_ITKMinorVersion()

    @staticmethod
    def ITKPatchVersion():
        r"""ITKPatchVersion() -> unsigned int"""
        return _SimpleITK.Version_ITKPatchVersion()

    @staticmethod
    def ITKVersionString():
        r"""ITKVersionString() -> std::string const &"""
        return _SimpleITK.Version_ITKVersionString()

    @staticmethod
    def ITKModulesEnabled():
        r"""ITKModulesEnabled() -> VectorString"""
        return _SimpleITK.Version_ITKModulesEnabled()

    @staticmethod
    def ExtendedVersionString():
        r"""ExtendedVersionString() -> std::string const &"""
        return _SimpleITK.Version_ExtendedVersionString()

    def __str__(self):
        r"""__str__(Version self) -> std::string"""
        return _SimpleITK.Version___str__(self)

    def __init__(self):
        r"""__init__(Version self) -> Version"""
        _SimpleITK.Version_swiginit(self, _SimpleITK.new_Version())
    __swig_destroy__ = _SimpleITK.delete_Version

# Register Version in _SimpleITK:
_SimpleITK.Version_swigregister(Version)
_GetMemoryViewFromImage = _SimpleITK._GetMemoryViewFromImage
_SetImageFromArray = _SimpleITK._SetImageFromArray

def Version_MajorVersion():
    r"""Version_MajorVersion() -> unsigned int"""
    return _SimpleITK.Version_MajorVersion()

def Version_MinorVersion():
    r"""Version_MinorVersion() -> unsigned int"""
    return _SimpleITK.Version_MinorVersion()

def Version_PatchVersion():
    r"""Version_PatchVersion() -> unsigned int"""
    return _SimpleITK.Version_PatchVersion()

def Version_TweakVersion():
    r"""Version_TweakVersion() -> unsigned int"""
    return _SimpleITK.Version_TweakVersion()

def Version_VersionString():
    r"""Version_VersionString() -> std::string const &"""
    return _SimpleITK.Version_VersionString()

def Version_BuildDate():
    r"""Version_BuildDate() -> std::string const &"""
    return _SimpleITK.Version_BuildDate()

def Version_ITKMajorVersion():
    r"""Version_ITKMajorVersion() -> unsigned int"""
    return _SimpleITK.Version_ITKMajorVersion()

def Version_ITKMinorVersion():
    r"""Version_ITKMinorVersion() -> unsigned int"""
    return _SimpleITK.Version_ITKMinorVersion()

def Version_ITKPatchVersion():
    r"""Version_ITKPatchVersion() -> unsigned int"""
    return _SimpleITK.Version_ITKPatchVersion()

def Version_ITKVersionString():
    r"""Version_ITKVersionString() -> std::string const &"""
    return _SimpleITK.Version_ITKVersionString()

def Version_ITKModulesEnabled():
    r"""Version_ITKModulesEnabled() -> VectorString"""
    return _SimpleITK.Version_ITKModulesEnabled()

def Version_ExtendedVersionString():
    r"""Version_ExtendedVersionString() -> std::string const &"""
    return _SimpleITK.Version_ExtendedVersionString()

sitkUnknown = _SimpleITK.sitkUnknown

sitkUInt8 = _SimpleITK.sitkUInt8

sitkInt8 = _SimpleITK.sitkInt8

sitkUInt16 = _SimpleITK.sitkUInt16

sitkInt16 = _SimpleITK.sitkInt16

sitkUInt32 = _SimpleITK.sitkUInt32

sitkInt32 = _SimpleITK.sitkInt32

sitkUInt64 = _SimpleITK.sitkUInt64

sitkInt64 = _SimpleITK.sitkInt64

sitkFloat32 = _SimpleITK.sitkFloat32

sitkFloat64 = _SimpleITK.sitkFloat64

sitkComplexFloat32 = _SimpleITK.sitkComplexFloat32

sitkComplexFloat64 = _SimpleITK.sitkComplexFloat64

sitkVectorUInt8 = _SimpleITK.sitkVectorUInt8

sitkVectorInt8 = _SimpleITK.sitkVectorInt8

sitkVectorUInt16 = _SimpleITK.sitkVectorUInt16

sitkVectorInt16 = _SimpleITK.sitkVectorInt16

sitkVectorUInt32 = _SimpleITK.sitkVectorUInt32

sitkVectorInt32 = _SimpleITK.sitkVectorInt32

sitkVectorUInt64 = _SimpleITK.sitkVectorUInt64

sitkVectorInt64 = _SimpleITK.sitkVectorInt64

sitkVectorFloat32 = _SimpleITK.sitkVectorFloat32

sitkVectorFloat64 = _SimpleITK.sitkVectorFloat64

sitkLabelUInt8 = _SimpleITK.sitkLabelUInt8

sitkLabelUInt16 = _SimpleITK.sitkLabelUInt16

sitkLabelUInt32 = _SimpleITK.sitkLabelUInt32

sitkLabelUInt64 = _SimpleITK.sitkLabelUInt64


def GetPixelIDValueAsString(type):
    r"""GetPixelIDValueAsString(itk::simple::PixelIDValueEnum type) -> std::string const"""
    return _SimpleITK.GetPixelIDValueAsString(type)

def GetPixelIDValueFromString(enumString):
    r"""GetPixelIDValueFromString(std::string const & enumString) -> itk::simple::PixelIDValueType"""
    return _SimpleITK.GetPixelIDValueFromString(enumString)
class Image(object):
    r"""Proxy of C++ itk::simple::Image class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_Image

    def __init__(self, *args):
        r"""
        __init__(Image self) -> Image
        __init__(Image self, Image img) -> Image
        __init__(Image self, unsigned int width, unsigned int height, itk::simple::PixelIDValueEnum valueEnum) -> Image
        __init__(Image self, unsigned int width, unsigned int height, unsigned int depth, itk::simple::PixelIDValueEnum valueEnum) -> Image
        __init__(Image self, VectorUInt32 size, itk::simple::PixelIDValueEnum valueEnum, unsigned int numberOfComponents=0) -> Image
        """
        _SimpleITK.Image_swiginit(self, _SimpleITK.new_Image(*args))

    def GetITKBase(self, *args):
        r"""
        GetITKBase(Image self) -> itk::DataObject
        GetITKBase(Image self) -> itk::DataObject const *
        """
        return _SimpleITK.Image_GetITKBase(self, *args)

    def GetPixelID(self):
        r"""GetPixelID(Image self) -> itk::simple::PixelIDValueEnum"""
        return _SimpleITK.Image_GetPixelID(self)

    def GetPixelIDValue(self):
        r"""GetPixelIDValue(Image self) -> itk::simple::PixelIDValueType"""
        return _SimpleITK.Image_GetPixelIDValue(self)

    def GetPixelIDTypeAsString(self):
        r"""GetPixelIDTypeAsString(Image self) -> std::string"""
        return _SimpleITK.Image_GetPixelIDTypeAsString(self)

    def GetDimension(self):
        r"""GetDimension(Image self) -> unsigned int"""
        return _SimpleITK.Image_GetDimension(self)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(Image self) -> unsigned int"""
        return _SimpleITK.Image_GetNumberOfComponentsPerPixel(self)

    def GetNumberOfPixels(self):
        r"""GetNumberOfPixels(Image self) -> uint64_t"""
        return _SimpleITK.Image_GetNumberOfPixels(self)

    def GetOrigin(self):
        r"""GetOrigin(Image self) -> VectorDouble"""
        return _SimpleITK.Image_GetOrigin(self)

    def SetOrigin(self, origin):
        r"""SetOrigin(Image self, VectorDouble origin)"""
        return _SimpleITK.Image_SetOrigin(self, origin)

    def GetSpacing(self):
        r"""GetSpacing(Image self) -> VectorDouble"""
        return _SimpleITK.Image_GetSpacing(self)

    def SetSpacing(self, spacing):
        r"""SetSpacing(Image self, VectorDouble spacing)"""
        return _SimpleITK.Image_SetSpacing(self, spacing)

    def GetDirection(self):
        r"""GetDirection(Image self) -> VectorDouble"""
        return _SimpleITK.Image_GetDirection(self)

    def SetDirection(self, direction):
        r"""SetDirection(Image self, VectorDouble direction)"""
        return _SimpleITK.Image_SetDirection(self, direction)

    def TransformIndexToPhysicalPoint(self, index):
        r"""TransformIndexToPhysicalPoint(Image self, VectorInt64 index) -> VectorDouble"""
        return _SimpleITK.Image_TransformIndexToPhysicalPoint(self, index)

    def TransformPhysicalPointToIndex(self, point):
        r"""TransformPhysicalPointToIndex(Image self, VectorDouble point) -> VectorInt64"""
        return _SimpleITK.Image_TransformPhysicalPointToIndex(self, point)

    def TransformPhysicalPointToContinuousIndex(self, point):
        r"""TransformPhysicalPointToContinuousIndex(Image self, VectorDouble point) -> VectorDouble"""
        return _SimpleITK.Image_TransformPhysicalPointToContinuousIndex(self, point)

    def TransformContinuousIndexToPhysicalPoint(self, index):
        r"""TransformContinuousIndexToPhysicalPoint(Image self, VectorDouble index) -> VectorDouble"""
        return _SimpleITK.Image_TransformContinuousIndexToPhysicalPoint(self, index)

    def GetSize(self):
        r"""GetSize(Image self) -> VectorUInt32"""
        return _SimpleITK.Image_GetSize(self)

    def GetWidth(self):
        r"""GetWidth(Image self) -> unsigned int"""
        return _SimpleITK.Image_GetWidth(self)

    def GetHeight(self):
        r"""GetHeight(Image self) -> unsigned int"""
        return _SimpleITK.Image_GetHeight(self)

    def GetDepth(self):
        r"""GetDepth(Image self) -> unsigned int"""
        return _SimpleITK.Image_GetDepth(self)

    def CopyInformation(self, srcImage):
        r"""CopyInformation(Image self, Image srcImage)"""
        return _SimpleITK.Image_CopyInformation(self, srcImage)

    def GetMetaDataKeys(self):
        r"""GetMetaDataKeys(Image self) -> VectorString"""
        return _SimpleITK.Image_GetMetaDataKeys(self)

    def HasMetaDataKey(self, key):
        r"""HasMetaDataKey(Image self, std::string const & key) -> bool"""
        return _SimpleITK.Image_HasMetaDataKey(self, key)

    def GetMetaData(self, key):
        r"""GetMetaData(Image self, std::string const & key) -> std::string"""
        return _SimpleITK.Image_GetMetaData(self, key)

    def SetMetaData(self, key, value):
        r"""SetMetaData(Image self, std::string const & key, std::string const & value)"""
        return _SimpleITK.Image_SetMetaData(self, key, value)

    def EraseMetaData(self, key):
        r"""EraseMetaData(Image self, std::string const & key) -> bool"""
        return _SimpleITK.Image_EraseMetaData(self, key)

    def __str__(self):
        r"""__str__(Image self) -> std::string"""
        return _SimpleITK.Image___str__(self)

    def __GetPixelAsInt8__(self, idx):
        r"""__GetPixelAsInt8__(Image self, VectorUInt32 idx) -> int8_t"""
        return _SimpleITK.Image___GetPixelAsInt8__(self, idx)

    def __GetPixelAsUInt8__(self, idx):
        r"""__GetPixelAsUInt8__(Image self, VectorUInt32 idx) -> uint8_t"""
        return _SimpleITK.Image___GetPixelAsUInt8__(self, idx)

    def __GetPixelAsInt16__(self, idx):
        r"""__GetPixelAsInt16__(Image self, VectorUInt32 idx) -> int16_t"""
        return _SimpleITK.Image___GetPixelAsInt16__(self, idx)

    def __GetPixelAsUInt16__(self, idx):
        r"""__GetPixelAsUInt16__(Image self, VectorUInt32 idx) -> uint16_t"""
        return _SimpleITK.Image___GetPixelAsUInt16__(self, idx)

    def __GetPixelAsInt32__(self, idx):
        r"""__GetPixelAsInt32__(Image self, VectorUInt32 idx) -> int32_t"""
        return _SimpleITK.Image___GetPixelAsInt32__(self, idx)

    def __GetPixelAsUInt32__(self, idx):
        r"""__GetPixelAsUInt32__(Image self, VectorUInt32 idx) -> uint32_t"""
        return _SimpleITK.Image___GetPixelAsUInt32__(self, idx)

    def __GetPixelAsInt64__(self, idx):
        r"""__GetPixelAsInt64__(Image self, VectorUInt32 idx) -> int64_t"""
        return _SimpleITK.Image___GetPixelAsInt64__(self, idx)

    def __GetPixelAsUInt64__(self, idx):
        r"""__GetPixelAsUInt64__(Image self, VectorUInt32 idx) -> uint64_t"""
        return _SimpleITK.Image___GetPixelAsUInt64__(self, idx)

    def __GetPixelAsFloat__(self, idx):
        r"""__GetPixelAsFloat__(Image self, VectorUInt32 idx) -> float"""
        return _SimpleITK.Image___GetPixelAsFloat__(self, idx)

    def __GetPixelAsDouble__(self, idx):
        r"""__GetPixelAsDouble__(Image self, VectorUInt32 idx) -> double"""
        return _SimpleITK.Image___GetPixelAsDouble__(self, idx)

    def __GetPixelAsVectorInt8__(self, idx):
        r"""__GetPixelAsVectorInt8__(Image self, VectorUInt32 idx) -> VectorInt8"""
        return _SimpleITK.Image___GetPixelAsVectorInt8__(self, idx)

    def __GetPixelAsVectorUInt8__(self, idx):
        r"""__GetPixelAsVectorUInt8__(Image self, VectorUInt32 idx) -> VectorUInt8"""
        return _SimpleITK.Image___GetPixelAsVectorUInt8__(self, idx)

    def __GetPixelAsVectorInt16__(self, idx):
        r"""__GetPixelAsVectorInt16__(Image self, VectorUInt32 idx) -> VectorInt16"""
        return _SimpleITK.Image___GetPixelAsVectorInt16__(self, idx)

    def __GetPixelAsVectorUInt16__(self, idx):
        r"""__GetPixelAsVectorUInt16__(Image self, VectorUInt32 idx) -> VectorUInt16"""
        return _SimpleITK.Image___GetPixelAsVectorUInt16__(self, idx)

    def __GetPixelAsVectorInt32__(self, idx):
        r"""__GetPixelAsVectorInt32__(Image self, VectorUInt32 idx) -> VectorInt32"""
        return _SimpleITK.Image___GetPixelAsVectorInt32__(self, idx)

    def __GetPixelAsVectorUInt32__(self, idx):
        r"""__GetPixelAsVectorUInt32__(Image self, VectorUInt32 idx) -> VectorUInt32"""
        return _SimpleITK.Image___GetPixelAsVectorUInt32__(self, idx)

    def __GetPixelAsVectorInt64__(self, idx):
        r"""__GetPixelAsVectorInt64__(Image self, VectorUInt32 idx) -> VectorInt64"""
        return _SimpleITK.Image___GetPixelAsVectorInt64__(self, idx)

    def __GetPixelAsVectorUInt64__(self, idx):
        r"""__GetPixelAsVectorUInt64__(Image self, VectorUInt32 idx) -> VectorUInt64"""
        return _SimpleITK.Image___GetPixelAsVectorUInt64__(self, idx)

    def __GetPixelAsVectorFloat32__(self, idx):
        r"""__GetPixelAsVectorFloat32__(Image self, VectorUInt32 idx) -> VectorFloat"""
        return _SimpleITK.Image___GetPixelAsVectorFloat32__(self, idx)

    def __GetPixelAsVectorFloat64__(self, idx):
        r"""__GetPixelAsVectorFloat64__(Image self, VectorUInt32 idx) -> VectorDouble"""
        return _SimpleITK.Image___GetPixelAsVectorFloat64__(self, idx)

    def __GetPixelAsComplexFloat32__(self, idx):
        r"""__GetPixelAsComplexFloat32__(Image self, VectorUInt32 idx) -> std::complex< float >"""
        return _SimpleITK.Image___GetPixelAsComplexFloat32__(self, idx)

    def GetPixelAsComplexFloat64(self, idx):
        r"""GetPixelAsComplexFloat64(Image self, VectorUInt32 idx) -> std::complex< double >"""
        return _SimpleITK.Image_GetPixelAsComplexFloat64(self, idx)

    def __SetPixelAsInt8__(self, idx, v):
        r"""__SetPixelAsInt8__(Image self, VectorUInt32 idx, int8_t v)"""
        return _SimpleITK.Image___SetPixelAsInt8__(self, idx, v)

    def __SetPixelAsUInt8__(self, idx, v):
        r"""__SetPixelAsUInt8__(Image self, VectorUInt32 idx, uint8_t v)"""
        return _SimpleITK.Image___SetPixelAsUInt8__(self, idx, v)

    def __SetPixelAsInt16__(self, idx, v):
        r"""__SetPixelAsInt16__(Image self, VectorUInt32 idx, int16_t v)"""
        return _SimpleITK.Image___SetPixelAsInt16__(self, idx, v)

    def __SetPixelAsUInt16__(self, idx, v):
        r"""__SetPixelAsUInt16__(Image self, VectorUInt32 idx, uint16_t v)"""
        return _SimpleITK.Image___SetPixelAsUInt16__(self, idx, v)

    def __SetPixelAsInt32__(self, idx, v):
        r"""__SetPixelAsInt32__(Image self, VectorUInt32 idx, int32_t v)"""
        return _SimpleITK.Image___SetPixelAsInt32__(self, idx, v)

    def __SetPixelAsUInt32__(self, idx, v):
        r"""__SetPixelAsUInt32__(Image self, VectorUInt32 idx, uint32_t v)"""
        return _SimpleITK.Image___SetPixelAsUInt32__(self, idx, v)

    def __SetPixelAsInt64__(self, idx, v):
        r"""__SetPixelAsInt64__(Image self, VectorUInt32 idx, int64_t v)"""
        return _SimpleITK.Image___SetPixelAsInt64__(self, idx, v)

    def __SetPixelAsUInt64__(self, idx, v):
        r"""__SetPixelAsUInt64__(Image self, VectorUInt32 idx, uint64_t v)"""
        return _SimpleITK.Image___SetPixelAsUInt64__(self, idx, v)

    def __SetPixelAsFloat__(self, idx, v):
        r"""__SetPixelAsFloat__(Image self, VectorUInt32 idx, float v)"""
        return _SimpleITK.Image___SetPixelAsFloat__(self, idx, v)

    def __SetPixelAsDouble__(self, idx, v):
        r"""__SetPixelAsDouble__(Image self, VectorUInt32 idx, double v)"""
        return _SimpleITK.Image___SetPixelAsDouble__(self, idx, v)

    def __SetPixelAsVectorInt8__(self, idx, v):
        r"""__SetPixelAsVectorInt8__(Image self, VectorUInt32 idx, VectorInt8 v)"""
        return _SimpleITK.Image___SetPixelAsVectorInt8__(self, idx, v)

    def __SetPixelAsVectorUInt8__(self, idx, v):
        r"""__SetPixelAsVectorUInt8__(Image self, VectorUInt32 idx, VectorUInt8 v)"""
        return _SimpleITK.Image___SetPixelAsVectorUInt8__(self, idx, v)

    def __SetPixelAsVectorInt16__(self, idx, v):
        r"""__SetPixelAsVectorInt16__(Image self, VectorUInt32 idx, VectorInt16 v)"""
        return _SimpleITK.Image___SetPixelAsVectorInt16__(self, idx, v)

    def __SetPixelAsVectorUInt16__(self, idx, v):
        r"""__SetPixelAsVectorUInt16__(Image self, VectorUInt32 idx, VectorUInt16 v)"""
        return _SimpleITK.Image___SetPixelAsVectorUInt16__(self, idx, v)

    def __SetPixelAsVectorInt32__(self, idx, v):
        r"""__SetPixelAsVectorInt32__(Image self, VectorUInt32 idx, VectorInt32 v)"""
        return _SimpleITK.Image___SetPixelAsVectorInt32__(self, idx, v)

    def __SetPixelAsVectorUInt32__(self, idx, v):
        r"""__SetPixelAsVectorUInt32__(Image self, VectorUInt32 idx, VectorUInt32 v)"""
        return _SimpleITK.Image___SetPixelAsVectorUInt32__(self, idx, v)

    def __SetPixelAsVectorInt64__(self, idx, v):
        r"""__SetPixelAsVectorInt64__(Image self, VectorUInt32 idx, VectorInt64 v)"""
        return _SimpleITK.Image___SetPixelAsVectorInt64__(self, idx, v)

    def __SetPixelAsVectorUInt64__(self, idx, v):
        r"""__SetPixelAsVectorUInt64__(Image self, VectorUInt32 idx, VectorUInt64 v)"""
        return _SimpleITK.Image___SetPixelAsVectorUInt64__(self, idx, v)

    def __SetPixelAsVectorFloat32__(self, idx, v):
        r"""__SetPixelAsVectorFloat32__(Image self, VectorUInt32 idx, VectorFloat v)"""
        return _SimpleITK.Image___SetPixelAsVectorFloat32__(self, idx, v)

    def __SetPixelAsVectorFloat64__(self, idx, v):
        r"""__SetPixelAsVectorFloat64__(Image self, VectorUInt32 idx, VectorDouble v)"""
        return _SimpleITK.Image___SetPixelAsVectorFloat64__(self, idx, v)

    def __SetPixelAsComplexFloat32__(self, idx, v):
        r"""__SetPixelAsComplexFloat32__(Image self, VectorUInt32 idx, std::complex< float > const v)"""
        return _SimpleITK.Image___SetPixelAsComplexFloat32__(self, idx, v)

    def SetPixelAsComplexFloat64(self, idx, v):
        r"""SetPixelAsComplexFloat64(Image self, VectorUInt32 idx, std::complex< double > const v)"""
        return _SimpleITK.Image_SetPixelAsComplexFloat64(self, idx, v)

    def MakeUnique(self):
        r"""MakeUnique(Image self)"""
        return _SimpleITK.Image_MakeUnique(self)

    def IsUnique(self):
        r"""IsUnique(Image self) -> bool"""
        return _SimpleITK.Image_IsUnique(self)

    def __iadd__(self, *args):
        r"""
        __iadd__(Image self, Image i) -> Image
        __iadd__(Image self, double c) -> Image
        """
        return _SimpleITK.Image___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(Image self, Image i) -> Image
        __isub__(Image self, double c) -> Image
        """
        return _SimpleITK.Image___isub__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(Image self, Image i) -> Image
        __imul__(Image self, double c) -> Image
        """
        return _SimpleITK.Image___imul__(self, *args)

    def __imod__(self, *args):
        r"""
        __imod__(Image self, Image i) -> Image
        __imod__(Image self, int c) -> Image
        """
        return _SimpleITK.Image___imod__(self, *args)

    def __ifloordiv__(self, *args):
        r"""
        __ifloordiv__(Image self, Image i) -> Image
        __ifloordiv__(Image self, double c) -> Image
        """
        return _SimpleITK.Image___ifloordiv__(self, *args)

    def __itruediv__(self, *args):
        r"""
        __itruediv__(Image self, Image i) -> Image
        __itruediv__(Image self, double c) -> Image
        """
        return _SimpleITK.Image___itruediv__(self, *args)

    def __ipow__(self, *args):
        r"""
        __ipow__(Image self, Image i) -> Image
        __ipow__(Image self, double c) -> Image
        """
        return _SimpleITK.Image___ipow__(self, *args)

    def __ior__(self, *args):
        r"""
        __ior__(Image self, Image i) -> Image
        __ior__(Image self, int c) -> Image
        """
        return _SimpleITK.Image___ior__(self, *args)

    def __ixor__(self, *args):
        r"""
        __ixor__(Image self, Image i) -> Image
        __ixor__(Image self, int c) -> Image
        """
        return _SimpleITK.Image___ixor__(self, *args)

    def __iand__(self, *args):
        r"""
        __iand__(Image self, Image i) -> Image
        __iand__(Image self, int c) -> Image
        """
        return _SimpleITK.Image___iand__(self, *args)

    def __ipaste(self, *args):
        r"""
        __ipaste(Image self, Image sourceImage, VectorUInt32 sourceSize, VectorInt32 sourceIndex, VectorInt32 destinationIndex, VectorBool destinationSkipAxes) -> Image
        __ipaste(Image self, double constant, VectorUInt32 sourceSize, VectorInt32 sourceIndex, VectorInt32 destinationIndex, VectorBool destinationSkipAxes) -> Image
        """
        return _SimpleITK.Image___ipaste(self, *args)


    def __copy__(self):
      """Create a SimpleITK shallow copy, where the internal image share is shared with copy on write implementation."""
      return Image(self)

    def __deepcopy__(self, memo):
      """Create a new copy of the data and image class."""
      dc = Image(self)
      dc.MakeUnique()
      return dc

    def __setstate__(self, args):
      if args[0] != 0:
        raise ValueError("Unable to handle SimpleITK.Image pickle version {0}".args[0])

      state = namedtuple('state_tuple_0', "version buffer origin spacing direction metadata")(*args)

      _SetImageFromArray(state.buffer, self)
      self.SetOrigin(state.origin)
      self.SetSpacing(state.spacing)
      self.SetDirection(state.direction)
      for k,v in state.metadata.items():
        self.SetMetaData(k,v)

    def __reduce_ex__(self, protocol ):
      version = 0
      size = tuple(self.GetSize())
      t = int(self.GetPixelIDValue())
      ncomponents = int(self.GetNumberOfComponentsPerPixel())

      mv = _GetMemoryViewFromImage(self)
      origin = tuple(self.GetOrigin())
      spacing = tuple(self.GetSpacing())
      direction = tuple(self.GetDirection())
      metadata = {k:self.GetMetaData(k) for k in self.GetMetaDataKeys()}

      if protocol >= 5:
        import sys
        if sys.hexversion >= 0x03080000:
          import pickle
        elif sys.hexversion >= 0x03060000:
          try:
            import pickle5 as pickle
          except ImportError:
            raise ImportError("Pickle protocol 5 requires the pickle5 module for Python 3.6, 3.7")
        P = (version, pickle.PickleBuffer(mv), origin, spacing, direction, metadata)
      else:
        P = (version, mv.tobytes(), origin, spacing, direction, metadata)

      return self.__class__, (size, t, ncomponents), P



    # mathematical operators

    def __add__( self, other ):
        if isinstance( other, Image ):
           return Add( self, other )
        try:
           return Add( self, float(other)  )
        except ValueError:
           return NotImplemented
    def __sub__( self, other ):
        if isinstance( other, Image ):
           return Subtract( self, other )
        try:
           return Subtract( self, float(other) )
        except ValueError:
           return NotImplemented
    def __mul__( self, other ):
        if isinstance( other, Image ):
           return Multiply( self, other )
        try:
           return Multiply( self, float(other) )
        except ValueError:
           return NotImplemented
    def __div__( self, other ):
        if isinstance( other, Image ):
           return Divide( self, other )
        try:
           return Divide( self, float(other) )
        except ValueError:
           return NotImplemented
    def __floordiv__( self, other ):
        if isinstance( other, Image ):
           return DivideFloor( self, other )
        try:
           return DivideFloor( self, float(other) )
        except ValueError:
           return NotImplemented
    def __truediv__( self, other ):
        if isinstance( other, Image ):
           return DivideReal( self, other )
        try:
           return DivideReal( self, float(other) )
        except ValueError:
           return NotImplemented


    def __neg__( self ):
        return UnaryMinus( self )
    def __pos__( self ):
        return self

    # NOTE: for the reverse methods other cannot be an image, so
    # therefore other should be able to be considered a constant.

    def __radd__( self, other ):
        try:
           return Add( float(other), self )
        except ValueError:
           return NotImplemented
    def __rsub__( self, other ):
        try:
           return Subtract( float(other), self )
        except ValueError:
           return NotImplemented
    def __rmul__( self, other ):
        try:
           return Multiply( float(other), self )
        except ValueError:
           return NotImplemented
    def __rdiv__( self, other ):
        try:
           return Divide( float(other), self )
        except ValueError:
           return NotImplemented
    def __rfloordiv__( self, other ):
        try:
           return DivideFloor( float(other), self )
        except ValueError:
           return NotImplemented
    def __rtruediv__( self, other ):
        try:
           return DivideReal( float(other), self )
        except ValueError:
           return NotImplemented


    # logic operators

    def __and__( self, other ):
        if isinstance( other, Image ):
           return And( self, other )
        try:
           return And( self, int(other) )
        except ValueError:
           return NotImplemented
    def __rand__( self, other ):
        try:
           return And( int(other), self )
        except ValueError:
           return NotImplemented
    def __or__( self, other ):
        if isinstance( other, Image ):
           return Or( self, other )
        try:
           return Or( self, int(other) )
        except ValueError:
           return NotImplemented
    def __ror__( self, other ):
        try:
           return Or( int(other), self )
        except ValueError:
           return NotImplemented
    def __xor__( self, other ):
        if isinstance( other, Image ):
           return Xor( self, other )
        try:
           return Xor( self, int(other) )
        except ValueError:
           return NotImplemented
    def __rxor__( self, other ):
        try:
           return Xor( int(other), self )
        except ValueError:
           return NotImplemented
    def __invert__( self ): return BitwiseNot( self )

    # Relational and Equality operators

    def __lt__( self, other ):
        if isinstance( other, Image ):
           return Less( self, other )
        try:
           return Less( self, float(other) )
        except (ValueError, TypeError):
           return NotImplemented
    def __le__( self, other ):
        if isinstance( other, Image ):
           return LessEqual( self, other )
        try:
           return LessEqual( self, float(other) )
        except (ValueError, TypeError):
           return NotImplemented
    def __eq__( self, other ):
        if isinstance( other, Image ):
           return Equal( self, other )
        try:
           return Equal( self, float(other) )
        except (ValueError, TypeError):
           return NotImplemented
    def __ne__( self, other ):
        if isinstance( other, Image ):
           return NotEqual( self, other )
        try:
           return NotEqual( self, float(other) )
        except (ValueError, TypeError):
           return NotImplemented
    def __gt__( self, other ):
        if isinstance( other, Image ):
           return Greater( self, other )
        try:
           return Greater( self, float(other) )
        except (ValueError, TypeError):
           return NotImplemented
    def __ge__( self, other ):
        if isinstance( other, Image ):
           return GreaterEqual( self, other )
        try:
           return GreaterEqual( self, float(other) )
        except (ValueError, TypeError):
           return NotImplemented


    # "function" operators

    def __pow__( self, other ):
        if isinstance( other, Image ):
           return Pow( self, other )
        try:
           return Pow( self, float(other) )
        except ValueError:
           return NotImplemented
    def __rpow__( self, other ):
        try:
           return Pow( float(other), self )
        except ValueError:
           return NotImplemented
    def __mod__( self, other ):
        if isinstance( other, Image ):
           return Modulus( self, other )
        try:
           return Modulus( self, float(other) )
        except ValueError:
           return NotImplemented
    def __abs__( self ):
        return Abs( self )

    # iterator and container methods

    def __iter__( self ):

        if len(self) == 0:
          return

        dim = self.GetDimension()
        size = self.GetSize()
        idx = [0] * dim

        while idx[dim-1] < size[dim-1]:

          yield self[ idx ]

    # increment the idx
          for d in range( 0, dim ):
            idx[d] += 1
            if idx[d] >= size[d] and d != dim  - 1:
               idx[d] = 0
            else:
               break

        return

    def __len__( self ):
        l = 1
        for ds in self.GetSize():
          l *= ds
        return l

    # set/get pixel methods

    def __getitem__( self, idx ):
        """ Get an pixel value or a sliced image.

        This operator implements basic indexing where idx is
        arguments or a squence of integers the same dimension as
        the image. The result will be a pixel value from that
        index.

        Multi-dimension extended slice based indexing is also
        implemented. The return is a copy of a new image. The
        standard sliced based indices are supported including
        negative indices, to indicate location relative to the
        end, along with negative step sized to indicate reversing
        of direction.

        If the length of idx is less than the number of dimension
        of the image it will be padded with the defaults slice
        ":".

        When an index element is an integer, that dimension is
        collapsed extracting an image with reduced dimensionality.
        The minimum dimension of an image which can be extracted
        is 2D."""

        if sys.version_info[0] < 3:
          def isint( i ):
            return type(i) == int or type(i) == long
        else:
          def isint( i ):
            return type(i) == int

        dim = self.GetDimension()
        size = self.GetSize()

        try:
          if (len(idx) < dim):
    # if the argument tuple has fewer elements then the dimension of the image then extend to match that of the image
            idx = tuple(idx) + (slice(None),)*(dim-len(idx))
        except TypeError:
    # if the len function did not work then, assume is a
    # non-iterable, and make it a single element in a tuple.
          idx = (idx,) + (slice(None),)*(dim-1)

        if (len(idx) > dim):
           raise IndexError("too many indices for image")

    # All the indices are integers just return GetPixel value
        if all( isint(i) for i in idx ):
    # if any of the arguments are negative integers subract them for the size
          idx = [idx[i] if idx[i] >= 0 else (size[i] + idx[i]) for i in range(len(idx))]

          for i in range(len(idx)):
            if idx[i] < 0 or idx[i] >= size[i]:
              raise IndexError("index {0} is outside the extent for dimension {1} with size {2}".format( idx[i], i, size[i]))

          return self.GetPixel(*tuple(idx))


    # If an index is an integer then we are extracting to a small dimension
        slice_dims = []
        for i in range(len(idx)):
          if type(idx[i]) is slice:
            continue
          elif isint(idx[i]):
            slice_dims.append(i)

            s = idx[i]
            if s < 0:
              s += size[i]
            if s < 0 or s >= size[i]:
              raise IndexError("index {0} is outside the extent for dimension {1} with size {2}".format( idx[i], i, size[i]))


            idx = tuple(idx[:i]) + (slice(s, s+1),)+ tuple(idx[i+1:])

        if dim - len(slice_dims) < 2:
          raise IndexError("invalid slice extraction to 1 dimension")


    # Use the slice filter when all the elements are slices ( or have been processed to be )
        if all( type(i) is slice for i in idx ):

    # perform standard slice indexing, to clamp to ranges and add in defaults
          sidx = [ idx[i].indices(size[i]) for i in range(len(idx ))]

    # extract each element of the indices rages together
          (start, stop, step) = zip(*sidx)

    # run the slice filter
          img = Slice(self, start=start, stop=stop, step=step)

          if slice_dims:
            size = img.GetSize();

    # set the slice dimension size to 0
            for i in slice_dims:
              size = tuple(size[:i]) + (0,) + tuple(size[i+1:])

    # Reduce the dimension of the image
            img = Extract( img, size )

          return img


    # the index parameter was an invalid set of objects
        raise IndexError("invalid index")


    def __setitem__( self, idx, rvalue ):
        """Sets this image's pixel value(s) to rvalue.

        The dimension of idx must match that of the image.

        If all indices are integers then rvalue should be a pixel value
        ( scalar or sequence for vector pixels). The value is assigned to
        the pixel.

        If the indices are slices or integers then, the PasteImageFilter is
        used to assign values to this image. The rvalue can be an image
        or a scalar constant value. When rvalue is an image it must be of
        the same pixel type and equal or lesser dimension than self. The
        region defined by idx and rvalue's size must be compatible. The
        region defined by idx will collapse one sized idx dimensions when it
        does not match the rvalue image's size.
        """

        if sys.version_info[0] < 3:
          def isint( i ):
            return type(i) == int or type(i) == long
        else:
          def isint( i ):
            return type(i) == int

        dim = self.GetDimension()
        size = self.GetSize()

        try:
          if (len(idx) > dim):
            raise IndexError("too many indices for image")
          if (len(idx) < dim):
    # if the argument tuple has fewer elements then the dimension of the image then extend to match that of the image
            idx = tuple(idx) + (slice(None),)*(dim-len(idx))
        except TypeError:
    # if the len function did not work then, assume is a
    # non-iterable, and make it a single element in a tuple.
          idx = (idx,) + (slice(None),)*(dim-1)

    # All the indices are integers use SetPixel
        if all( isint(i) for i in idx ):
    # if any of the arguments are negative integers subract them from the size
          idx = [idx[i] if idx[i] >= 0 else (size[i] + idx[i]) for i in range(len(idx))]

          for i in range(len(idx)):
            if idx[i] < 0 or idx[i] >= size[i]:
              raise IndexError("index {0} is outside the extent for dimension {1} with size {2}".format( idx[i], i, size[i]))

          return self.SetPixel(*(tuple(idx)+(rvalue,)))

        for i in range(len(idx)):
          if type(idx[i]) is slice:
            continue
          elif isint(idx[i]):
            s = idx[i]
            if s < 0:
              s += size[i]
            if s < 0 or s >= size[i]:
              raise IndexError("index {0} is outside the extent for dimension {1} with size {2}".format( idx[i], i, size[i]))

            idx = tuple(idx[:i]) + (slice(s, s+1),)+ tuple(idx[i+1:])

        if all( type(i) is slice for i in idx ):
          sidx = [ idx[i].indices(size[i]) for i in range(len(idx ))]

          (start, stop, step) = zip(*sidx)
          size = [ e-b for b, e in zip(start, stop) ]
          try:
            sourceSize = rvalue.GetSize()
          except AttributeError:
            sourceSize = size

          for i in range(dim):
            if step[i] != 1:
              raise IndexError("step {0} is not 1 for dimension {1}".format(step[i], i))

          skipAxes = [False] * dim

          s = 0;
          for i in range(dim):

            if size[i] == 1 and (len(sourceSize) <= s or sourceSize[s] != size[i]):
              skipAxes[i] = True
              continue

            if len(sourceSize) <= s  or sourceSize[s] != size[i]:
              raise IndexError("cannot paste source with size {0} into destination with size {1}".format(size, sourceSize))
            s += 1

          size = [ sz for sz,skip  in zip(size, skipAxes) if not skip ]
          return self.__ipaste( rvalue, size, [0]*len(size), start, skipAxes)

    # the index parameter was an invalid set of objects
        raise IndexError("invalid index with types: {0}".format([type(i) for i in idx]))


    def GetPixel(self, *idx):
      """Returns the value of a pixel.

         This method takes 2 parameters in 2D: the x and y index,
         and 3 parameters in 3D: the x, y and z index."""

      if len(idx) == 1:
       idx = idx[0]

      pixelID = self.GetPixelIDValue()
      if pixelID == sitkUnknown:
        raise Exception("invalid pixel type")
      if pixelID == sitkInt8:
        return self.__GetPixelAsInt8__( idx )
      if pixelID == sitkUInt8 or pixelID == sitkLabelUInt8:
        return self.__GetPixelAsUInt8__( idx )
      if pixelID == sitkInt16:
        return self.__GetPixelAsInt16__( idx )
      if pixelID == sitkUInt16 or pixelID == sitkLabelUInt16:
        return self.__GetPixelAsUInt16__( idx )
      if pixelID == sitkInt32:
        return self.__GetPixelAsInt32__( idx )
      if pixelID == sitkUInt32 or pixelID == sitkLabelUInt32:
        return self.__GetPixelAsUInt32__( idx )
      if pixelID == sitkInt64:
        return self.__GetPixelAsInt64__( idx )
      if pixelID == sitkUInt64 or pixelID == sitkLabelUInt64:
        return self.__GetPixelAsUInt64__( idx )
      if pixelID == sitkFloat32:
        return self.__GetPixelAsFloat__( idx )
      if pixelID == sitkFloat64:
        return self.__GetPixelAsDouble__( idx )

      if pixelID == sitkVectorInt8:
        return self.__GetPixelAsVectorInt8__( idx )
      if pixelID == sitkVectorUInt8:
        return self.__GetPixelAsVectorUInt8__( idx )
      if pixelID == sitkVectorInt16:
        return self.__GetPixelAsVectorInt16__( idx )
      if pixelID == sitkVectorUInt16:
        return self.__GetPixelAsVectorUInt16__( idx )
      if pixelID == sitkVectorInt32:
        return self.__GetPixelAsVectorInt32__( idx )
      if pixelID == sitkVectorUInt32:
        return self.__GetPixelAsVectorUInt32__( idx )
      if pixelID == sitkVectorInt64:
        return self.__GetPixelAsVectorInt64__( idx )
      if pixelID == sitkVectorUInt64:
        return self.__GetPixelAsVectorUInt64__( idx )
      if pixelID == sitkVectorFloat32:
        return self.__GetPixelAsVectorFloat32__( idx )
      if pixelID == sitkVectorFloat64:
        return self.__GetPixelAsVectorFloat64__( idx )

      if pixelID == sitkComplexFloat32:
        return self.__GetPixelAsComplexFloat32__( idx )
      if pixelID == sitkComplexFloat64:
        return self.__GetPixelAsComplexFloat64__( idx )

      raise Exception("unknown pixel type")

    def SetPixel(self, *args):
      """Sets the value of a pixel.

       This method takes 3 parameters in 2D: the x and y index then the value,
       and 4 parameters in 3D: the x, y and z index then the value."""


      pixelID = self.GetPixelIDValue()
      if pixelID == sitkUnknown:
        raise Exception("invalid pixel type")

      if len(args) < 2:
        raise Exception( "Wrong number of arguments, coordinates arguments then value" )
      idx = args[:len(args)-1]
      if len(idx) == 1:
        idx = idx[0]
      value = args[-1]

      if pixelID == sitkInt8:
        return self.__SetPixelAsInt8__( idx, value )
      if pixelID == sitkUInt8 or pixelID == sitkLabelUInt8:
        return self.__SetPixelAsUInt8__( idx, value )
      if pixelID == sitkInt16:
        return self.__SetPixelAsInt16__( idx, value )
      if pixelID == sitkUInt16 or pixelID == sitkLabelUInt16:
        return self.__SetPixelAsUInt16__( idx, value )
      if pixelID == sitkInt32:
        return self.__SetPixelAsInt32__( idx, value )
      if pixelID == sitkUInt32 or pixelID == sitkLabelUInt32:
        return self.__SetPixelAsUInt32__( idx, value )
      if pixelID == sitkInt64:
        return self.__SetPixelAsInt64__( idx, value )
      if pixelID == sitkUInt64 or pixelID == sitkLabelUInt64:
        return self.__SetPixelAsUInt64__( idx, value )
      if pixelID == sitkFloat32:
        return self.__SetPixelAsFloat__( idx, value )
      if pixelID == sitkFloat64:
        return self.__SetPixelAsDouble__( idx, value )

      if pixelID == sitkVectorInt8:
        return self.__SetPixelAsVectorInt8__( idx, value )
      if pixelID == sitkVectorUInt8:
        return self.__SetPixelAsVectorUInt8__( idx, value )
      if pixelID == sitkVectorInt16:
        return self.__SetPixelAsVectorInt16__( idx, value )
      if pixelID == sitkVectorUInt16:
        return self.__SetPixelAsVectorUInt16__( idx, value )
      if pixelID == sitkVectorInt32:
        return self.__SetPixelAsVectorInt32__( idx, value )
      if pixelID == sitkVectorUInt32:
        return self.__SetPixelAsVectorUInt32__( idx, value )
      if pixelID == sitkVectorInt64:
        return self.__SetPixelAsVectorInt64__( idx, value )
      if pixelID == sitkVectorUInt64:
        return self.__SetPixelAsVectorUInt64__( idx, value )
      if pixelID == sitkVectorFloat32:
        return self.__SetPixelAsVectorFloat32__( idx, value )
      if pixelID == sitkVectorFloat64:
        return self.__SetPixelAsVectorFloat64__( idx, value )

      if pixelID == sitkComplexFloat32:
        return self.__SetPixelAsComplexFloat32__( idx, value )
      if pixelID == sitkComplexFloat64:
        return self.__SetPixelAsComplexFloat64__( idx, value )

      raise Exception("unknown pixel type")




# Register Image in _SimpleITK:
_SimpleITK.Image_swigregister(Image)

class Command(object):
    r"""Proxy of C++ itk::simple::Command class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Command self) -> Command"""
        if self.__class__ == Command:
            _self = None
        else:
            _self = self
        _SimpleITK.Command_swiginit(self, _SimpleITK.new_Command(_self, ))
    __swig_destroy__ = _SimpleITK.delete_Command

    def GetName(self):
        r"""GetName(Command self) -> std::string"""
        return _SimpleITK.Command_GetName(self)

    def SetName(self, name):
        r"""SetName(Command self, std::string const & name)"""
        return _SimpleITK.Command_SetName(self, name)

    def Execute(self):
        r"""Execute(Command self)"""
        return _SimpleITK.Command_Execute(self)
    def __disown__(self):
        self.this.disown()
        _SimpleITK.disown_Command(self)
        return weakref.proxy(self)

# Register Command in _SimpleITK:
_SimpleITK.Command_swigregister(Command)

sitkNearestNeighbor = _SimpleITK.sitkNearestNeighbor

sitkLinear = _SimpleITK.sitkLinear

sitkBSpline = _SimpleITK.sitkBSpline

sitkGaussian = _SimpleITK.sitkGaussian

sitkLabelGaussian = _SimpleITK.sitkLabelGaussian

sitkHammingWindowedSinc = _SimpleITK.sitkHammingWindowedSinc

sitkCosineWindowedSinc = _SimpleITK.sitkCosineWindowedSinc

sitkWelchWindowedSinc = _SimpleITK.sitkWelchWindowedSinc

sitkLanczosWindowedSinc = _SimpleITK.sitkLanczosWindowedSinc

sitkBlackmanWindowedSinc = _SimpleITK.sitkBlackmanWindowedSinc

sitkBSplineResampler = _SimpleITK.sitkBSplineResampler

sitkBSplineResamplerOrder3 = _SimpleITK.sitkBSplineResamplerOrder3

sitkBSplineResamplerOrder1 = _SimpleITK.sitkBSplineResamplerOrder1

sitkBSplineResamplerOrder2 = _SimpleITK.sitkBSplineResamplerOrder2

sitkBSplineResamplerOrder4 = _SimpleITK.sitkBSplineResamplerOrder4

sitkBSplineResamplerOrder5 = _SimpleITK.sitkBSplineResamplerOrder5

sitkAnnulus = _SimpleITK.sitkAnnulus

sitkBall = _SimpleITK.sitkBall

sitkBox = _SimpleITK.sitkBox

sitkCross = _SimpleITK.sitkCross

sitkPolygon3 = _SimpleITK.sitkPolygon3

sitkPolygon4 = _SimpleITK.sitkPolygon4

sitkPolygon5 = _SimpleITK.sitkPolygon5

sitkPolygon6 = _SimpleITK.sitkPolygon6

sitkPolygon7 = _SimpleITK.sitkPolygon7

sitkPolygon8 = _SimpleITK.sitkPolygon8

sitkPolygon9 = _SimpleITK.sitkPolygon9

sitkAnyEvent = _SimpleITK.sitkAnyEvent

sitkAbortEvent = _SimpleITK.sitkAbortEvent

sitkDeleteEvent = _SimpleITK.sitkDeleteEvent

sitkEndEvent = _SimpleITK.sitkEndEvent

sitkIterationEvent = _SimpleITK.sitkIterationEvent

sitkProgressEvent = _SimpleITK.sitkProgressEvent

sitkStartEvent = _SimpleITK.sitkStartEvent

sitkMultiResolutionIterationEvent = _SimpleITK.sitkMultiResolutionIterationEvent

sitkUserEvent = _SimpleITK.sitkUserEvent

sitkWallClock = _SimpleITK.sitkWallClock

sitkUnknownTransform = _SimpleITK.sitkUnknownTransform

sitkIdentity = _SimpleITK.sitkIdentity

sitkTranslation = _SimpleITK.sitkTranslation

sitkScale = _SimpleITK.sitkScale

sitkScaleLogarithmic = _SimpleITK.sitkScaleLogarithmic

sitkEuler = _SimpleITK.sitkEuler

sitkSimilarity = _SimpleITK.sitkSimilarity

sitkQuaternionRigid = _SimpleITK.sitkQuaternionRigid

sitkVersor = _SimpleITK.sitkVersor

sitkVersorRigid = _SimpleITK.sitkVersorRigid

sitkScaleSkewVersor = _SimpleITK.sitkScaleSkewVersor

sitkScaleVersor = _SimpleITK.sitkScaleVersor

sitkAffine = _SimpleITK.sitkAffine

sitkComposite = _SimpleITK.sitkComposite

sitkDisplacementField = _SimpleITK.sitkDisplacementField

sitkBSplineTransform = _SimpleITK.sitkBSplineTransform

class Transform(object):
    r"""Proxy of C++ itk::simple::Transform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_Transform

    def __init__(self, *args):
        r"""
        __init__(Transform self) -> Transform
        __init__(Transform self, itk::TransformBase * transform) -> Transform
        __init__(Transform self, unsigned int dimensions, itk::simple::TransformEnum type) -> Transform
        __init__(Transform self, Image displacement, itk::simple::TransformEnum type=sitkDisplacementField) -> Transform
        __init__(Transform self, Transform arg2) -> Transform
        """
        _SimpleITK.Transform_swiginit(self, _SimpleITK.new_Transform(*args))

    def GetITKBase(self, *args):
        r"""
        GetITKBase(Transform self) -> itk::TransformBase
        GetITKBase(Transform self) -> itk::TransformBase const *
        """
        return _SimpleITK.Transform_GetITKBase(self, *args)

    def GetDimension(self):
        r"""GetDimension(Transform self) -> unsigned int"""
        return _SimpleITK.Transform_GetDimension(self)

    def SetParameters(self, parameters):
        r"""SetParameters(Transform self, VectorDouble parameters)"""
        return _SimpleITK.Transform_SetParameters(self, parameters)

    def GetParameters(self):
        r"""GetParameters(Transform self) -> VectorDouble"""
        return _SimpleITK.Transform_GetParameters(self)

    def GetNumberOfParameters(self):
        r"""GetNumberOfParameters(Transform self) -> unsigned int"""
        return _SimpleITK.Transform_GetNumberOfParameters(self)

    def SetFixedParameters(self, parameters):
        r"""SetFixedParameters(Transform self, VectorDouble parameters)"""
        return _SimpleITK.Transform_SetFixedParameters(self, parameters)

    def GetFixedParameters(self):
        r"""GetFixedParameters(Transform self) -> VectorDouble"""
        return _SimpleITK.Transform_GetFixedParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(Transform self) -> unsigned int"""
        return _SimpleITK.Transform_GetNumberOfFixedParameters(self)

    def TransformPoint(self, point):
        r"""TransformPoint(Transform self, VectorDouble point) -> VectorDouble"""
        return _SimpleITK.Transform_TransformPoint(self, point)

    def TransformVector(self, vector, point):
        r"""TransformVector(Transform self, VectorDouble vector, VectorDouble point) -> VectorDouble"""
        return _SimpleITK.Transform_TransformVector(self, vector, point)

    def WriteTransform(self, filename):
        r"""WriteTransform(Transform self, std::string const & filename)"""
        return _SimpleITK.Transform_WriteTransform(self, filename)

    def IsLinear(self):
        r"""IsLinear(Transform self) -> bool"""
        return _SimpleITK.Transform_IsLinear(self)

    def SetIdentity(self):
        r"""SetIdentity(Transform self)"""
        return _SimpleITK.Transform_SetIdentity(self)

    def SetInverse(self):
        r"""SetInverse(Transform self) -> bool"""
        return _SimpleITK.Transform_SetInverse(self)

    def GetInverse(self):
        r"""GetInverse(Transform self) -> Transform"""
        return _SimpleITK.Transform_GetInverse(self)

    def __str__(self):
        r"""__str__(Transform self) -> std::string"""
        return _SimpleITK.Transform___str__(self)

    def GetName(self):
        r"""GetName(Transform self) -> std::string"""
        return _SimpleITK.Transform_GetName(self)

    def MakeUnique(self):
        r"""MakeUnique(Transform self)"""
        return _SimpleITK.Transform_MakeUnique(self)

    def GetTransformEnum(self):
        r"""GetTransformEnum(Transform self) -> itk::simple::TransformEnum"""
        return _SimpleITK.Transform_GetTransformEnum(self)


    def __copy__(self):
      """Create a SimpleITK shallow copy, where the internal transform is shared with a copy on write implementation."""
      return self.__class__(self)

    def __deepcopy__(self, memo):
      """Create a new copy of the data and internal ITK Transform object."""
      dc = self.__class__(self)
      dc.MakeUnique()
      return dc

    def __setstate__(self, args):
      if args[0] != 0:
        raise ValueError("Unable to handle SimpleITK.Transform pickle version {0}".args[0])

      if len(args) == 1:
        return

      state = namedtuple('state_tuple_0', "version fixed_parameters parameters")(*args)

      self.SetFixedParameters(state.fixed_parameters)
      self.SetParameters(state.parameters)


    def __reduce_ex__(self, protocol):
      version = 0

      downcasted = self.Downcast()

      if downcasted.__class__ is DisplacementFieldTransform:
        dis = downcasted.GetDisplacementField()
        if all( 0 == s for s in dis.GetSize() ):
    # The null state needs special handling
            args = (downcasted.GetDimension(),)
            S = (version, downcasted.GetFixedParameters(), downcasted.GetParameters())
        else:
            args = (dis, )
            S = (version, )
      elif downcasted.__class__ is BSplineTransform:
        args = (tuple(downcasted.GetCoefficientImages()), downcasted.GetOrder())
        S = (version, )
      elif downcasted.__class__ == CompositeTransform:
        if downcasted.GetNumberOfTransforms() > 0:
           args = ([ downcasted.GetNthTransform(n) for n in range(downcasted.GetNumberOfTransforms()) ], )
        else:
           args = (downcasted.GetDimension(),)
        S = (version, )

      else:
        args = ()
        if downcasted.__class__ in [AffineTransform, ScaleTransform, TranslationTransform]:
            args = (downcasted.GetDimension(),)
        elif downcasted.__class__ is Transform:
            args = (downcasted.GetDimension(), downcasted.GetTransformEnum())

        S = (version, downcasted.GetFixedParameters(), downcasted.GetParameters())

      return downcasted.__class__, args, S

    def Downcast(self):
        """Convert to the appropriate derived SimpleITK object. A lazy copy to
        the underlying ITK object is performed. """

        transform_downcast_map  = {
            sitkUnknownTransform: (None, None),
            sitkIdentity: (Transform, Transform),
            sitkTranslation: (TranslationTransform, TranslationTransform),
            sitkScale: (ScaleTransform, ScaleTransform),
            sitkScaleLogarithmic: (Transform, Transform),
            sitkEuler: (Euler2DTransform, Euler3DTransform),
            sitkSimilarity: (Similarity2DTransform, Similarity3DTransform),
            sitkQuaternionRigid: (None, Transform),
            sitkVersor: (None, VersorTransform),
            sitkVersorRigid: ( None, VersorRigid3DTransform),
            sitkScaleSkewVersor: ( None, ScaleSkewVersor3DTransform),
            sitkScaleVersor: ( None, ScaleVersor3DTransform),
            sitkAffine: (AffineTransform, AffineTransform),
            sitkComposite: (CompositeTransform, CompositeTransform),
            sitkDisplacementField: (DisplacementFieldTransform, DisplacementFieldTransform),
            sitkBSplineTransform: (BSplineTransform, BSplineTransform)
        }

        id = self.GetTransformEnum()
        if id is sitkUnknownTransform:
            raise TypeError("Unknown internal ITK transform type.")
        downcast_type = transform_downcast_map[id][self.GetDimension()-2]
        if downcast_type is None:
            raise TypeError("Unable to downcast transform type.")
        return downcast_type(self)


# Register Transform in _SimpleITK:
_SimpleITK.Transform_swigregister(Transform)


def ReadTransform(filename):
    r"""ReadTransform(std::string const & filename) -> Transform"""
    return _SimpleITK.ReadTransform(filename)

def WriteTransform(transform, filename):
    r"""WriteTransform(Transform transform, std::string const & filename)"""
    return _SimpleITK.WriteTransform(transform, filename)
class BSplineTransform(Transform):
    r"""Proxy of C++ itk::simple::BSplineTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_BSplineTransform

    def __init__(self, *args):
        r"""
        __init__(BSplineTransform self, unsigned int dimensions, unsigned int order=3) -> BSplineTransform
        __init__(BSplineTransform self, VectorOfImage coefficientImages, unsigned int order=3) -> BSplineTransform
        __init__(BSplineTransform self, BSplineTransform arg2) -> BSplineTransform
        __init__(BSplineTransform self, Transform arg2) -> BSplineTransform
        """
        _SimpleITK.BSplineTransform_swiginit(self, _SimpleITK.new_BSplineTransform(*args))

    def GetName(self):
        r"""GetName(BSplineTransform self) -> std::string"""
        return _SimpleITK.BSplineTransform_GetName(self)

    def SetTransformDomainDirection(self, arg2):
        r"""SetTransformDomainDirection(BSplineTransform self, VectorDouble arg2)"""
        return _SimpleITK.BSplineTransform_SetTransformDomainDirection(self, arg2)

    def GetTransformDomainDirection(self):
        r"""GetTransformDomainDirection(BSplineTransform self) -> VectorDouble"""
        return _SimpleITK.BSplineTransform_GetTransformDomainDirection(self)

    def SetTransformDomainMeshSize(self, arg2):
        r"""SetTransformDomainMeshSize(BSplineTransform self, VectorUInt32 arg2)"""
        return _SimpleITK.BSplineTransform_SetTransformDomainMeshSize(self, arg2)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(BSplineTransform self) -> VectorUInt32"""
        return _SimpleITK.BSplineTransform_GetTransformDomainMeshSize(self)

    def SetTransformDomainOrigin(self, arg2):
        r"""SetTransformDomainOrigin(BSplineTransform self, VectorDouble arg2)"""
        return _SimpleITK.BSplineTransform_SetTransformDomainOrigin(self, arg2)

    def GetTransformDomainOrigin(self):
        r"""GetTransformDomainOrigin(BSplineTransform self) -> VectorDouble"""
        return _SimpleITK.BSplineTransform_GetTransformDomainOrigin(self)

    def SetTransformDomainPhysicalDimensions(self, arg2):
        r"""SetTransformDomainPhysicalDimensions(BSplineTransform self, VectorDouble arg2)"""
        return _SimpleITK.BSplineTransform_SetTransformDomainPhysicalDimensions(self, arg2)

    def GetTransformDomainPhysicalDimensions(self):
        r"""GetTransformDomainPhysicalDimensions(BSplineTransform self) -> VectorDouble"""
        return _SimpleITK.BSplineTransform_GetTransformDomainPhysicalDimensions(self)

    def GetCoefficientImages(self):
        r"""GetCoefficientImages(BSplineTransform self) -> VectorOfImage"""
        return _SimpleITK.BSplineTransform_GetCoefficientImages(self)

    def GetOrder(self):
        r"""GetOrder(BSplineTransform self) -> unsigned int"""
        return _SimpleITK.BSplineTransform_GetOrder(self)

# Register BSplineTransform in _SimpleITK:
_SimpleITK.BSplineTransform_swigregister(BSplineTransform)

class DisplacementFieldTransform(Transform):
    r"""Proxy of C++ itk::simple::DisplacementFieldTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_DisplacementFieldTransform

    def __init__(self, *args):
        r"""
        __init__(DisplacementFieldTransform self, unsigned int dimensions) -> DisplacementFieldTransform
        __init__(DisplacementFieldTransform self, Image arg2) -> DisplacementFieldTransform
        __init__(DisplacementFieldTransform self, DisplacementFieldTransform arg2) -> DisplacementFieldTransform
        __init__(DisplacementFieldTransform self, Transform arg2) -> DisplacementFieldTransform
        """
        _SimpleITK.DisplacementFieldTransform_swiginit(self, _SimpleITK.new_DisplacementFieldTransform(*args))

    def GetName(self):
        r"""GetName(DisplacementFieldTransform self) -> std::string"""
        return _SimpleITK.DisplacementFieldTransform_GetName(self)

    def SetDisplacementField(self, arg2):
        r"""SetDisplacementField(DisplacementFieldTransform self, Image arg2)"""
        return _SimpleITK.DisplacementFieldTransform_SetDisplacementField(self, arg2)

    def GetDisplacementField(self):
        r"""GetDisplacementField(DisplacementFieldTransform self) -> Image"""
        return _SimpleITK.DisplacementFieldTransform_GetDisplacementField(self)

    def SetInverseDisplacementField(self, arg2):
        r"""SetInverseDisplacementField(DisplacementFieldTransform self, Image arg2)"""
        return _SimpleITK.DisplacementFieldTransform_SetInverseDisplacementField(self, arg2)

    def GetInverseDisplacementField(self):
        r"""GetInverseDisplacementField(DisplacementFieldTransform self) -> Image"""
        return _SimpleITK.DisplacementFieldTransform_GetInverseDisplacementField(self)

    def SetInterpolator(self, interp):
        r"""SetInterpolator(DisplacementFieldTransform self, itk::simple::InterpolatorEnum interp)"""
        return _SimpleITK.DisplacementFieldTransform_SetInterpolator(self, interp)

    def SetSmoothingOff(self):
        r"""SetSmoothingOff(DisplacementFieldTransform self)"""
        return _SimpleITK.DisplacementFieldTransform_SetSmoothingOff(self)

    def SetSmoothingGaussianOnUpdate(self, varianceForUpdateField=1.75, varianceForTotalField=0.5):
        r"""SetSmoothingGaussianOnUpdate(DisplacementFieldTransform self, double varianceForUpdateField=1.75, double varianceForTotalField=0.5)"""
        return _SimpleITK.DisplacementFieldTransform_SetSmoothingGaussianOnUpdate(self, varianceForUpdateField, varianceForTotalField)

    def SetSmoothingBSplineOnUpdate(self, *args, **kwargs):
        r"""SetSmoothingBSplineOnUpdate(DisplacementFieldTransform self, VectorUInt32 numberOfControlPointsForUpdateField=std::vector< unsigned int >(3,4), VectorUInt32 numberOfControlPointsForTotalField=std::vector< unsigned int >(3,4), bool enforceStationaryBoundary=True, unsigned int order=3)"""
        return _SimpleITK.DisplacementFieldTransform_SetSmoothingBSplineOnUpdate(self, *args, **kwargs)

# Register DisplacementFieldTransform in _SimpleITK:
_SimpleITK.DisplacementFieldTransform_swigregister(DisplacementFieldTransform)

class AffineTransform(Transform):
    r"""Proxy of C++ itk::simple::AffineTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_AffineTransform

    def __init__(self, *args):
        r"""
        __init__(AffineTransform self, unsigned int dimensions) -> AffineTransform
        __init__(AffineTransform self, AffineTransform arg2) -> AffineTransform
        __init__(AffineTransform self, Transform arg2) -> AffineTransform
        __init__(AffineTransform self, VectorDouble matrix, VectorDouble translation, VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> AffineTransform
        """
        _SimpleITK.AffineTransform_swiginit(self, _SimpleITK.new_AffineTransform(*args))

    def GetName(self):
        r"""GetName(AffineTransform self) -> std::string"""
        return _SimpleITK.AffineTransform_GetName(self)

    def GetTranslation(self):
        r"""GetTranslation(AffineTransform self) -> VectorDouble"""
        return _SimpleITK.AffineTransform_GetTranslation(self)

    def SetTranslation(self, translation):
        r"""SetTranslation(AffineTransform self, VectorDouble translation)"""
        return _SimpleITK.AffineTransform_SetTranslation(self, translation)

    def SetMatrix(self, matrix):
        r"""SetMatrix(AffineTransform self, VectorDouble matrix)"""
        return _SimpleITK.AffineTransform_SetMatrix(self, matrix)

    def GetMatrix(self):
        r"""GetMatrix(AffineTransform self) -> VectorDouble"""
        return _SimpleITK.AffineTransform_GetMatrix(self)

    def SetCenter(self, params):
        r"""SetCenter(AffineTransform self, VectorDouble params)"""
        return _SimpleITK.AffineTransform_SetCenter(self, params)

    def GetCenter(self):
        r"""GetCenter(AffineTransform self) -> VectorDouble"""
        return _SimpleITK.AffineTransform_GetCenter(self)

    def Scale(self, *args):
        r"""
        Scale(AffineTransform self, VectorDouble factor, bool pre=False)
        Scale(AffineTransform self, double factor, bool pre=False)
        """
        return _SimpleITK.AffineTransform_Scale(self, *args)

    def Shear(self, axis1, axis2, coef, pre=False):
        r"""Shear(AffineTransform self, int axis1, int axis2, double coef, bool pre=False)"""
        return _SimpleITK.AffineTransform_Shear(self, axis1, axis2, coef, pre)

    def Translate(self, offset, pre=False):
        r"""Translate(AffineTransform self, VectorDouble offset, bool pre=False)"""
        return _SimpleITK.AffineTransform_Translate(self, offset, pre)

    def Rotate(self, axis1, axis2, angle, pre=False):
        r"""Rotate(AffineTransform self, int axis1, int axis2, double angle, bool pre=False)"""
        return _SimpleITK.AffineTransform_Rotate(self, axis1, axis2, angle, pre)

# Register AffineTransform in _SimpleITK:
_SimpleITK.AffineTransform_swigregister(AffineTransform)

class Euler3DTransform(Transform):
    r"""Proxy of C++ itk::simple::Euler3DTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_Euler3DTransform

    def __init__(self, *args):
        r"""
        __init__(Euler3DTransform self) -> Euler3DTransform
        __init__(Euler3DTransform self, VectorDouble fixedCenter, double angleX=0.0, double angleY=0.0, double angleZ=0.0, VectorDouble translation=std::vector< double >(3,0.0)) -> Euler3DTransform
        __init__(Euler3DTransform self, Euler3DTransform arg2) -> Euler3DTransform
        __init__(Euler3DTransform self, Transform arg2) -> Euler3DTransform
        """
        _SimpleITK.Euler3DTransform_swiginit(self, _SimpleITK.new_Euler3DTransform(*args))

    def GetName(self):
        r"""GetName(Euler3DTransform self) -> std::string"""
        return _SimpleITK.Euler3DTransform_GetName(self)

    def SetCenter(self, params):
        r"""SetCenter(Euler3DTransform self, VectorDouble params)"""
        return _SimpleITK.Euler3DTransform_SetCenter(self, params)

    def GetCenter(self):
        r"""GetCenter(Euler3DTransform self) -> VectorDouble"""
        return _SimpleITK.Euler3DTransform_GetCenter(self)

    def GetAngleX(self):
        r"""GetAngleX(Euler3DTransform self) -> double"""
        return _SimpleITK.Euler3DTransform_GetAngleX(self)

    def GetAngleY(self):
        r"""GetAngleY(Euler3DTransform self) -> double"""
        return _SimpleITK.Euler3DTransform_GetAngleY(self)

    def GetAngleZ(self):
        r"""GetAngleZ(Euler3DTransform self) -> double"""
        return _SimpleITK.Euler3DTransform_GetAngleZ(self)

    def SetRotation(self, angleX, angleY, angleZ):
        r"""SetRotation(Euler3DTransform self, double angleX, double angleY, double angleZ)"""
        return _SimpleITK.Euler3DTransform_SetRotation(self, angleX, angleY, angleZ)

    def GetTranslation(self):
        r"""GetTranslation(Euler3DTransform self) -> VectorDouble"""
        return _SimpleITK.Euler3DTransform_GetTranslation(self)

    def SetTranslation(self, translation):
        r"""SetTranslation(Euler3DTransform self, VectorDouble translation)"""
        return _SimpleITK.Euler3DTransform_SetTranslation(self, translation)

    def SetComputeZYX(self, _arg):
        r"""SetComputeZYX(Euler3DTransform self, bool _arg)"""
        return _SimpleITK.Euler3DTransform_SetComputeZYX(self, _arg)

    def GetComputeZYX(self):
        r"""GetComputeZYX(Euler3DTransform self) -> bool"""
        return _SimpleITK.Euler3DTransform_GetComputeZYX(self)

    def ComputeZYXOn(self):
        r"""ComputeZYXOn(Euler3DTransform self)"""
        return _SimpleITK.Euler3DTransform_ComputeZYXOn(self)

    def ComputeZYXOff(self):
        r"""ComputeZYXOff(Euler3DTransform self)"""
        return _SimpleITK.Euler3DTransform_ComputeZYXOff(self)

    def GetMatrix(self):
        r"""GetMatrix(Euler3DTransform self) -> VectorDouble"""
        return _SimpleITK.Euler3DTransform_GetMatrix(self)

    def SetMatrix(self, matrix, tolerance=1e-10):
        r"""SetMatrix(Euler3DTransform self, VectorDouble matrix, double tolerance=1e-10)"""
        return _SimpleITK.Euler3DTransform_SetMatrix(self, matrix, tolerance)

# Register Euler3DTransform in _SimpleITK:
_SimpleITK.Euler3DTransform_swigregister(Euler3DTransform)

class Euler2DTransform(Transform):
    r"""Proxy of C++ itk::simple::Euler2DTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_Euler2DTransform

    def __init__(self, *args):
        r"""
        __init__(Euler2DTransform self) -> Euler2DTransform
        __init__(Euler2DTransform self, VectorDouble fixedCenter, double angle=0.0, VectorDouble translation=std::vector< double >(2,0.0)) -> Euler2DTransform
        __init__(Euler2DTransform self, Euler2DTransform arg2) -> Euler2DTransform
        __init__(Euler2DTransform self, Transform arg2) -> Euler2DTransform
        """
        _SimpleITK.Euler2DTransform_swiginit(self, _SimpleITK.new_Euler2DTransform(*args))

    def GetName(self):
        r"""GetName(Euler2DTransform self) -> std::string"""
        return _SimpleITK.Euler2DTransform_GetName(self)

    def SetCenter(self, params):
        r"""SetCenter(Euler2DTransform self, VectorDouble params)"""
        return _SimpleITK.Euler2DTransform_SetCenter(self, params)

    def GetCenter(self):
        r"""GetCenter(Euler2DTransform self) -> VectorDouble"""
        return _SimpleITK.Euler2DTransform_GetCenter(self)

    def SetAngle(self, angle):
        r"""SetAngle(Euler2DTransform self, double angle)"""
        return _SimpleITK.Euler2DTransform_SetAngle(self, angle)

    def GetAngle(self):
        r"""GetAngle(Euler2DTransform self) -> double"""
        return _SimpleITK.Euler2DTransform_GetAngle(self)

    def GetTranslation(self):
        r"""GetTranslation(Euler2DTransform self) -> VectorDouble"""
        return _SimpleITK.Euler2DTransform_GetTranslation(self)

    def SetTranslation(self, translation):
        r"""SetTranslation(Euler2DTransform self, VectorDouble translation)"""
        return _SimpleITK.Euler2DTransform_SetTranslation(self, translation)

    def GetMatrix(self):
        r"""GetMatrix(Euler2DTransform self) -> VectorDouble"""
        return _SimpleITK.Euler2DTransform_GetMatrix(self)

    def SetMatrix(self, matrix, tolerance=1e-10):
        r"""SetMatrix(Euler2DTransform self, VectorDouble matrix, double tolerance=1e-10)"""
        return _SimpleITK.Euler2DTransform_SetMatrix(self, matrix, tolerance)

# Register Euler2DTransform in _SimpleITK:
_SimpleITK.Euler2DTransform_swigregister(Euler2DTransform)

class ScaleTransform(Transform):
    r"""Proxy of C++ itk::simple::ScaleTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ScaleTransform

    def __init__(self, *args):
        r"""
        __init__(ScaleTransform self, unsigned int dimensions, VectorDouble scale=std::vector< double >(3,1.0)) -> ScaleTransform
        __init__(ScaleTransform self, ScaleTransform arg2) -> ScaleTransform
        __init__(ScaleTransform self, Transform arg2) -> ScaleTransform
        """
        _SimpleITK.ScaleTransform_swiginit(self, _SimpleITK.new_ScaleTransform(*args))

    def GetName(self):
        r"""GetName(ScaleTransform self) -> std::string"""
        return _SimpleITK.ScaleTransform_GetName(self)

    def SetScale(self, params):
        r"""SetScale(ScaleTransform self, VectorDouble params)"""
        return _SimpleITK.ScaleTransform_SetScale(self, params)

    def GetScale(self):
        r"""GetScale(ScaleTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleTransform_GetScale(self)

    def SetCenter(self, params):
        r"""SetCenter(ScaleTransform self, VectorDouble params)"""
        return _SimpleITK.ScaleTransform_SetCenter(self, params)

    def GetCenter(self):
        r"""GetCenter(ScaleTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleTransform_GetCenter(self)

    def GetMatrix(self):
        r"""GetMatrix(ScaleTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleTransform_GetMatrix(self)

# Register ScaleTransform in _SimpleITK:
_SimpleITK.ScaleTransform_swigregister(ScaleTransform)

class ScaleSkewVersor3DTransform(Transform):
    r"""Proxy of C++ itk::simple::ScaleSkewVersor3DTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ScaleSkewVersor3DTransform

    def __init__(self, *args):
        r"""
        __init__(ScaleSkewVersor3DTransform self) -> ScaleSkewVersor3DTransform
        __init__(ScaleSkewVersor3DTransform self, ScaleSkewVersor3DTransform arg2) -> ScaleSkewVersor3DTransform
        __init__(ScaleSkewVersor3DTransform self, Transform arg2) -> ScaleSkewVersor3DTransform
        __init__(ScaleSkewVersor3DTransform self, VectorDouble scale, VectorDouble skew, VectorDouble versor, VectorDouble translation=std::vector< double >(3, 0.0), VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> ScaleSkewVersor3DTransform
        __init__(ScaleSkewVersor3DTransform self, VectorDouble scale, VectorDouble skew, VectorDouble axis, double angle, VectorDouble translation=std::vector< double >(3, 0.0), VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> ScaleSkewVersor3DTransform
        """
        _SimpleITK.ScaleSkewVersor3DTransform_swiginit(self, _SimpleITK.new_ScaleSkewVersor3DTransform(*args))

    def GetName(self):
        r"""GetName(ScaleSkewVersor3DTransform self) -> std::string"""
        return _SimpleITK.ScaleSkewVersor3DTransform_GetName(self)

    def SetCenter(self, params):
        r"""SetCenter(ScaleSkewVersor3DTransform self, VectorDouble params)"""
        return _SimpleITK.ScaleSkewVersor3DTransform_SetCenter(self, params)

    def GetCenter(self):
        r"""GetCenter(ScaleSkewVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleSkewVersor3DTransform_GetCenter(self)

    def SetRotation(self, *args):
        r"""
        SetRotation(ScaleSkewVersor3DTransform self, VectorDouble versor)
        SetRotation(ScaleSkewVersor3DTransform self, VectorDouble axis, double angle)
        """
        return _SimpleITK.ScaleSkewVersor3DTransform_SetRotation(self, *args)

    def GetVersor(self):
        r"""GetVersor(ScaleSkewVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleSkewVersor3DTransform_GetVersor(self)

    def GetTranslation(self):
        r"""GetTranslation(ScaleSkewVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleSkewVersor3DTransform_GetTranslation(self)

    def SetTranslation(self, translation):
        r"""SetTranslation(ScaleSkewVersor3DTransform self, VectorDouble translation)"""
        return _SimpleITK.ScaleSkewVersor3DTransform_SetTranslation(self, translation)

    def GetScale(self):
        r"""GetScale(ScaleSkewVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleSkewVersor3DTransform_GetScale(self)

    def SetScale(self, scale):
        r"""SetScale(ScaleSkewVersor3DTransform self, VectorDouble scale)"""
        return _SimpleITK.ScaleSkewVersor3DTransform_SetScale(self, scale)

    def GetSkew(self):
        r"""GetSkew(ScaleSkewVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleSkewVersor3DTransform_GetSkew(self)

    def SetSkew(self, skew):
        r"""SetSkew(ScaleSkewVersor3DTransform self, VectorDouble skew)"""
        return _SimpleITK.ScaleSkewVersor3DTransform_SetSkew(self, skew)

    def Translate(self, offset):
        r"""Translate(ScaleSkewVersor3DTransform self, VectorDouble offset)"""
        return _SimpleITK.ScaleSkewVersor3DTransform_Translate(self, offset)

    def GetMatrix(self):
        r"""GetMatrix(ScaleSkewVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleSkewVersor3DTransform_GetMatrix(self)

# Register ScaleSkewVersor3DTransform in _SimpleITK:
_SimpleITK.ScaleSkewVersor3DTransform_swigregister(ScaleSkewVersor3DTransform)

class ScaleVersor3DTransform(Transform):
    r"""Proxy of C++ itk::simple::ScaleVersor3DTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ScaleVersor3DTransform

    def __init__(self, *args):
        r"""
        __init__(ScaleVersor3DTransform self) -> ScaleVersor3DTransform
        __init__(ScaleVersor3DTransform self, ScaleVersor3DTransform arg2) -> ScaleVersor3DTransform
        __init__(ScaleVersor3DTransform self, Transform arg2) -> ScaleVersor3DTransform
        __init__(ScaleVersor3DTransform self, VectorDouble scale, VectorDouble versor, VectorDouble translation=std::vector< double >(3, 0.0), VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> ScaleVersor3DTransform
        __init__(ScaleVersor3DTransform self, VectorDouble scale, VectorDouble axis, double angle, VectorDouble translation=std::vector< double >(3, 0.0), VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> ScaleVersor3DTransform
        """
        _SimpleITK.ScaleVersor3DTransform_swiginit(self, _SimpleITK.new_ScaleVersor3DTransform(*args))

    def GetName(self):
        r"""GetName(ScaleVersor3DTransform self) -> std::string"""
        return _SimpleITK.ScaleVersor3DTransform_GetName(self)

    def SetCenter(self, params):
        r"""SetCenter(ScaleVersor3DTransform self, VectorDouble params)"""
        return _SimpleITK.ScaleVersor3DTransform_SetCenter(self, params)

    def GetCenter(self):
        r"""GetCenter(ScaleVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleVersor3DTransform_GetCenter(self)

    def SetRotation(self, *args):
        r"""
        SetRotation(ScaleVersor3DTransform self, VectorDouble versor)
        SetRotation(ScaleVersor3DTransform self, VectorDouble axis, double angle)
        """
        return _SimpleITK.ScaleVersor3DTransform_SetRotation(self, *args)

    def GetVersor(self):
        r"""GetVersor(ScaleVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleVersor3DTransform_GetVersor(self)

    def GetTranslation(self):
        r"""GetTranslation(ScaleVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleVersor3DTransform_GetTranslation(self)

    def SetTranslation(self, translation):
        r"""SetTranslation(ScaleVersor3DTransform self, VectorDouble translation)"""
        return _SimpleITK.ScaleVersor3DTransform_SetTranslation(self, translation)

    def GetScale(self):
        r"""GetScale(ScaleVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleVersor3DTransform_GetScale(self)

    def SetScale(self, scale):
        r"""SetScale(ScaleVersor3DTransform self, VectorDouble scale)"""
        return _SimpleITK.ScaleVersor3DTransform_SetScale(self, scale)

    def Translate(self, offset):
        r"""Translate(ScaleVersor3DTransform self, VectorDouble offset)"""
        return _SimpleITK.ScaleVersor3DTransform_Translate(self, offset)

    def GetMatrix(self):
        r"""GetMatrix(ScaleVersor3DTransform self) -> VectorDouble"""
        return _SimpleITK.ScaleVersor3DTransform_GetMatrix(self)

# Register ScaleVersor3DTransform in _SimpleITK:
_SimpleITK.ScaleVersor3DTransform_swigregister(ScaleVersor3DTransform)

class Similarity2DTransform(Transform):
    r"""Proxy of C++ itk::simple::Similarity2DTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_Similarity2DTransform

    def __init__(self, *args):
        r"""
        __init__(Similarity2DTransform self) -> Similarity2DTransform
        __init__(Similarity2DTransform self, double scaleFactor, double angle=0.0, VectorDouble translation=std::vector< double >(2,0.0), VectorDouble fixedCenter=std::vector< double >(2,0.0)) -> Similarity2DTransform
        __init__(Similarity2DTransform self, Similarity2DTransform arg2) -> Similarity2DTransform
        __init__(Similarity2DTransform self, Transform arg2) -> Similarity2DTransform
        """
        _SimpleITK.Similarity2DTransform_swiginit(self, _SimpleITK.new_Similarity2DTransform(*args))

    def GetName(self):
        r"""GetName(Similarity2DTransform self) -> std::string"""
        return _SimpleITK.Similarity2DTransform_GetName(self)

    def SetCenter(self, params):
        r"""SetCenter(Similarity2DTransform self, VectorDouble params)"""
        return _SimpleITK.Similarity2DTransform_SetCenter(self, params)

    def GetCenter(self):
        r"""GetCenter(Similarity2DTransform self) -> VectorDouble"""
        return _SimpleITK.Similarity2DTransform_GetCenter(self)

    def SetAngle(self, angle):
        r"""SetAngle(Similarity2DTransform self, double angle)"""
        return _SimpleITK.Similarity2DTransform_SetAngle(self, angle)

    def GetAngle(self):
        r"""GetAngle(Similarity2DTransform self) -> double"""
        return _SimpleITK.Similarity2DTransform_GetAngle(self)

    def GetTranslation(self):
        r"""GetTranslation(Similarity2DTransform self) -> VectorDouble"""
        return _SimpleITK.Similarity2DTransform_GetTranslation(self)

    def SetTranslation(self, translation):
        r"""SetTranslation(Similarity2DTransform self, VectorDouble translation)"""
        return _SimpleITK.Similarity2DTransform_SetTranslation(self, translation)

    def SetScale(self, scale):
        r"""SetScale(Similarity2DTransform self, double scale)"""
        return _SimpleITK.Similarity2DTransform_SetScale(self, scale)

    def GetScale(self):
        r"""GetScale(Similarity2DTransform self) -> double"""
        return _SimpleITK.Similarity2DTransform_GetScale(self)

    def GetMatrix(self):
        r"""GetMatrix(Similarity2DTransform self) -> VectorDouble"""
        return _SimpleITK.Similarity2DTransform_GetMatrix(self)

    def SetMatrix(self, matrix, tolerance=1e-10):
        r"""SetMatrix(Similarity2DTransform self, VectorDouble matrix, double tolerance=1e-10)"""
        return _SimpleITK.Similarity2DTransform_SetMatrix(self, matrix, tolerance)

# Register Similarity2DTransform in _SimpleITK:
_SimpleITK.Similarity2DTransform_swigregister(Similarity2DTransform)

class Similarity3DTransform(Transform):
    r"""Proxy of C++ itk::simple::Similarity3DTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_Similarity3DTransform

    def __init__(self, *args):
        r"""
        __init__(Similarity3DTransform self) -> Similarity3DTransform
        __init__(Similarity3DTransform self, Similarity3DTransform arg2) -> Similarity3DTransform
        __init__(Similarity3DTransform self, Transform arg2) -> Similarity3DTransform
        __init__(Similarity3DTransform self, double scaleFactor, VectorDouble versor, VectorDouble translation=std::vector< double >(3, 0.0), VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> Similarity3DTransform
        __init__(Similarity3DTransform self, double scaleFactor, VectorDouble axis, double angle, VectorDouble translation=std::vector< double >(3, 0.0), VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> Similarity3DTransform
        """
        _SimpleITK.Similarity3DTransform_swiginit(self, _SimpleITK.new_Similarity3DTransform(*args))

    def GetName(self):
        r"""GetName(Similarity3DTransform self) -> std::string"""
        return _SimpleITK.Similarity3DTransform_GetName(self)

    def SetCenter(self, params):
        r"""SetCenter(Similarity3DTransform self, VectorDouble params)"""
        return _SimpleITK.Similarity3DTransform_SetCenter(self, params)

    def GetCenter(self):
        r"""GetCenter(Similarity3DTransform self) -> VectorDouble"""
        return _SimpleITK.Similarity3DTransform_GetCenter(self)

    def SetRotation(self, *args):
        r"""
        SetRotation(Similarity3DTransform self, VectorDouble versor)
        SetRotation(Similarity3DTransform self, VectorDouble axis, double angle)
        """
        return _SimpleITK.Similarity3DTransform_SetRotation(self, *args)

    def GetVersor(self):
        r"""GetVersor(Similarity3DTransform self) -> VectorDouble"""
        return _SimpleITK.Similarity3DTransform_GetVersor(self)

    def SetScale(self, scale):
        r"""SetScale(Similarity3DTransform self, double scale)"""
        return _SimpleITK.Similarity3DTransform_SetScale(self, scale)

    def GetScale(self):
        r"""GetScale(Similarity3DTransform self) -> double"""
        return _SimpleITK.Similarity3DTransform_GetScale(self)

    def GetTranslation(self):
        r"""GetTranslation(Similarity3DTransform self) -> VectorDouble"""
        return _SimpleITK.Similarity3DTransform_GetTranslation(self)

    def SetTranslation(self, translation):
        r"""SetTranslation(Similarity3DTransform self, VectorDouble translation)"""
        return _SimpleITK.Similarity3DTransform_SetTranslation(self, translation)

    def Translate(self, offset):
        r"""Translate(Similarity3DTransform self, VectorDouble offset)"""
        return _SimpleITK.Similarity3DTransform_Translate(self, offset)

    def GetMatrix(self):
        r"""GetMatrix(Similarity3DTransform self) -> VectorDouble"""
        return _SimpleITK.Similarity3DTransform_GetMatrix(self)

    def SetMatrix(self, matrix, tolerance=1e-10):
        r"""SetMatrix(Similarity3DTransform self, VectorDouble matrix, double tolerance=1e-10)"""
        return _SimpleITK.Similarity3DTransform_SetMatrix(self, matrix, tolerance)

# Register Similarity3DTransform in _SimpleITK:
_SimpleITK.Similarity3DTransform_swigregister(Similarity3DTransform)

class TranslationTransform(Transform):
    r"""Proxy of C++ itk::simple::TranslationTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_TranslationTransform

    def __init__(self, *args):
        r"""
        __init__(TranslationTransform self, unsigned int dimensions, VectorDouble offset=std::vector< double >(3,0.0)) -> TranslationTransform
        __init__(TranslationTransform self, TranslationTransform arg2) -> TranslationTransform
        __init__(TranslationTransform self, Transform arg2) -> TranslationTransform
        """
        _SimpleITK.TranslationTransform_swiginit(self, _SimpleITK.new_TranslationTransform(*args))

    def GetName(self):
        r"""GetName(TranslationTransform self) -> std::string"""
        return _SimpleITK.TranslationTransform_GetName(self)

    def SetOffset(self, params):
        r"""SetOffset(TranslationTransform self, VectorDouble params)"""
        return _SimpleITK.TranslationTransform_SetOffset(self, params)

    def GetOffset(self):
        r"""GetOffset(TranslationTransform self) -> VectorDouble"""
        return _SimpleITK.TranslationTransform_GetOffset(self)

# Register TranslationTransform in _SimpleITK:
_SimpleITK.TranslationTransform_swigregister(TranslationTransform)

class VersorTransform(Transform):
    r"""Proxy of C++ itk::simple::VersorTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_VersorTransform

    def __init__(self, *args):
        r"""
        __init__(VersorTransform self) -> VersorTransform
        __init__(VersorTransform self, VersorTransform arg2) -> VersorTransform
        __init__(VersorTransform self, Transform arg2) -> VersorTransform
        __init__(VersorTransform self, VectorDouble versor, VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> VersorTransform
        __init__(VersorTransform self, VectorDouble axis, double angle, VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> VersorTransform
        """
        _SimpleITK.VersorTransform_swiginit(self, _SimpleITK.new_VersorTransform(*args))

    def GetName(self):
        r"""GetName(VersorTransform self) -> std::string"""
        return _SimpleITK.VersorTransform_GetName(self)

    def SetCenter(self, params):
        r"""SetCenter(VersorTransform self, VectorDouble params)"""
        return _SimpleITK.VersorTransform_SetCenter(self, params)

    def GetCenter(self):
        r"""GetCenter(VersorTransform self) -> VectorDouble"""
        return _SimpleITK.VersorTransform_GetCenter(self)

    def SetRotation(self, *args):
        r"""
        SetRotation(VersorTransform self, VectorDouble versor)
        SetRotation(VersorTransform self, VectorDouble axis, double angle)
        """
        return _SimpleITK.VersorTransform_SetRotation(self, *args)

    def GetVersor(self):
        r"""GetVersor(VersorTransform self) -> VectorDouble"""
        return _SimpleITK.VersorTransform_GetVersor(self)

    def GetMatrix(self):
        r"""GetMatrix(VersorTransform self) -> VectorDouble"""
        return _SimpleITK.VersorTransform_GetMatrix(self)

    def SetMatrix(self, matrix, tolerance=1e-10):
        r"""SetMatrix(VersorTransform self, VectorDouble matrix, double tolerance=1e-10)"""
        return _SimpleITK.VersorTransform_SetMatrix(self, matrix, tolerance)

# Register VersorTransform in _SimpleITK:
_SimpleITK.VersorTransform_swigregister(VersorTransform)

class VersorRigid3DTransform(Transform):
    r"""Proxy of C++ itk::simple::VersorRigid3DTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_VersorRigid3DTransform

    def __init__(self, *args):
        r"""
        __init__(VersorRigid3DTransform self) -> VersorRigid3DTransform
        __init__(VersorRigid3DTransform self, VersorRigid3DTransform arg2) -> VersorRigid3DTransform
        __init__(VersorRigid3DTransform self, Transform arg2) -> VersorRigid3DTransform
        __init__(VersorRigid3DTransform self, VectorDouble versor, VectorDouble translation=std::vector< double >(3, 0.0), VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> VersorRigid3DTransform
        __init__(VersorRigid3DTransform self, VectorDouble axis, double angle, VectorDouble translation=std::vector< double >(3, 0.0), VectorDouble fixedCenter=std::vector< double >(3, 0.0)) -> VersorRigid3DTransform
        """
        _SimpleITK.VersorRigid3DTransform_swiginit(self, _SimpleITK.new_VersorRigid3DTransform(*args))

    def GetName(self):
        r"""GetName(VersorRigid3DTransform self) -> std::string"""
        return _SimpleITK.VersorRigid3DTransform_GetName(self)

    def SetCenter(self, params):
        r"""SetCenter(VersorRigid3DTransform self, VectorDouble params)"""
        return _SimpleITK.VersorRigid3DTransform_SetCenter(self, params)

    def GetCenter(self):
        r"""GetCenter(VersorRigid3DTransform self) -> VectorDouble"""
        return _SimpleITK.VersorRigid3DTransform_GetCenter(self)

    def SetRotation(self, *args):
        r"""
        SetRotation(VersorRigid3DTransform self, VectorDouble versor)
        SetRotation(VersorRigid3DTransform self, VectorDouble axis, double angle)
        """
        return _SimpleITK.VersorRigid3DTransform_SetRotation(self, *args)

    def GetVersor(self):
        r"""GetVersor(VersorRigid3DTransform self) -> VectorDouble"""
        return _SimpleITK.VersorRigid3DTransform_GetVersor(self)

    def GetTranslation(self):
        r"""GetTranslation(VersorRigid3DTransform self) -> VectorDouble"""
        return _SimpleITK.VersorRigid3DTransform_GetTranslation(self)

    def SetTranslation(self, translation):
        r"""SetTranslation(VersorRigid3DTransform self, VectorDouble translation)"""
        return _SimpleITK.VersorRigid3DTransform_SetTranslation(self, translation)

    def Translate(self, offset):
        r"""Translate(VersorRigid3DTransform self, VectorDouble offset)"""
        return _SimpleITK.VersorRigid3DTransform_Translate(self, offset)

    def GetMatrix(self):
        r"""GetMatrix(VersorRigid3DTransform self) -> VectorDouble"""
        return _SimpleITK.VersorRigid3DTransform_GetMatrix(self)

    def SetMatrix(self, matrix, tolerance=1e-10):
        r"""SetMatrix(VersorRigid3DTransform self, VectorDouble matrix, double tolerance=1e-10)"""
        return _SimpleITK.VersorRigid3DTransform_SetMatrix(self, matrix, tolerance)

# Register VersorRigid3DTransform in _SimpleITK:
_SimpleITK.VersorRigid3DTransform_swigregister(VersorRigid3DTransform)

class CompositeTransform(Transform):
    r"""Proxy of C++ itk::simple::CompositeTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CompositeTransform self, unsigned int dimensions) -> CompositeTransform
        __init__(CompositeTransform self, Transform arg2) -> CompositeTransform
        __init__(CompositeTransform self, CompositeTransform arg2) -> CompositeTransform
        __init__(CompositeTransform self, VectorOfTransform arg2) -> CompositeTransform
        """
        _SimpleITK.CompositeTransform_swiginit(self, _SimpleITK.new_CompositeTransform(*args))
    __swig_destroy__ = _SimpleITK.delete_CompositeTransform

    def GetName(self):
        r"""GetName(CompositeTransform self) -> std::string"""
        return _SimpleITK.CompositeTransform_GetName(self)

    def FlattenTransform(self):
        r"""FlattenTransform(CompositeTransform self)"""
        return _SimpleITK.CompositeTransform_FlattenTransform(self)

    def AddTransform(self, t):
        r"""AddTransform(CompositeTransform self, Transform t)"""
        return _SimpleITK.CompositeTransform_AddTransform(self, t)

    def GetNumberOfTransforms(self):
        r"""GetNumberOfTransforms(CompositeTransform self) -> unsigned int"""
        return _SimpleITK.CompositeTransform_GetNumberOfTransforms(self)

    def ClearTransforms(self):
        r"""ClearTransforms(CompositeTransform self)"""
        return _SimpleITK.CompositeTransform_ClearTransforms(self)

    def RemoveTransform(self):
        r"""RemoveTransform(CompositeTransform self)"""
        return _SimpleITK.CompositeTransform_RemoveTransform(self)

    def GetBackTransform(self):
        r"""GetBackTransform(CompositeTransform self) -> Transform"""
        return _SimpleITK.CompositeTransform_GetBackTransform(self)

    def GetNthTransform(self, n):
        r"""GetNthTransform(CompositeTransform self, unsigned int n) -> Transform"""
        return _SimpleITK.CompositeTransform_GetNthTransform(self, n)

# Register CompositeTransform in _SimpleITK:
_SimpleITK.CompositeTransform_swigregister(CompositeTransform)

class ProcessObject(object):
    r"""Proxy of C++ itk::simple::ProcessObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ProcessObject

    def __str__(self):
        r"""__str__(ProcessObject self) -> std::string"""
        return _SimpleITK.ProcessObject___str__(self)

    def GetName(self):
        r"""GetName(ProcessObject self) -> std::string"""
        return _SimpleITK.ProcessObject_GetName(self)

    def DebugOn(self):
        r"""DebugOn(ProcessObject self)"""
        return _SimpleITK.ProcessObject_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(ProcessObject self)"""
        return _SimpleITK.ProcessObject_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(ProcessObject self) -> bool"""
        return _SimpleITK.ProcessObject_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""SetDebug(ProcessObject self, bool debugFlag)"""
        return _SimpleITK.ProcessObject_SetDebug(self, debugFlag)

    @staticmethod
    def GlobalDefaultDebugOn():
        r"""GlobalDefaultDebugOn()"""
        return _SimpleITK.ProcessObject_GlobalDefaultDebugOn()

    @staticmethod
    def GlobalDefaultDebugOff():
        r"""GlobalDefaultDebugOff()"""
        return _SimpleITK.ProcessObject_GlobalDefaultDebugOff()

    @staticmethod
    def GetGlobalDefaultDebug():
        r"""GetGlobalDefaultDebug() -> bool"""
        return _SimpleITK.ProcessObject_GetGlobalDefaultDebug()

    @staticmethod
    def SetGlobalDefaultDebug(debugFlag):
        r"""SetGlobalDefaultDebug(bool debugFlag)"""
        return _SimpleITK.ProcessObject_SetGlobalDefaultDebug(debugFlag)

    @staticmethod
    def GlobalWarningDisplayOn():
        r"""GlobalWarningDisplayOn()"""
        return _SimpleITK.ProcessObject_GlobalWarningDisplayOn()

    @staticmethod
    def GlobalWarningDisplayOff():
        r"""GlobalWarningDisplayOff()"""
        return _SimpleITK.ProcessObject_GlobalWarningDisplayOff()

    @staticmethod
    def SetGlobalWarningDisplay(flag):
        r"""SetGlobalWarningDisplay(bool flag)"""
        return _SimpleITK.ProcessObject_SetGlobalWarningDisplay(flag)

    @staticmethod
    def GetGlobalWarningDisplay():
        r"""GetGlobalWarningDisplay() -> bool"""
        return _SimpleITK.ProcessObject_GetGlobalWarningDisplay()

    @staticmethod
    def GetGlobalDefaultCoordinateTolerance():
        r"""GetGlobalDefaultCoordinateTolerance() -> double"""
        return _SimpleITK.ProcessObject_GetGlobalDefaultCoordinateTolerance()

    @staticmethod
    def SetGlobalDefaultCoordinateTolerance(arg1):
        r"""SetGlobalDefaultCoordinateTolerance(double arg1)"""
        return _SimpleITK.ProcessObject_SetGlobalDefaultCoordinateTolerance(arg1)

    @staticmethod
    def GetGlobalDefaultDirectionTolerance():
        r"""GetGlobalDefaultDirectionTolerance() -> double"""
        return _SimpleITK.ProcessObject_GetGlobalDefaultDirectionTolerance()

    @staticmethod
    def SetGlobalDefaultDirectionTolerance(arg1):
        r"""SetGlobalDefaultDirectionTolerance(double arg1)"""
        return _SimpleITK.ProcessObject_SetGlobalDefaultDirectionTolerance(arg1)

    @staticmethod
    def SetGlobalDefaultThreader(threader):
        r"""SetGlobalDefaultThreader(std::string const & threader) -> bool"""
        return _SimpleITK.ProcessObject_SetGlobalDefaultThreader(threader)

    @staticmethod
    def GetGlobalDefaultThreader():
        r"""GetGlobalDefaultThreader() -> std::string"""
        return _SimpleITK.ProcessObject_GetGlobalDefaultThreader()

    @staticmethod
    def SetGlobalDefaultNumberOfThreads(n):
        r"""SetGlobalDefaultNumberOfThreads(unsigned int n)"""
        return _SimpleITK.ProcessObject_SetGlobalDefaultNumberOfThreads(n)

    @staticmethod
    def GetGlobalDefaultNumberOfThreads():
        r"""GetGlobalDefaultNumberOfThreads() -> unsigned int"""
        return _SimpleITK.ProcessObject_GetGlobalDefaultNumberOfThreads()

    def SetNumberOfThreads(self, n):
        r"""SetNumberOfThreads(ProcessObject self, unsigned int n)"""
        return _SimpleITK.ProcessObject_SetNumberOfThreads(self, n)

    def GetNumberOfThreads(self):
        r"""GetNumberOfThreads(ProcessObject self) -> unsigned int"""
        return _SimpleITK.ProcessObject_GetNumberOfThreads(self)

    def SetNumberOfWorkUnits(self, n):
        r"""SetNumberOfWorkUnits(ProcessObject self, unsigned int n)"""
        return _SimpleITK.ProcessObject_SetNumberOfWorkUnits(self, n)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(ProcessObject self) -> unsigned int"""
        return _SimpleITK.ProcessObject_GetNumberOfWorkUnits(self)

    def RemoveAllCommands(self):
        r"""RemoveAllCommands(ProcessObject self)"""
        return _SimpleITK.ProcessObject_RemoveAllCommands(self)

    def HasCommand(self, event):
        r"""HasCommand(ProcessObject self, itk::simple::EventEnum event) -> bool"""
        return _SimpleITK.ProcessObject_HasCommand(self, event)

    def GetProgress(self):
        r"""GetProgress(ProcessObject self) -> float"""
        return _SimpleITK.ProcessObject_GetProgress(self)

    def Abort(self):
        r"""Abort(ProcessObject self)"""
        return _SimpleITK.ProcessObject_Abort(self)

    def AddCommand(self, *args):
        r"""
        AddCommand(ProcessObject self, itk::simple::EventEnum event, Command cmd) -> int
        AddCommand(ProcessObject self, itk::simple::EventEnum e, PyObject * obj) -> int
        """
        return _SimpleITK.ProcessObject_AddCommand(self, *args)

# Register ProcessObject in _SimpleITK:
_SimpleITK.ProcessObject_swigregister(ProcessObject)

def ProcessObject_GlobalDefaultDebugOn():
    r"""ProcessObject_GlobalDefaultDebugOn()"""
    return _SimpleITK.ProcessObject_GlobalDefaultDebugOn()

def ProcessObject_GlobalDefaultDebugOff():
    r"""ProcessObject_GlobalDefaultDebugOff()"""
    return _SimpleITK.ProcessObject_GlobalDefaultDebugOff()

def ProcessObject_GetGlobalDefaultDebug():
    r"""ProcessObject_GetGlobalDefaultDebug() -> bool"""
    return _SimpleITK.ProcessObject_GetGlobalDefaultDebug()

def ProcessObject_SetGlobalDefaultDebug(debugFlag):
    r"""ProcessObject_SetGlobalDefaultDebug(bool debugFlag)"""
    return _SimpleITK.ProcessObject_SetGlobalDefaultDebug(debugFlag)

def ProcessObject_GlobalWarningDisplayOn():
    r"""ProcessObject_GlobalWarningDisplayOn()"""
    return _SimpleITK.ProcessObject_GlobalWarningDisplayOn()

def ProcessObject_GlobalWarningDisplayOff():
    r"""ProcessObject_GlobalWarningDisplayOff()"""
    return _SimpleITK.ProcessObject_GlobalWarningDisplayOff()

def ProcessObject_SetGlobalWarningDisplay(flag):
    r"""ProcessObject_SetGlobalWarningDisplay(bool flag)"""
    return _SimpleITK.ProcessObject_SetGlobalWarningDisplay(flag)

def ProcessObject_GetGlobalWarningDisplay():
    r"""ProcessObject_GetGlobalWarningDisplay() -> bool"""
    return _SimpleITK.ProcessObject_GetGlobalWarningDisplay()

def ProcessObject_GetGlobalDefaultCoordinateTolerance():
    r"""ProcessObject_GetGlobalDefaultCoordinateTolerance() -> double"""
    return _SimpleITK.ProcessObject_GetGlobalDefaultCoordinateTolerance()

def ProcessObject_SetGlobalDefaultCoordinateTolerance(arg1):
    r"""ProcessObject_SetGlobalDefaultCoordinateTolerance(double arg1)"""
    return _SimpleITK.ProcessObject_SetGlobalDefaultCoordinateTolerance(arg1)

def ProcessObject_GetGlobalDefaultDirectionTolerance():
    r"""ProcessObject_GetGlobalDefaultDirectionTolerance() -> double"""
    return _SimpleITK.ProcessObject_GetGlobalDefaultDirectionTolerance()

def ProcessObject_SetGlobalDefaultDirectionTolerance(arg1):
    r"""ProcessObject_SetGlobalDefaultDirectionTolerance(double arg1)"""
    return _SimpleITK.ProcessObject_SetGlobalDefaultDirectionTolerance(arg1)

def ProcessObject_SetGlobalDefaultThreader(threader):
    r"""ProcessObject_SetGlobalDefaultThreader(std::string const & threader) -> bool"""
    return _SimpleITK.ProcessObject_SetGlobalDefaultThreader(threader)

def ProcessObject_GetGlobalDefaultThreader():
    r"""ProcessObject_GetGlobalDefaultThreader() -> std::string"""
    return _SimpleITK.ProcessObject_GetGlobalDefaultThreader()

def ProcessObject_SetGlobalDefaultNumberOfThreads(n):
    r"""ProcessObject_SetGlobalDefaultNumberOfThreads(unsigned int n)"""
    return _SimpleITK.ProcessObject_SetGlobalDefaultNumberOfThreads(n)

def ProcessObject_GetGlobalDefaultNumberOfThreads():
    r"""ProcessObject_GetGlobalDefaultNumberOfThreads() -> unsigned int"""
    return _SimpleITK.ProcessObject_GetGlobalDefaultNumberOfThreads()

class ImageFilter(ProcessObject):
    r"""Proxy of C++ itk::simple::ImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ImageFilter

# Register ImageFilter in _SimpleITK:
_SimpleITK.ImageFilter_swigregister(ImageFilter)


def Show(*args, **kwargs):
    r"""Show(Image image, std::string const & title="", bool const debugOn=itk::simple::ProcessObject::GetGlobalDefaultDebug())"""
    return _SimpleITK.Show(*args, **kwargs)
class ImageFileWriter(ProcessObject):
    r"""Proxy of C++ itk::simple::ImageFileWriter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ImageFileWriter

    def __init__(self):
        r"""__init__(ImageFileWriter self) -> ImageFileWriter"""
        _SimpleITK.ImageFileWriter_swiginit(self, _SimpleITK.new_ImageFileWriter())

    def __str__(self):
        r"""__str__(ImageFileWriter self) -> std::string"""
        return _SimpleITK.ImageFileWriter___str__(self)

    def GetName(self):
        r"""GetName(ImageFileWriter self) -> std::string"""
        return _SimpleITK.ImageFileWriter_GetName(self)

    def GetRegisteredImageIOs(self):
        r"""GetRegisteredImageIOs(ImageFileWriter self) -> VectorString"""
        return _SimpleITK.ImageFileWriter_GetRegisteredImageIOs(self)

    def SetUseCompression(self, UseCompression):
        r"""SetUseCompression(ImageFileWriter self, bool UseCompression)"""
        return _SimpleITK.ImageFileWriter_SetUseCompression(self, UseCompression)

    def GetUseCompression(self):
        r"""GetUseCompression(ImageFileWriter self) -> bool"""
        return _SimpleITK.ImageFileWriter_GetUseCompression(self)

    def UseCompressionOn(self):
        r"""UseCompressionOn(ImageFileWriter self)"""
        return _SimpleITK.ImageFileWriter_UseCompressionOn(self)

    def UseCompressionOff(self):
        r"""UseCompressionOff(ImageFileWriter self)"""
        return _SimpleITK.ImageFileWriter_UseCompressionOff(self)

    def SetCompressionLevel(self, arg2):
        r"""SetCompressionLevel(ImageFileWriter self, int arg2)"""
        return _SimpleITK.ImageFileWriter_SetCompressionLevel(self, arg2)

    def GetCompressionLevel(self):
        r"""GetCompressionLevel(ImageFileWriter self) -> int"""
        return _SimpleITK.ImageFileWriter_GetCompressionLevel(self)

    def SetCompressor(self, arg2):
        r"""SetCompressor(ImageFileWriter self, std::string const & arg2)"""
        return _SimpleITK.ImageFileWriter_SetCompressor(self, arg2)

    def GetCompressor(self):
        r"""GetCompressor(ImageFileWriter self) -> std::string"""
        return _SimpleITK.ImageFileWriter_GetCompressor(self)

    def SetImageIO(self, imageio):
        r"""SetImageIO(ImageFileWriter self, std::string const & imageio)"""
        return _SimpleITK.ImageFileWriter_SetImageIO(self, imageio)

    def GetImageIO(self):
        r"""GetImageIO(ImageFileWriter self) -> std::string"""
        return _SimpleITK.ImageFileWriter_GetImageIO(self)

    def SetKeepOriginalImageUID(self, KeepOriginalImageUID):
        r"""SetKeepOriginalImageUID(ImageFileWriter self, bool KeepOriginalImageUID)"""
        return _SimpleITK.ImageFileWriter_SetKeepOriginalImageUID(self, KeepOriginalImageUID)

    def GetKeepOriginalImageUID(self):
        r"""GetKeepOriginalImageUID(ImageFileWriter self) -> bool"""
        return _SimpleITK.ImageFileWriter_GetKeepOriginalImageUID(self)

    def KeepOriginalImageUIDOn(self):
        r"""KeepOriginalImageUIDOn(ImageFileWriter self)"""
        return _SimpleITK.ImageFileWriter_KeepOriginalImageUIDOn(self)

    def KeepOriginalImageUIDOff(self):
        r"""KeepOriginalImageUIDOff(ImageFileWriter self)"""
        return _SimpleITK.ImageFileWriter_KeepOriginalImageUIDOff(self)

    def SetFileName(self, fileName):
        r"""SetFileName(ImageFileWriter self, std::string const & fileName)"""
        return _SimpleITK.ImageFileWriter_SetFileName(self, fileName)

    def GetFileName(self):
        r"""GetFileName(ImageFileWriter self) -> std::string"""
        return _SimpleITK.ImageFileWriter_GetFileName(self)

    def Execute(self, *args):
        r"""
        Execute(ImageFileWriter self, Image arg2)
        Execute(ImageFileWriter self, Image arg2, std::string const & inFileName, bool useCompression, int compressionLevel)
        """
        return _SimpleITK.ImageFileWriter_Execute(self, *args)

# Register ImageFileWriter in _SimpleITK:
_SimpleITK.ImageFileWriter_swigregister(ImageFileWriter)

class ImageSeriesWriter(ProcessObject):
    r"""Proxy of C++ itk::simple::ImageSeriesWriter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ImageSeriesWriter

    def __init__(self):
        r"""__init__(ImageSeriesWriter self) -> ImageSeriesWriter"""
        _SimpleITK.ImageSeriesWriter_swiginit(self, _SimpleITK.new_ImageSeriesWriter())

    def __str__(self):
        r"""__str__(ImageSeriesWriter self) -> std::string"""
        return _SimpleITK.ImageSeriesWriter___str__(self)

    def GetRegisteredImageIOs(self):
        r"""GetRegisteredImageIOs(ImageSeriesWriter self) -> VectorString"""
        return _SimpleITK.ImageSeriesWriter_GetRegisteredImageIOs(self)

    def SetImageIO(self, imageio):
        r"""SetImageIO(ImageSeriesWriter self, std::string const & imageio)"""
        return _SimpleITK.ImageSeriesWriter_SetImageIO(self, imageio)

    def GetImageIO(self):
        r"""GetImageIO(ImageSeriesWriter self) -> std::string"""
        return _SimpleITK.ImageSeriesWriter_GetImageIO(self)

    def GetName(self):
        r"""GetName(ImageSeriesWriter self) -> std::string"""
        return _SimpleITK.ImageSeriesWriter_GetName(self)

    def SetUseCompression(self, UseCompression):
        r"""SetUseCompression(ImageSeriesWriter self, bool UseCompression)"""
        return _SimpleITK.ImageSeriesWriter_SetUseCompression(self, UseCompression)

    def GetUseCompression(self):
        r"""GetUseCompression(ImageSeriesWriter self) -> bool"""
        return _SimpleITK.ImageSeriesWriter_GetUseCompression(self)

    def UseCompressionOn(self):
        r"""UseCompressionOn(ImageSeriesWriter self)"""
        return _SimpleITK.ImageSeriesWriter_UseCompressionOn(self)

    def UseCompressionOff(self):
        r"""UseCompressionOff(ImageSeriesWriter self)"""
        return _SimpleITK.ImageSeriesWriter_UseCompressionOff(self)

    def SetCompressionLevel(self, arg2):
        r"""SetCompressionLevel(ImageSeriesWriter self, int arg2)"""
        return _SimpleITK.ImageSeriesWriter_SetCompressionLevel(self, arg2)

    def GetCompressionLevel(self):
        r"""GetCompressionLevel(ImageSeriesWriter self) -> int"""
        return _SimpleITK.ImageSeriesWriter_GetCompressionLevel(self)

    def SetCompressor(self, arg2):
        r"""SetCompressor(ImageSeriesWriter self, std::string const & arg2)"""
        return _SimpleITK.ImageSeriesWriter_SetCompressor(self, arg2)

    def GetCompressor(self):
        r"""GetCompressor(ImageSeriesWriter self) -> std::string"""
        return _SimpleITK.ImageSeriesWriter_GetCompressor(self)

    def SetFileNames(self, fileNames):
        r"""SetFileNames(ImageSeriesWriter self, VectorString fileNames)"""
        return _SimpleITK.ImageSeriesWriter_SetFileNames(self, fileNames)

    def GetFileNames(self):
        r"""GetFileNames(ImageSeriesWriter self) -> VectorString"""
        return _SimpleITK.ImageSeriesWriter_GetFileNames(self)

    def Execute(self, *args):
        r"""
        Execute(ImageSeriesWriter self, Image arg2)
        Execute(ImageSeriesWriter self, Image image, VectorString inFileNames, bool useCompression, int compressionLevel)
        """
        return _SimpleITK.ImageSeriesWriter_Execute(self, *args)

# Register ImageSeriesWriter in _SimpleITK:
_SimpleITK.ImageSeriesWriter_swigregister(ImageSeriesWriter)

class ImageReaderBase(ProcessObject):
    r"""Proxy of C++ itk::simple::ImageReaderBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ImageReaderBase

    def SetOutputPixelType(self, pixelID):
        r"""SetOutputPixelType(ImageReaderBase self, itk::simple::PixelIDValueEnum pixelID)"""
        return _SimpleITK.ImageReaderBase_SetOutputPixelType(self, pixelID)

    def GetOutputPixelType(self):
        r"""GetOutputPixelType(ImageReaderBase self) -> itk::simple::PixelIDValueEnum"""
        return _SimpleITK.ImageReaderBase_GetOutputPixelType(self)

    def Execute(self):
        r"""Execute(ImageReaderBase self) -> Image"""
        return _SimpleITK.ImageReaderBase_Execute(self)

    def __str__(self):
        r"""__str__(ImageReaderBase self) -> std::string"""
        return _SimpleITK.ImageReaderBase___str__(self)

    def GetRegisteredImageIOs(self):
        r"""GetRegisteredImageIOs(ImageReaderBase self) -> VectorString"""
        return _SimpleITK.ImageReaderBase_GetRegisteredImageIOs(self)

    def SetLoadPrivateTags(self, loadPrivateTags):
        r"""SetLoadPrivateTags(ImageReaderBase self, bool loadPrivateTags)"""
        return _SimpleITK.ImageReaderBase_SetLoadPrivateTags(self, loadPrivateTags)

    def GetLoadPrivateTags(self):
        r"""GetLoadPrivateTags(ImageReaderBase self) -> bool"""
        return _SimpleITK.ImageReaderBase_GetLoadPrivateTags(self)

    def LoadPrivateTagsOn(self):
        r"""LoadPrivateTagsOn(ImageReaderBase self)"""
        return _SimpleITK.ImageReaderBase_LoadPrivateTagsOn(self)

    def LoadPrivateTagsOff(self):
        r"""LoadPrivateTagsOff(ImageReaderBase self)"""
        return _SimpleITK.ImageReaderBase_LoadPrivateTagsOff(self)

    def SetImageIO(self, imageio):
        r"""SetImageIO(ImageReaderBase self, std::string const & imageio)"""
        return _SimpleITK.ImageReaderBase_SetImageIO(self, imageio)

    def GetImageIO(self):
        r"""GetImageIO(ImageReaderBase self) -> std::string"""
        return _SimpleITK.ImageReaderBase_GetImageIO(self)

    @staticmethod
    def GetImageIOFromFileName(fileName):
        r"""GetImageIOFromFileName(std::string const & fileName) -> std::string"""
        return _SimpleITK.ImageReaderBase_GetImageIOFromFileName(fileName)

# Register ImageReaderBase in _SimpleITK:
_SimpleITK.ImageReaderBase_swigregister(ImageReaderBase)

def ImageReaderBase_GetImageIOFromFileName(fileName):
    r"""ImageReaderBase_GetImageIOFromFileName(std::string const & fileName) -> std::string"""
    return _SimpleITK.ImageReaderBase_GetImageIOFromFileName(fileName)

class ImageSeriesReader(ImageReaderBase):
    r"""Proxy of C++ itk::simple::ImageSeriesReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ImageSeriesReader

    def __init__(self):
        r"""__init__(ImageSeriesReader self) -> ImageSeriesReader"""
        _SimpleITK.ImageSeriesReader_swiginit(self, _SimpleITK.new_ImageSeriesReader())

    def __str__(self):
        r"""__str__(ImageSeriesReader self) -> std::string"""
        return _SimpleITK.ImageSeriesReader___str__(self)

    def GetName(self):
        r"""GetName(ImageSeriesReader self) -> std::string"""
        return _SimpleITK.ImageSeriesReader_GetName(self)

    def SetMetaDataDictionaryArrayUpdate(self, metaDataDictionaryArrayUpdate):
        r"""SetMetaDataDictionaryArrayUpdate(ImageSeriesReader self, bool metaDataDictionaryArrayUpdate)"""
        return _SimpleITK.ImageSeriesReader_SetMetaDataDictionaryArrayUpdate(self, metaDataDictionaryArrayUpdate)

    def GetMetaDataDictionaryArrayUpdate(self):
        r"""GetMetaDataDictionaryArrayUpdate(ImageSeriesReader self) -> bool"""
        return _SimpleITK.ImageSeriesReader_GetMetaDataDictionaryArrayUpdate(self)

    def MetaDataDictionaryArrayUpdateOn(self):
        r"""MetaDataDictionaryArrayUpdateOn(ImageSeriesReader self)"""
        return _SimpleITK.ImageSeriesReader_MetaDataDictionaryArrayUpdateOn(self)

    def MetaDataDictionaryArrayUpdateOff(self):
        r"""MetaDataDictionaryArrayUpdateOff(ImageSeriesReader self)"""
        return _SimpleITK.ImageSeriesReader_MetaDataDictionaryArrayUpdateOff(self)

    @staticmethod
    def GetGDCMSeriesFileNames(*args, **kwargs):
        r"""GetGDCMSeriesFileNames(std::string const & directory, std::string const & seriesID="", bool useSeriesDetails=False, bool recursive=False, bool loadSequences=False) -> VectorString"""
        return _SimpleITK.ImageSeriesReader_GetGDCMSeriesFileNames(*args, **kwargs)

    @staticmethod
    def GetGDCMSeriesIDs(directory):
        r"""GetGDCMSeriesIDs(std::string const & directory) -> VectorString"""
        return _SimpleITK.ImageSeriesReader_GetGDCMSeriesIDs(directory)

    def SetFileNames(self, fileNames):
        r"""SetFileNames(ImageSeriesReader self, VectorString fileNames)"""
        return _SimpleITK.ImageSeriesReader_SetFileNames(self, fileNames)

    def GetFileNames(self):
        r"""GetFileNames(ImageSeriesReader self) -> VectorString"""
        return _SimpleITK.ImageSeriesReader_GetFileNames(self)

    def Execute(self):
        r"""Execute(ImageSeriesReader self) -> Image"""
        return _SimpleITK.ImageSeriesReader_Execute(self)

    def GetMetaDataKeys(self, slice):
        r"""GetMetaDataKeys(ImageSeriesReader self, unsigned int slice) -> VectorString"""
        return _SimpleITK.ImageSeriesReader_GetMetaDataKeys(self, slice)

    def HasMetaDataKey(self, slice, key):
        r"""HasMetaDataKey(ImageSeriesReader self, unsigned int slice, std::string const & key) -> bool"""
        return _SimpleITK.ImageSeriesReader_HasMetaDataKey(self, slice, key)

    def GetMetaData(self, slice, key):
        r"""GetMetaData(ImageSeriesReader self, unsigned int slice, std::string const & key) -> std::string"""
        return _SimpleITK.ImageSeriesReader_GetMetaData(self, slice, key)

# Register ImageSeriesReader in _SimpleITK:
_SimpleITK.ImageSeriesReader_swigregister(ImageSeriesReader)

def ImageSeriesReader_GetGDCMSeriesFileNames(*args, **kwargs):
    r"""ImageSeriesReader_GetGDCMSeriesFileNames(std::string const & directory, std::string const & seriesID="", bool useSeriesDetails=False, bool recursive=False, bool loadSequences=False) -> VectorString"""
    return _SimpleITK.ImageSeriesReader_GetGDCMSeriesFileNames(*args, **kwargs)

def ImageSeriesReader_GetGDCMSeriesIDs(directory):
    r"""ImageSeriesReader_GetGDCMSeriesIDs(std::string const & directory) -> VectorString"""
    return _SimpleITK.ImageSeriesReader_GetGDCMSeriesIDs(directory)

class ImageFileReader(ImageReaderBase):
    r"""Proxy of C++ itk::simple::ImageFileReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ImageFileReader

    def __init__(self):
        r"""__init__(ImageFileReader self) -> ImageFileReader"""
        _SimpleITK.ImageFileReader_swiginit(self, _SimpleITK.new_ImageFileReader())

    def __str__(self):
        r"""__str__(ImageFileReader self) -> std::string"""
        return _SimpleITK.ImageFileReader___str__(self)

    def GetName(self):
        r"""GetName(ImageFileReader self) -> std::string"""
        return _SimpleITK.ImageFileReader_GetName(self)

    def SetFileName(self, fn):
        r"""SetFileName(ImageFileReader self, std::string const & fn)"""
        return _SimpleITK.ImageFileReader_SetFileName(self, fn)

    def GetFileName(self):
        r"""GetFileName(ImageFileReader self) -> std::string"""
        return _SimpleITK.ImageFileReader_GetFileName(self)

    def Execute(self):
        r"""Execute(ImageFileReader self) -> Image"""
        return _SimpleITK.ImageFileReader_Execute(self)

    def ReadImageInformation(self):
        r"""ReadImageInformation(ImageFileReader self)"""
        return _SimpleITK.ImageFileReader_ReadImageInformation(self)

    def GetPixelID(self):
        r"""GetPixelID(ImageFileReader self) -> itk::simple::PixelIDValueEnum"""
        return _SimpleITK.ImageFileReader_GetPixelID(self)

    def GetPixelIDValue(self):
        r"""GetPixelIDValue(ImageFileReader self) -> itk::simple::PixelIDValueType"""
        return _SimpleITK.ImageFileReader_GetPixelIDValue(self)

    def GetDimension(self):
        r"""GetDimension(ImageFileReader self) -> unsigned int"""
        return _SimpleITK.ImageFileReader_GetDimension(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(ImageFileReader self) -> unsigned int"""
        return _SimpleITK.ImageFileReader_GetNumberOfComponents(self)

    def GetOrigin(self):
        r"""GetOrigin(ImageFileReader self) -> VectorDouble"""
        return _SimpleITK.ImageFileReader_GetOrigin(self)

    def GetSpacing(self):
        r"""GetSpacing(ImageFileReader self) -> VectorDouble"""
        return _SimpleITK.ImageFileReader_GetSpacing(self)

    def GetDirection(self):
        r"""GetDirection(ImageFileReader self) -> VectorDouble"""
        return _SimpleITK.ImageFileReader_GetDirection(self)

    def GetSize(self):
        r"""GetSize(ImageFileReader self) -> VectorUInt64"""
        return _SimpleITK.ImageFileReader_GetSize(self)

    def GetMetaDataKeys(self):
        r"""GetMetaDataKeys(ImageFileReader self) -> VectorString"""
        return _SimpleITK.ImageFileReader_GetMetaDataKeys(self)

    def HasMetaDataKey(self, key):
        r"""HasMetaDataKey(ImageFileReader self, std::string const & key) -> bool"""
        return _SimpleITK.ImageFileReader_HasMetaDataKey(self, key)

    def GetMetaData(self, key):
        r"""GetMetaData(ImageFileReader self, std::string const & key) -> std::string"""
        return _SimpleITK.ImageFileReader_GetMetaData(self, key)

    def SetExtractSize(self, size):
        r"""SetExtractSize(ImageFileReader self, VectorUInt32 size)"""
        return _SimpleITK.ImageFileReader_SetExtractSize(self, size)

    def GetExtractSize(self):
        r"""GetExtractSize(ImageFileReader self) -> VectorUInt32"""
        return _SimpleITK.ImageFileReader_GetExtractSize(self)

    def SetExtractIndex(self, index):
        r"""SetExtractIndex(ImageFileReader self, VectorInt32 index)"""
        return _SimpleITK.ImageFileReader_SetExtractIndex(self, index)

    def GetExtractIndex(self):
        r"""GetExtractIndex(ImageFileReader self) -> VectorInt32"""
        return _SimpleITK.ImageFileReader_GetExtractIndex(self)

# Register ImageFileReader in _SimpleITK:
_SimpleITK.ImageFileReader_swigregister(ImageFileReader)

class ImageViewer(object):
    r"""Proxy of C++ itk::simple::ImageViewer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ImageViewer self) -> ImageViewer"""
        _SimpleITK.ImageViewer_swiginit(self, _SimpleITK.new_ImageViewer())

    def GetName(self):
        r"""GetName(ImageViewer self) -> std::string"""
        return _SimpleITK.ImageViewer_GetName(self)

    @staticmethod
    def SetGlobalDefaultSearchPath(path):
        r"""SetGlobalDefaultSearchPath(VectorString path)"""
        return _SimpleITK.ImageViewer_SetGlobalDefaultSearchPath(path)

    @staticmethod
    def GetGlobalDefaultSearchPath():
        r"""GetGlobalDefaultSearchPath() -> VectorString"""
        return _SimpleITK.ImageViewer_GetGlobalDefaultSearchPath()

    @staticmethod
    def SetGlobalDefaultExecutableNames(names):
        r"""SetGlobalDefaultExecutableNames(VectorString names)"""
        return _SimpleITK.ImageViewer_SetGlobalDefaultExecutableNames(names)

    @staticmethod
    def GetGlobalDefaultExecutableNames():
        r"""GetGlobalDefaultExecutableNames() -> VectorString"""
        return _SimpleITK.ImageViewer_GetGlobalDefaultExecutableNames()

    @staticmethod
    def SetGlobalDefaultFileExtension(ext):
        r"""SetGlobalDefaultFileExtension(std::string const & ext)"""
        return _SimpleITK.ImageViewer_SetGlobalDefaultFileExtension(ext)

    @staticmethod
    def GetGlobalDefaultFileExtension():
        r"""GetGlobalDefaultFileExtension() -> std::string const &"""
        return _SimpleITK.ImageViewer_GetGlobalDefaultFileExtension()

    @staticmethod
    def SetGlobalDefaultApplication(app):
        r"""SetGlobalDefaultApplication(std::string const & app)"""
        return _SimpleITK.ImageViewer_SetGlobalDefaultApplication(app)

    @staticmethod
    def GetGlobalDefaultApplication():
        r"""GetGlobalDefaultApplication() -> std::string const &"""
        return _SimpleITK.ImageViewer_GetGlobalDefaultApplication()

    def SetApplication(self, *args, **kwargs):
        r"""SetApplication(ImageViewer self, std::string const & app, std::string const & command="%a %f")"""
        return _SimpleITK.ImageViewer_SetApplication(self, *args, **kwargs)

    def GetApplication(self):
        r"""GetApplication(ImageViewer self) -> std::string const &"""
        return _SimpleITK.ImageViewer_GetApplication(self)

    def SetCommand(self, command):
        r"""SetCommand(ImageViewer self, std::string const & command)"""
        return _SimpleITK.ImageViewer_SetCommand(self, command)

    def GetCommand(self):
        r"""GetCommand(ImageViewer self) -> std::string const &"""
        return _SimpleITK.ImageViewer_GetCommand(self)

    def SetFileExtension(self, ext):
        r"""SetFileExtension(ImageViewer self, std::string const & ext)"""
        return _SimpleITK.ImageViewer_SetFileExtension(self, ext)

    def GetFileExtension(self):
        r"""GetFileExtension(ImageViewer self) -> std::string const &"""
        return _SimpleITK.ImageViewer_GetFileExtension(self)

    @staticmethod
    def SetGlobalDefaultDebug(dbg):
        r"""SetGlobalDefaultDebug(bool const dbg)"""
        return _SimpleITK.ImageViewer_SetGlobalDefaultDebug(dbg)

    @staticmethod
    def GetGlobalDefaultDebug():
        r"""GetGlobalDefaultDebug() -> bool"""
        return _SimpleITK.ImageViewer_GetGlobalDefaultDebug()

    @staticmethod
    def SetGlobalDefaultDebugOn():
        r"""SetGlobalDefaultDebugOn()"""
        return _SimpleITK.ImageViewer_SetGlobalDefaultDebugOn()

    @staticmethod
    def SetGlobalDefaultDebugOff():
        r"""SetGlobalDefaultDebugOff()"""
        return _SimpleITK.ImageViewer_SetGlobalDefaultDebugOff()

    @staticmethod
    def SetProcessDelay(delay):
        r"""SetProcessDelay(unsigned int const delay)"""
        return _SimpleITK.ImageViewer_SetProcessDelay(delay)

    @staticmethod
    def GetProcessDelay():
        r"""GetProcessDelay() -> unsigned int"""
        return _SimpleITK.ImageViewer_GetProcessDelay()

    def SetTitle(self, t):
        r"""SetTitle(ImageViewer self, std::string const & t)"""
        return _SimpleITK.ImageViewer_SetTitle(self, t)

    def GetTitle(self):
        r"""GetTitle(ImageViewer self) -> std::string const &"""
        return _SimpleITK.ImageViewer_GetTitle(self)

    def Execute(self, image):
        r"""Execute(ImageViewer self, Image image)"""
        return _SimpleITK.ImageViewer_Execute(self, image)

    def __str__(self):
        r"""__str__(ImageViewer self) -> std::string"""
        return _SimpleITK.ImageViewer___str__(self)
    __swig_destroy__ = _SimpleITK.delete_ImageViewer

# Register ImageViewer in _SimpleITK:
_SimpleITK.ImageViewer_swigregister(ImageViewer)

def ImageViewer_SetGlobalDefaultSearchPath(path):
    r"""ImageViewer_SetGlobalDefaultSearchPath(VectorString path)"""
    return _SimpleITK.ImageViewer_SetGlobalDefaultSearchPath(path)

def ImageViewer_GetGlobalDefaultSearchPath():
    r"""ImageViewer_GetGlobalDefaultSearchPath() -> VectorString"""
    return _SimpleITK.ImageViewer_GetGlobalDefaultSearchPath()

def ImageViewer_SetGlobalDefaultExecutableNames(names):
    r"""ImageViewer_SetGlobalDefaultExecutableNames(VectorString names)"""
    return _SimpleITK.ImageViewer_SetGlobalDefaultExecutableNames(names)

def ImageViewer_GetGlobalDefaultExecutableNames():
    r"""ImageViewer_GetGlobalDefaultExecutableNames() -> VectorString"""
    return _SimpleITK.ImageViewer_GetGlobalDefaultExecutableNames()

def ImageViewer_SetGlobalDefaultFileExtension(ext):
    r"""ImageViewer_SetGlobalDefaultFileExtension(std::string const & ext)"""
    return _SimpleITK.ImageViewer_SetGlobalDefaultFileExtension(ext)

def ImageViewer_GetGlobalDefaultFileExtension():
    r"""ImageViewer_GetGlobalDefaultFileExtension() -> std::string const &"""
    return _SimpleITK.ImageViewer_GetGlobalDefaultFileExtension()

def ImageViewer_SetGlobalDefaultApplication(app):
    r"""ImageViewer_SetGlobalDefaultApplication(std::string const & app)"""
    return _SimpleITK.ImageViewer_SetGlobalDefaultApplication(app)

def ImageViewer_GetGlobalDefaultApplication():
    r"""ImageViewer_GetGlobalDefaultApplication() -> std::string const &"""
    return _SimpleITK.ImageViewer_GetGlobalDefaultApplication()

def ImageViewer_SetGlobalDefaultDebug(dbg):
    r"""ImageViewer_SetGlobalDefaultDebug(bool const dbg)"""
    return _SimpleITK.ImageViewer_SetGlobalDefaultDebug(dbg)

def ImageViewer_GetGlobalDefaultDebug():
    r"""ImageViewer_GetGlobalDefaultDebug() -> bool"""
    return _SimpleITK.ImageViewer_GetGlobalDefaultDebug()

def ImageViewer_SetGlobalDefaultDebugOn():
    r"""ImageViewer_SetGlobalDefaultDebugOn()"""
    return _SimpleITK.ImageViewer_SetGlobalDefaultDebugOn()

def ImageViewer_SetGlobalDefaultDebugOff():
    r"""ImageViewer_SetGlobalDefaultDebugOff()"""
    return _SimpleITK.ImageViewer_SetGlobalDefaultDebugOff()

def ImageViewer_SetProcessDelay(delay):
    r"""ImageViewer_SetProcessDelay(unsigned int const delay)"""
    return _SimpleITK.ImageViewer_SetProcessDelay(delay)

def ImageViewer_GetProcessDelay():
    r"""ImageViewer_GetProcessDelay() -> unsigned int"""
    return _SimpleITK.ImageViewer_GetProcessDelay()

class HashImageFilter(ProcessObject):
    r"""Proxy of C++ itk::simple::HashImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_HashImageFilter

    def __init__(self):
        r"""__init__(HashImageFilter self) -> HashImageFilter"""
        _SimpleITK.HashImageFilter_swiginit(self, _SimpleITK.new_HashImageFilter())
    SHA1 = _SimpleITK.HashImageFilter_SHA1
    
    MD5 = _SimpleITK.HashImageFilter_MD5
    

    def SetHashFunction(self, hashFunction):
        r"""SetHashFunction(HashImageFilter self, itk::simple::HashImageFilter::HashFunction hashFunction)"""
        return _SimpleITK.HashImageFilter_SetHashFunction(self, hashFunction)

    def GetHashFunction(self):
        r"""GetHashFunction(HashImageFilter self) -> itk::simple::HashImageFilter::HashFunction"""
        return _SimpleITK.HashImageFilter_GetHashFunction(self)

    def GetName(self):
        r"""GetName(HashImageFilter self) -> std::string"""
        return _SimpleITK.HashImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(HashImageFilter self) -> std::string"""
        return _SimpleITK.HashImageFilter___str__(self)

    def Execute(self, arg2):
        r"""Execute(HashImageFilter self, Image arg2) -> std::string"""
        return _SimpleITK.HashImageFilter_Execute(self, arg2)

# Register HashImageFilter in _SimpleITK:
_SimpleITK.HashImageFilter_swigregister(HashImageFilter)

class CastImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::CastImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetOutputPixelType(self, pixelID):
        r"""SetOutputPixelType(CastImageFilter self, itk::simple::PixelIDValueEnum pixelID)"""
        return _SimpleITK.CastImageFilter_SetOutputPixelType(self, pixelID)

    def GetOutputPixelType(self):
        r"""GetOutputPixelType(CastImageFilter self) -> itk::simple::PixelIDValueEnum"""
        return _SimpleITK.CastImageFilter_GetOutputPixelType(self)
    __swig_destroy__ = _SimpleITK.delete_CastImageFilter

    def __init__(self):
        r"""__init__(CastImageFilter self) -> CastImageFilter"""
        _SimpleITK.CastImageFilter_swiginit(self, _SimpleITK.new_CastImageFilter())

    def GetName(self):
        r"""GetName(CastImageFilter self) -> std::string"""
        return _SimpleITK.CastImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(CastImageFilter self) -> std::string"""
        return _SimpleITK.CastImageFilter___str__(self)

    def Execute(self, arg2):
        r"""Execute(CastImageFilter self, Image arg2) -> Image"""
        return _SimpleITK.CastImageFilter_Execute(self, arg2)

# Register CastImageFilter in _SimpleITK:
_SimpleITK.CastImageFilter_swigregister(CastImageFilter)


def Cast(image, pixelID):
    r"""Cast(Image image, itk::simple::PixelIDValueEnum pixelID) -> Image"""
    return _SimpleITK.Cast(image, pixelID)


class DICOMOrientImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::DICOMOrientImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_DICOMOrientImageFilter

    def __init__(self):
        r"""__init__(DICOMOrientImageFilter self) -> DICOMOrientImageFilter"""
        _SimpleITK.DICOMOrientImageFilter_swiginit(self, _SimpleITK.new_DICOMOrientImageFilter())

    @staticmethod
    def GetOrientationFromDirectionCosines(direction):
        r"""GetOrientationFromDirectionCosines(VectorDouble direction) -> std::string"""
        return _SimpleITK.DICOMOrientImageFilter_GetOrientationFromDirectionCosines(direction)

    @staticmethod
    def GetDirectionCosinesFromOrientation(str):
        r"""GetDirectionCosinesFromOrientation(std::string const & str) -> VectorDouble"""
        return _SimpleITK.DICOMOrientImageFilter_GetDirectionCosinesFromOrientation(str)

    def SetDesiredCoordinateOrientation(self, DesiredCoordinateOrientation):
        r"""SetDesiredCoordinateOrientation(DICOMOrientImageFilter self, std::string DesiredCoordinateOrientation)"""
        return _SimpleITK.DICOMOrientImageFilter_SetDesiredCoordinateOrientation(self, DesiredCoordinateOrientation)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(DICOMOrientImageFilter self) -> std::string"""
        return _SimpleITK.DICOMOrientImageFilter_GetDesiredCoordinateOrientation(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(DICOMOrientImageFilter self) -> VectorBool"""
        return _SimpleITK.DICOMOrientImageFilter_GetFlipAxes(self)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(DICOMOrientImageFilter self) -> VectorUInt32"""
        return _SimpleITK.DICOMOrientImageFilter_GetPermuteOrder(self)

    def GetName(self):
        r"""GetName(DICOMOrientImageFilter self) -> std::string"""
        return _SimpleITK.DICOMOrientImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(DICOMOrientImageFilter self) -> std::string"""
        return _SimpleITK.DICOMOrientImageFilter___str__(self)

    def Execute(self, image1):
        r"""Execute(DICOMOrientImageFilter self, Image image1) -> Image"""
        return _SimpleITK.DICOMOrientImageFilter_Execute(self, image1)

# Register DICOMOrientImageFilter in _SimpleITK:
_SimpleITK.DICOMOrientImageFilter_swigregister(DICOMOrientImageFilter)

def DICOMOrientImageFilter_GetOrientationFromDirectionCosines(direction):
    r"""DICOMOrientImageFilter_GetOrientationFromDirectionCosines(VectorDouble direction) -> std::string"""
    return _SimpleITK.DICOMOrientImageFilter_GetOrientationFromDirectionCosines(direction)

def DICOMOrientImageFilter_GetDirectionCosinesFromOrientation(str):
    r"""DICOMOrientImageFilter_GetDirectionCosinesFromOrientation(std::string const & str) -> VectorDouble"""
    return _SimpleITK.DICOMOrientImageFilter_GetDirectionCosinesFromOrientation(str)


def DICOMOrient(*args, **kwargs):
    r"""DICOMOrient(Image image1, std::string desiredCoordinateOrientation=std::string("LPS")) -> Image"""
    return _SimpleITK.DICOMOrient(*args, **kwargs)

class RescaleIntensityImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::RescaleIntensityImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_RescaleIntensityImageFilter

    def __init__(self):
        r"""__init__(RescaleIntensityImageFilter self) -> RescaleIntensityImageFilter"""
        _SimpleITK.RescaleIntensityImageFilter_swiginit(self, _SimpleITK.new_RescaleIntensityImageFilter())

    def SetOutputMinimum(self, OutputMinimum):
        r"""SetOutputMinimum(RescaleIntensityImageFilter self, double OutputMinimum)"""
        return _SimpleITK.RescaleIntensityImageFilter_SetOutputMinimum(self, OutputMinimum)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(RescaleIntensityImageFilter self) -> double"""
        return _SimpleITK.RescaleIntensityImageFilter_GetOutputMinimum(self)

    def SetOutputMaximum(self, OutputMaximum):
        r"""SetOutputMaximum(RescaleIntensityImageFilter self, double OutputMaximum)"""
        return _SimpleITK.RescaleIntensityImageFilter_SetOutputMaximum(self, OutputMaximum)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(RescaleIntensityImageFilter self) -> double"""
        return _SimpleITK.RescaleIntensityImageFilter_GetOutputMaximum(self)

    def GetName(self):
        r"""GetName(RescaleIntensityImageFilter self) -> std::string"""
        return _SimpleITK.RescaleIntensityImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(RescaleIntensityImageFilter self) -> std::string"""
        return _SimpleITK.RescaleIntensityImageFilter___str__(self)

    def Execute(self, image1):
        r"""Execute(RescaleIntensityImageFilter self, Image image1) -> Image"""
        return _SimpleITK.RescaleIntensityImageFilter_Execute(self, image1)

# Register RescaleIntensityImageFilter in _SimpleITK:
_SimpleITK.RescaleIntensityImageFilter_swigregister(RescaleIntensityImageFilter)


def RescaleIntensity(image1, outputMinimum=0, outputMaximum=255):
    r"""RescaleIntensity(Image image1, double outputMinimum=0, double outputMaximum=255) -> Image"""
    return _SimpleITK.RescaleIntensity(image1, outputMinimum, outputMaximum)

class CenteredTransformInitializerFilter(ProcessObject):
    r"""Proxy of C++ itk::simple::CenteredTransformInitializerFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_CenteredTransformInitializerFilter

    def __init__(self):
        r"""__init__(CenteredTransformInitializerFilter self) -> CenteredTransformInitializerFilter"""
        _SimpleITK.CenteredTransformInitializerFilter_swiginit(self, _SimpleITK.new_CenteredTransformInitializerFilter())
    GEOMETRY = _SimpleITK.CenteredTransformInitializerFilter_GEOMETRY
    
    MOMENTS = _SimpleITK.CenteredTransformInitializerFilter_MOMENTS
    

    def SetOperationMode(self, OperationMode):
        r"""SetOperationMode(CenteredTransformInitializerFilter self, itk::simple::CenteredTransformInitializerFilter::OperationModeType OperationMode)"""
        return _SimpleITK.CenteredTransformInitializerFilter_SetOperationMode(self, OperationMode)

    def GetOperationMode(self):
        r"""GetOperationMode(CenteredTransformInitializerFilter self) -> itk::simple::CenteredTransformInitializerFilter::OperationModeType"""
        return _SimpleITK.CenteredTransformInitializerFilter_GetOperationMode(self)

    def GetName(self):
        r"""GetName(CenteredTransformInitializerFilter self) -> std::string"""
        return _SimpleITK.CenteredTransformInitializerFilter_GetName(self)

    def __str__(self):
        r"""__str__(CenteredTransformInitializerFilter self) -> std::string"""
        return _SimpleITK.CenteredTransformInitializerFilter___str__(self)

    def Execute(self, fixedImage, movingImage, transform):
        r"""Execute(CenteredTransformInitializerFilter self, Image fixedImage, Image movingImage, Transform transform) -> Transform"""
        return _SimpleITK.CenteredTransformInitializerFilter_Execute(self, fixedImage, movingImage, transform)

    def MomentsOn(self):
        r"""MomentsOn(CenteredTransformInitializerFilter self)"""
        return _SimpleITK.CenteredTransformInitializerFilter_MomentsOn(self)

    def GeometryOn(self):
        r"""GeometryOn(CenteredTransformInitializerFilter self)"""
        return _SimpleITK.CenteredTransformInitializerFilter_GeometryOn(self)

# Register CenteredTransformInitializerFilter in _SimpleITK:
_SimpleITK.CenteredTransformInitializerFilter_swigregister(CenteredTransformInitializerFilter)


def CenteredTransformInitializer(*args, **kwargs):
    r"""CenteredTransformInitializer(Image fixedImage, Image movingImage, Transform transform, itk::simple::CenteredTransformInitializerFilter::OperationModeType operationMode=MOMENTS) -> Transform"""
    return _SimpleITK.CenteredTransformInitializer(*args, **kwargs)


class ImageRegistrationMethod(ProcessObject):
    r"""Proxy of C++ itk::simple::ImageRegistrationMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ImageRegistrationMethod

    def __init__(self):
        r"""__init__(ImageRegistrationMethod self) -> ImageRegistrationMethod"""
        _SimpleITK.ImageRegistrationMethod_swiginit(self, _SimpleITK.new_ImageRegistrationMethod())

    def GetName(self):
        r"""GetName(ImageRegistrationMethod self) -> std::string"""
        return _SimpleITK.ImageRegistrationMethod_GetName(self)

    def __str__(self):
        r"""__str__(ImageRegistrationMethod self) -> std::string"""
        return _SimpleITK.ImageRegistrationMethod___str__(self)

    def GetInterpolator(self):
        r"""GetInterpolator(ImageRegistrationMethod self) -> itk::simple::InterpolatorEnum"""
        return _SimpleITK.ImageRegistrationMethod_GetInterpolator(self)

    def SetInterpolator(self, Interpolator):
        r"""SetInterpolator(ImageRegistrationMethod self, itk::simple::InterpolatorEnum Interpolator)"""
        return _SimpleITK.ImageRegistrationMethod_SetInterpolator(self, Interpolator)

    def SetInitialTransform(self, transform, inPlace=True):
        r"""SetInitialTransform(ImageRegistrationMethod self, Transform transform, bool inPlace=True)"""
        return _SimpleITK.ImageRegistrationMethod_SetInitialTransform(self, transform, inPlace)

    def GetInitialTransform(self):
        r"""GetInitialTransform(ImageRegistrationMethod self) -> Transform"""
        return _SimpleITK.ImageRegistrationMethod_GetInitialTransform(self)

    def GetInitialTransformInPlace(self):
        r"""GetInitialTransformInPlace(ImageRegistrationMethod self) -> bool"""
        return _SimpleITK.ImageRegistrationMethod_GetInitialTransformInPlace(self)

    def SetInitialTransformAsBSpline(self, *args, **kwargs):
        r"""SetInitialTransformAsBSpline(ImageRegistrationMethod self, BSplineTransform transform, bool inPlace=True, VectorUInt32 scaleFactors=std::vector< unsigned int >())"""
        return _SimpleITK.ImageRegistrationMethod_SetInitialTransformAsBSpline(self, *args, **kwargs)

    def SetMovingInitialTransform(self, transform):
        r"""SetMovingInitialTransform(ImageRegistrationMethod self, Transform transform)"""
        return _SimpleITK.ImageRegistrationMethod_SetMovingInitialTransform(self, transform)

    def GetMovingInitialTransform(self):
        r"""GetMovingInitialTransform(ImageRegistrationMethod self) -> Transform"""
        return _SimpleITK.ImageRegistrationMethod_GetMovingInitialTransform(self)

    def SetFixedInitialTransform(self, transform):
        r"""SetFixedInitialTransform(ImageRegistrationMethod self, Transform transform)"""
        return _SimpleITK.ImageRegistrationMethod_SetFixedInitialTransform(self, transform)

    def GetFixedInitialTransform(self):
        r"""GetFixedInitialTransform(ImageRegistrationMethod self) -> Transform"""
        return _SimpleITK.ImageRegistrationMethod_GetFixedInitialTransform(self)

    def SetVirtualDomain(self, virtualSize, virtualOrigin, virtualSpacing, virtualDirection):
        r"""SetVirtualDomain(ImageRegistrationMethod self, VectorUInt32 virtualSize, VectorDouble virtualOrigin, VectorDouble virtualSpacing, VectorDouble virtualDirection)"""
        return _SimpleITK.ImageRegistrationMethod_SetVirtualDomain(self, virtualSize, virtualOrigin, virtualSpacing, virtualDirection)

    def SetVirtualDomainFromImage(self, virtualImage):
        r"""SetVirtualDomainFromImage(ImageRegistrationMethod self, Image virtualImage)"""
        return _SimpleITK.ImageRegistrationMethod_SetVirtualDomainFromImage(self, virtualImage)

    def SetMetricAsANTSNeighborhoodCorrelation(self, radius):
        r"""SetMetricAsANTSNeighborhoodCorrelation(ImageRegistrationMethod self, unsigned int radius)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricAsANTSNeighborhoodCorrelation(self, radius)

    def SetMetricAsCorrelation(self):
        r"""SetMetricAsCorrelation(ImageRegistrationMethod self)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricAsCorrelation(self)

    def SetMetricAsDemons(self, intensityDifferenceThreshold=0.001):
        r"""SetMetricAsDemons(ImageRegistrationMethod self, double intensityDifferenceThreshold=0.001)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricAsDemons(self, intensityDifferenceThreshold)

    def SetMetricAsJointHistogramMutualInformation(self, numberOfHistogramBins=20, varianceForJointPDFSmoothing=1.5):
        r"""SetMetricAsJointHistogramMutualInformation(ImageRegistrationMethod self, unsigned int numberOfHistogramBins=20, double varianceForJointPDFSmoothing=1.5)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricAsJointHistogramMutualInformation(self, numberOfHistogramBins, varianceForJointPDFSmoothing)

    def SetMetricAsMeanSquares(self):
        r"""SetMetricAsMeanSquares(ImageRegistrationMethod self)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricAsMeanSquares(self)

    def SetMetricAsMattesMutualInformation(self, numberOfHistogramBins=50):
        r"""SetMetricAsMattesMutualInformation(ImageRegistrationMethod self, unsigned int numberOfHistogramBins=50)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricAsMattesMutualInformation(self, numberOfHistogramBins)
    Never = _SimpleITK.ImageRegistrationMethod_Never
    
    Once = _SimpleITK.ImageRegistrationMethod_Once
    
    EachIteration = _SimpleITK.ImageRegistrationMethod_EachIteration
    

    def SetOptimizerAsConjugateGradientLineSearch(self, *args, **kwargs):
        r"""SetOptimizerAsConjugateGradientLineSearch(ImageRegistrationMethod self, double learningRate, unsigned int numberOfIterations, double convergenceMinimumValue=1e-6, unsigned int convergenceWindowSize=10, double lineSearchLowerLimit=0, double lineSearchUpperLimit=5.0, double lineSearchEpsilon=0.01, unsigned int lineSearchMaximumIterations=20, itk::simple::ImageRegistrationMethod::EstimateLearningRateType estimateLearningRate=Once, double maximumStepSizeInPhysicalUnits=0.0)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerAsConjugateGradientLineSearch(self, *args, **kwargs)

    def SetOptimizerAsRegularStepGradientDescent(self, *args, **kwargs):
        r"""SetOptimizerAsRegularStepGradientDescent(ImageRegistrationMethod self, double learningRate, double minStep, unsigned int numberOfIterations, double relaxationFactor=0.5, double gradientMagnitudeTolerance=1e-4, itk::simple::ImageRegistrationMethod::EstimateLearningRateType estimateLearningRate=Never, double maximumStepSizeInPhysicalUnits=0.0)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerAsRegularStepGradientDescent(self, *args, **kwargs)

    def SetOptimizerAsGradientDescent(self, *args, **kwargs):
        r"""SetOptimizerAsGradientDescent(ImageRegistrationMethod self, double learningRate, unsigned int numberOfIterations, double convergenceMinimumValue=1e-6, unsigned int convergenceWindowSize=10, itk::simple::ImageRegistrationMethod::EstimateLearningRateType estimateLearningRate=Once, double maximumStepSizeInPhysicalUnits=0.0)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerAsGradientDescent(self, *args, **kwargs)

    def SetOptimizerAsGradientDescentLineSearch(self, *args, **kwargs):
        r"""SetOptimizerAsGradientDescentLineSearch(ImageRegistrationMethod self, double learningRate, unsigned int numberOfIterations, double convergenceMinimumValue=1e-6, unsigned int convergenceWindowSize=10, double lineSearchLowerLimit=0, double lineSearchUpperLimit=5.0, double lineSearchEpsilon=0.01, unsigned int lineSearchMaximumIterations=20, itk::simple::ImageRegistrationMethod::EstimateLearningRateType estimateLearningRate=Once, double maximumStepSizeInPhysicalUnits=0.0)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerAsGradientDescentLineSearch(self, *args, **kwargs)

    def SetOptimizerAsLBFGSB(self, *args, **kwargs):
        r"""SetOptimizerAsLBFGSB(ImageRegistrationMethod self, double gradientConvergenceTolerance=1e-5, unsigned int numberOfIterations=500, unsigned int maximumNumberOfCorrections=5, unsigned int maximumNumberOfFunctionEvaluations=2000, double costFunctionConvergenceFactor=1e+7, double lowerBound=std::numeric_limits< double >::min(), double upperBound=std::numeric_limits< double >::max(), bool trace=False)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerAsLBFGSB(self, *args, **kwargs)

    def SetOptimizerAsLBFGS2(self, solutionAccuracy=1e-5, numberOfIterations=0, hessianApproximateAccuracy=6, deltaConvergenceDistance=0, deltaConvergenceTolerance=1e-5, lineSearchMaximumEvaluations=40, lineSearchMinimumStep=1e-20, lineSearchMaximumStep=1e20, lineSearchAccuracy=1e-4):
        r"""SetOptimizerAsLBFGS2(ImageRegistrationMethod self, double solutionAccuracy=1e-5, unsigned int numberOfIterations=0, unsigned int hessianApproximateAccuracy=6, unsigned int deltaConvergenceDistance=0, double deltaConvergenceTolerance=1e-5, unsigned int lineSearchMaximumEvaluations=40, double lineSearchMinimumStep=1e-20, double lineSearchMaximumStep=1e20, double lineSearchAccuracy=1e-4)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerAsLBFGS2(self, solutionAccuracy, numberOfIterations, hessianApproximateAccuracy, deltaConvergenceDistance, deltaConvergenceTolerance, lineSearchMaximumEvaluations, lineSearchMinimumStep, lineSearchMaximumStep, lineSearchAccuracy)

    def SetOptimizerAsExhaustive(self, numberOfSteps, stepLength=1.0):
        r"""SetOptimizerAsExhaustive(ImageRegistrationMethod self, VectorUInt32 numberOfSteps, double stepLength=1.0)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerAsExhaustive(self, numberOfSteps, stepLength)

    def SetOptimizerAsAmoeba(self, simplexDelta, numberOfIterations, parametersConvergenceTolerance=1e-8, functionConvergenceTolerance=1e-4, withRestarts=False):
        r"""SetOptimizerAsAmoeba(ImageRegistrationMethod self, double simplexDelta, unsigned int numberOfIterations, double parametersConvergenceTolerance=1e-8, double functionConvergenceTolerance=1e-4, bool withRestarts=False)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerAsAmoeba(self, simplexDelta, numberOfIterations, parametersConvergenceTolerance, functionConvergenceTolerance, withRestarts)

    def SetOptimizerWeights(self, weights):
        r"""SetOptimizerWeights(ImageRegistrationMethod self, VectorDouble weights)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerWeights(self, weights)

    def GetOptimizerWeights(self):
        r"""GetOptimizerWeights(ImageRegistrationMethod self) -> VectorDouble"""
        return _SimpleITK.ImageRegistrationMethod_GetOptimizerWeights(self)

    def SetOptimizerAsPowell(self, numberOfIterations=100, maximumLineIterations=100, stepLength=1, stepTolerance=1e-6, valueTolerance=1e-6):
        r"""SetOptimizerAsPowell(ImageRegistrationMethod self, unsigned int numberOfIterations=100, unsigned int maximumLineIterations=100, double stepLength=1, double stepTolerance=1e-6, double valueTolerance=1e-6)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerAsPowell(self, numberOfIterations, maximumLineIterations, stepLength, stepTolerance, valueTolerance)

    def SetOptimizerAsOnePlusOneEvolutionary(self, *args, **kwargs):
        r"""SetOptimizerAsOnePlusOneEvolutionary(ImageRegistrationMethod self, unsigned int numberOfIterations=100, double epsilon=1.5e-4, double initialRadius=1.01, double growthFactor=-1.0, double shrinkFactor=-1.0, unsigned int seed=sitkWallClock)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerAsOnePlusOneEvolutionary(self, *args, **kwargs)

    def SetOptimizerScales(self, scales):
        r"""SetOptimizerScales(ImageRegistrationMethod self, VectorDouble scales)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerScales(self, scales)

    def SetOptimizerScalesFromJacobian(self, centralRegionRadius=5):
        r"""SetOptimizerScalesFromJacobian(ImageRegistrationMethod self, unsigned int centralRegionRadius=5)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerScalesFromJacobian(self, centralRegionRadius)

    def SetOptimizerScalesFromIndexShift(self, centralRegionRadius=5, smallParameterVariation=0.01):
        r"""SetOptimizerScalesFromIndexShift(ImageRegistrationMethod self, unsigned int centralRegionRadius=5, double smallParameterVariation=0.01)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerScalesFromIndexShift(self, centralRegionRadius, smallParameterVariation)

    def SetOptimizerScalesFromPhysicalShift(self, centralRegionRadius=5, smallParameterVariation=0.01):
        r"""SetOptimizerScalesFromPhysicalShift(ImageRegistrationMethod self, unsigned int centralRegionRadius=5, double smallParameterVariation=0.01)"""
        return _SimpleITK.ImageRegistrationMethod_SetOptimizerScalesFromPhysicalShift(self, centralRegionRadius, smallParameterVariation)

    def SetMetricFixedMask(self, binaryMask):
        r"""SetMetricFixedMask(ImageRegistrationMethod self, Image binaryMask)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricFixedMask(self, binaryMask)

    def SetMetricMovingMask(self, binaryMask):
        r"""SetMetricMovingMask(ImageRegistrationMethod self, Image binaryMask)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricMovingMask(self, binaryMask)

    def SetMetricSamplingPercentage(self, *args, **kwargs):
        r"""SetMetricSamplingPercentage(ImageRegistrationMethod self, double percentage, unsigned int seed=sitkWallClock)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricSamplingPercentage(self, *args, **kwargs)

    def SetMetricSamplingPercentagePerLevel(self, *args, **kwargs):
        r"""SetMetricSamplingPercentagePerLevel(ImageRegistrationMethod self, VectorDouble percentage, unsigned int seed=sitkWallClock)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricSamplingPercentagePerLevel(self, *args, **kwargs)

    def GetMetricSamplingPercentagePerLevel(self):
        r"""GetMetricSamplingPercentagePerLevel(ImageRegistrationMethod self) -> VectorDouble"""
        return _SimpleITK.ImageRegistrationMethod_GetMetricSamplingPercentagePerLevel(self)
    NONE = _SimpleITK.ImageRegistrationMethod_NONE
    
    REGULAR = _SimpleITK.ImageRegistrationMethod_REGULAR
    
    RANDOM = _SimpleITK.ImageRegistrationMethod_RANDOM
    

    def SetMetricSamplingStrategy(self, strategy):
        r"""SetMetricSamplingStrategy(ImageRegistrationMethod self, itk::simple::ImageRegistrationMethod::MetricSamplingStrategyType strategy)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricSamplingStrategy(self, strategy)

    def SetMetricUseFixedImageGradientFilter(self, arg2):
        r"""SetMetricUseFixedImageGradientFilter(ImageRegistrationMethod self, bool arg2)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricUseFixedImageGradientFilter(self, arg2)

    def MetricUseFixedImageGradientFilterOn(self):
        r"""MetricUseFixedImageGradientFilterOn(ImageRegistrationMethod self)"""
        return _SimpleITK.ImageRegistrationMethod_MetricUseFixedImageGradientFilterOn(self)

    def MetricUseFixedImageGradientFilterOff(self):
        r"""MetricUseFixedImageGradientFilterOff(ImageRegistrationMethod self)"""
        return _SimpleITK.ImageRegistrationMethod_MetricUseFixedImageGradientFilterOff(self)

    def SetMetricUseMovingImageGradientFilter(self, arg2):
        r"""SetMetricUseMovingImageGradientFilter(ImageRegistrationMethod self, bool arg2)"""
        return _SimpleITK.ImageRegistrationMethod_SetMetricUseMovingImageGradientFilter(self, arg2)

    def MetricUseMovingImageGradientFilterOn(self):
        r"""MetricUseMovingImageGradientFilterOn(ImageRegistrationMethod self)"""
        return _SimpleITK.ImageRegistrationMethod_MetricUseMovingImageGradientFilterOn(self)

    def MetricUseMovingImageGradientFilterOff(self):
        r"""MetricUseMovingImageGradientFilterOff(ImageRegistrationMethod self)"""
        return _SimpleITK.ImageRegistrationMethod_MetricUseMovingImageGradientFilterOff(self)

    def SetShrinkFactorsPerLevel(self, shrinkFactors):
        r"""SetShrinkFactorsPerLevel(ImageRegistrationMethod self, VectorUInt32 shrinkFactors)"""
        return _SimpleITK.ImageRegistrationMethod_SetShrinkFactorsPerLevel(self, shrinkFactors)

    def SetSmoothingSigmasPerLevel(self, smoothingSigmas):
        r"""SetSmoothingSigmasPerLevel(ImageRegistrationMethod self, VectorDouble smoothingSigmas)"""
        return _SimpleITK.ImageRegistrationMethod_SetSmoothingSigmasPerLevel(self, smoothingSigmas)

    def SetSmoothingSigmasAreSpecifiedInPhysicalUnits(self, arg):
        r"""SetSmoothingSigmasAreSpecifiedInPhysicalUnits(ImageRegistrationMethod self, bool arg)"""
        return _SimpleITK.ImageRegistrationMethod_SetSmoothingSigmasAreSpecifiedInPhysicalUnits(self, arg)

    def SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(self):
        r"""SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(ImageRegistrationMethod self)"""
        return _SimpleITK.ImageRegistrationMethod_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(self)

    def SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(self):
        r"""SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(ImageRegistrationMethod self)"""
        return _SimpleITK.ImageRegistrationMethod_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(self)

    def Execute(self, fixed, moving):
        r"""Execute(ImageRegistrationMethod self, Image fixed, Image moving) -> Transform"""
        return _SimpleITK.ImageRegistrationMethod_Execute(self, fixed, moving)

    def MetricEvaluate(self, fixed, moving):
        r"""MetricEvaluate(ImageRegistrationMethod self, Image fixed, Image moving) -> double"""
        return _SimpleITK.ImageRegistrationMethod_MetricEvaluate(self, fixed, moving)

    def GetOptimizerIteration(self):
        r"""GetOptimizerIteration(ImageRegistrationMethod self) -> unsigned int"""
        return _SimpleITK.ImageRegistrationMethod_GetOptimizerIteration(self)

    def GetOptimizerPosition(self):
        r"""GetOptimizerPosition(ImageRegistrationMethod self) -> VectorDouble"""
        return _SimpleITK.ImageRegistrationMethod_GetOptimizerPosition(self)

    def GetOptimizerLearningRate(self):
        r"""GetOptimizerLearningRate(ImageRegistrationMethod self) -> double"""
        return _SimpleITK.ImageRegistrationMethod_GetOptimizerLearningRate(self)

    def GetOptimizerConvergenceValue(self):
        r"""GetOptimizerConvergenceValue(ImageRegistrationMethod self) -> double"""
        return _SimpleITK.ImageRegistrationMethod_GetOptimizerConvergenceValue(self)

    def GetMetricValue(self):
        r"""GetMetricValue(ImageRegistrationMethod self) -> double"""
        return _SimpleITK.ImageRegistrationMethod_GetMetricValue(self)

    def GetMetricNumberOfValidPoints(self):
        r"""GetMetricNumberOfValidPoints(ImageRegistrationMethod self) -> uint64_t"""
        return _SimpleITK.ImageRegistrationMethod_GetMetricNumberOfValidPoints(self)

    def GetCurrentLevel(self):
        r"""GetCurrentLevel(ImageRegistrationMethod self) -> unsigned int"""
        return _SimpleITK.ImageRegistrationMethod_GetCurrentLevel(self)

    def GetOptimizerScales(self):
        r"""GetOptimizerScales(ImageRegistrationMethod self) -> VectorDouble"""
        return _SimpleITK.ImageRegistrationMethod_GetOptimizerScales(self)

    def GetOptimizerStopConditionDescription(self):
        r"""GetOptimizerStopConditionDescription(ImageRegistrationMethod self) -> std::string"""
        return _SimpleITK.ImageRegistrationMethod_GetOptimizerStopConditionDescription(self)

# Register ImageRegistrationMethod in _SimpleITK:
_SimpleITK.ImageRegistrationMethod_swigregister(ImageRegistrationMethod)

class ResampleImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::ResampleImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ResampleImageFilter

    def __init__(self):
        r"""__init__(ResampleImageFilter self) -> ResampleImageFilter"""
        _SimpleITK.ResampleImageFilter_swiginit(self, _SimpleITK.new_ResampleImageFilter())

    def SetSize(self, Size):
        r"""SetSize(ResampleImageFilter self, VectorUInt32 Size)"""
        return _SimpleITK.ResampleImageFilter_SetSize(self, Size)

    def GetSize(self):
        r"""GetSize(ResampleImageFilter self) -> VectorUInt32"""
        return _SimpleITK.ResampleImageFilter_GetSize(self)

    def SetTransform(self, Transform):
        r"""SetTransform(ResampleImageFilter self, Transform Transform)"""
        return _SimpleITK.ResampleImageFilter_SetTransform(self, Transform)

    def GetTransform(self):
        r"""GetTransform(ResampleImageFilter self) -> Transform"""
        return _SimpleITK.ResampleImageFilter_GetTransform(self)

    def SetInterpolator(self, Interpolator):
        r"""SetInterpolator(ResampleImageFilter self, itk::simple::InterpolatorEnum Interpolator)"""
        return _SimpleITK.ResampleImageFilter_SetInterpolator(self, Interpolator)

    def GetInterpolator(self):
        r"""GetInterpolator(ResampleImageFilter self) -> itk::simple::InterpolatorEnum"""
        return _SimpleITK.ResampleImageFilter_GetInterpolator(self)

    def SetOutputOrigin(self, OutputOrigin):
        r"""SetOutputOrigin(ResampleImageFilter self, VectorDouble OutputOrigin)"""
        return _SimpleITK.ResampleImageFilter_SetOutputOrigin(self, OutputOrigin)

    def GetOutputOrigin(self):
        r"""GetOutputOrigin(ResampleImageFilter self) -> VectorDouble"""
        return _SimpleITK.ResampleImageFilter_GetOutputOrigin(self)

    def SetOutputSpacing(self, OutputSpacing):
        r"""SetOutputSpacing(ResampleImageFilter self, VectorDouble OutputSpacing)"""
        return _SimpleITK.ResampleImageFilter_SetOutputSpacing(self, OutputSpacing)

    def GetOutputSpacing(self):
        r"""GetOutputSpacing(ResampleImageFilter self) -> VectorDouble"""
        return _SimpleITK.ResampleImageFilter_GetOutputSpacing(self)

    def SetOutputDirection(self, OutputDirection):
        r"""SetOutputDirection(ResampleImageFilter self, VectorDouble OutputDirection)"""
        return _SimpleITK.ResampleImageFilter_SetOutputDirection(self, OutputDirection)

    def GetOutputDirection(self):
        r"""GetOutputDirection(ResampleImageFilter self) -> VectorDouble"""
        return _SimpleITK.ResampleImageFilter_GetOutputDirection(self)

    def SetDefaultPixelValue(self, DefaultPixelValue):
        r"""SetDefaultPixelValue(ResampleImageFilter self, double DefaultPixelValue)"""
        return _SimpleITK.ResampleImageFilter_SetDefaultPixelValue(self, DefaultPixelValue)

    def GetDefaultPixelValue(self):
        r"""GetDefaultPixelValue(ResampleImageFilter self) -> double"""
        return _SimpleITK.ResampleImageFilter_GetDefaultPixelValue(self)

    def SetOutputPixelType(self, OutputPixelType):
        r"""SetOutputPixelType(ResampleImageFilter self, itk::simple::PixelIDValueEnum OutputPixelType)"""
        return _SimpleITK.ResampleImageFilter_SetOutputPixelType(self, OutputPixelType)

    def GetOutputPixelType(self):
        r"""GetOutputPixelType(ResampleImageFilter self) -> itk::simple::PixelIDValueEnum"""
        return _SimpleITK.ResampleImageFilter_GetOutputPixelType(self)

    def SetUseNearestNeighborExtrapolator(self, UseNearestNeighborExtrapolator):
        r"""SetUseNearestNeighborExtrapolator(ResampleImageFilter self, bool UseNearestNeighborExtrapolator)"""
        return _SimpleITK.ResampleImageFilter_SetUseNearestNeighborExtrapolator(self, UseNearestNeighborExtrapolator)

    def UseNearestNeighborExtrapolatorOn(self):
        r"""UseNearestNeighborExtrapolatorOn(ResampleImageFilter self)"""
        return _SimpleITK.ResampleImageFilter_UseNearestNeighborExtrapolatorOn(self)

    def UseNearestNeighborExtrapolatorOff(self):
        r"""UseNearestNeighborExtrapolatorOff(ResampleImageFilter self)"""
        return _SimpleITK.ResampleImageFilter_UseNearestNeighborExtrapolatorOff(self)

    def GetUseNearestNeighborExtrapolator(self):
        r"""GetUseNearestNeighborExtrapolator(ResampleImageFilter self) -> bool"""
        return _SimpleITK.ResampleImageFilter_GetUseNearestNeighborExtrapolator(self)

    def GetName(self):
        r"""GetName(ResampleImageFilter self) -> std::string"""
        return _SimpleITK.ResampleImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(ResampleImageFilter self) -> std::string"""
        return _SimpleITK.ResampleImageFilter___str__(self)

    def Execute(self, image1):
        r"""Execute(ResampleImageFilter self, Image image1) -> Image"""
        return _SimpleITK.ResampleImageFilter_Execute(self, image1)

    def SetReferenceImage(self, refImage):
        r"""SetReferenceImage(ResampleImageFilter self, Image refImage)"""
        return _SimpleITK.ResampleImageFilter_SetReferenceImage(self, refImage)

# Register ResampleImageFilter in _SimpleITK:
_SimpleITK.ResampleImageFilter_swigregister(ResampleImageFilter)

class MaskNegatedImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::MaskNegatedImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_MaskNegatedImageFilter

    def __init__(self):
        r"""__init__(MaskNegatedImageFilter self) -> MaskNegatedImageFilter"""
        _SimpleITK.MaskNegatedImageFilter_swiginit(self, _SimpleITK.new_MaskNegatedImageFilter())

    def SetOutsideValue(self, OutsideValue):
        r"""SetOutsideValue(MaskNegatedImageFilter self, double OutsideValue)"""
        return _SimpleITK.MaskNegatedImageFilter_SetOutsideValue(self, OutsideValue)

    def GetOutsideValue(self):
        r"""GetOutsideValue(MaskNegatedImageFilter self) -> double"""
        return _SimpleITK.MaskNegatedImageFilter_GetOutsideValue(self)

    def SetMaskingValue(self, MaskingValue):
        r"""SetMaskingValue(MaskNegatedImageFilter self, double MaskingValue)"""
        return _SimpleITK.MaskNegatedImageFilter_SetMaskingValue(self, MaskingValue)

    def GetMaskingValue(self):
        r"""GetMaskingValue(MaskNegatedImageFilter self) -> double"""
        return _SimpleITK.MaskNegatedImageFilter_GetMaskingValue(self)

    def GetName(self):
        r"""GetName(MaskNegatedImageFilter self) -> std::string"""
        return _SimpleITK.MaskNegatedImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(MaskNegatedImageFilter self) -> std::string"""
        return _SimpleITK.MaskNegatedImageFilter___str__(self)

    def Execute(self, image, maskImage):
        r"""Execute(MaskNegatedImageFilter self, Image image, Image maskImage) -> Image"""
        return _SimpleITK.MaskNegatedImageFilter_Execute(self, image, maskImage)

# Register MaskNegatedImageFilter in _SimpleITK:
_SimpleITK.MaskNegatedImageFilter_swigregister(MaskNegatedImageFilter)


def MaskNegated(image, maskImage, outsideValue=0, maskingValue=0):
    r"""MaskNegated(Image image, Image maskImage, double outsideValue=0, double maskingValue=0) -> Image"""
    return _SimpleITK.MaskNegated(image, maskImage, outsideValue, maskingValue)

def Hash(*args, **kwargs):
    r"""Hash(Image image, itk::simple::HashImageFilter::HashFunction function=SHA1) -> std::string"""
    return _SimpleITK.Hash(*args, **kwargs)

class LabelShapeStatisticsImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::LabelShapeStatisticsImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_LabelShapeStatisticsImageFilter

    def __init__(self):
        r"""__init__(LabelShapeStatisticsImageFilter self) -> LabelShapeStatisticsImageFilter"""
        _SimpleITK.LabelShapeStatisticsImageFilter_swiginit(self, _SimpleITK.new_LabelShapeStatisticsImageFilter())

    def SetBackgroundValue(self, BackgroundValue):
        r"""SetBackgroundValue(LabelShapeStatisticsImageFilter self, double BackgroundValue)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_SetBackgroundValue(self, BackgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(LabelShapeStatisticsImageFilter self) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetBackgroundValue(self)

    def SetComputeFeretDiameter(self, ComputeFeretDiameter):
        r"""SetComputeFeretDiameter(LabelShapeStatisticsImageFilter self, bool ComputeFeretDiameter)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_SetComputeFeretDiameter(self, ComputeFeretDiameter)

    def ComputeFeretDiameterOn(self):
        r"""ComputeFeretDiameterOn(LabelShapeStatisticsImageFilter self)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_ComputeFeretDiameterOn(self)

    def ComputeFeretDiameterOff(self):
        r"""ComputeFeretDiameterOff(LabelShapeStatisticsImageFilter self)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_ComputeFeretDiameterOff(self)

    def GetComputeFeretDiameter(self):
        r"""GetComputeFeretDiameter(LabelShapeStatisticsImageFilter self) -> bool"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetComputeFeretDiameter(self)

    def SetComputePerimeter(self, ComputePerimeter):
        r"""SetComputePerimeter(LabelShapeStatisticsImageFilter self, bool ComputePerimeter)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_SetComputePerimeter(self, ComputePerimeter)

    def ComputePerimeterOn(self):
        r"""ComputePerimeterOn(LabelShapeStatisticsImageFilter self)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_ComputePerimeterOn(self)

    def ComputePerimeterOff(self):
        r"""ComputePerimeterOff(LabelShapeStatisticsImageFilter self)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_ComputePerimeterOff(self)

    def GetComputePerimeter(self):
        r"""GetComputePerimeter(LabelShapeStatisticsImageFilter self) -> bool"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetComputePerimeter(self)

    def SetComputeOrientedBoundingBox(self, ComputeOrientedBoundingBox):
        r"""SetComputeOrientedBoundingBox(LabelShapeStatisticsImageFilter self, bool ComputeOrientedBoundingBox)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_SetComputeOrientedBoundingBox(self, ComputeOrientedBoundingBox)

    def ComputeOrientedBoundingBoxOn(self):
        r"""ComputeOrientedBoundingBoxOn(LabelShapeStatisticsImageFilter self)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_ComputeOrientedBoundingBoxOn(self)

    def ComputeOrientedBoundingBoxOff(self):
        r"""ComputeOrientedBoundingBoxOff(LabelShapeStatisticsImageFilter self)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_ComputeOrientedBoundingBoxOff(self)

    def GetComputeOrientedBoundingBox(self):
        r"""GetComputeOrientedBoundingBox(LabelShapeStatisticsImageFilter self) -> bool"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetComputeOrientedBoundingBox(self)

    def GetBoundingBox(self, label):
        r"""GetBoundingBox(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorUInt32"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetBoundingBox(self, label)

    def GetRegion(self, label):
        r"""GetRegion(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorUInt32"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetRegion(self, label)

    def GetCentroid(self, label):
        r"""GetCentroid(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorDouble"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetCentroid(self, label)

    def GetElongation(self, label):
        r"""GetElongation(LabelShapeStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetElongation(self, label)

    def GetEquivalentEllipsoidDiameter(self, label):
        r"""GetEquivalentEllipsoidDiameter(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorDouble"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetEquivalentEllipsoidDiameter(self, label)

    def GetEquivalentSphericalPerimeter(self, label):
        r"""GetEquivalentSphericalPerimeter(LabelShapeStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetEquivalentSphericalPerimeter(self, label)

    def GetEquivalentSphericalRadius(self, label):
        r"""GetEquivalentSphericalRadius(LabelShapeStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetEquivalentSphericalRadius(self, label)

    def GetFeretDiameter(self, label):
        r"""GetFeretDiameter(LabelShapeStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetFeretDiameter(self, label)

    def GetFlatness(self, label):
        r"""GetFlatness(LabelShapeStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetFlatness(self, label)

    def GetLabels(self):
        r"""GetLabels(LabelShapeStatisticsImageFilter self) -> VectorInt64"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetLabels(self)

    def GetNumberOfPixels(self, label):
        r"""GetNumberOfPixels(LabelShapeStatisticsImageFilter self, int64_t label) -> uint64_t"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetNumberOfPixels(self, label)

    def GetNumberOfPixelsOnBorder(self, label):
        r"""GetNumberOfPixelsOnBorder(LabelShapeStatisticsImageFilter self, int64_t label) -> uint64_t"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetNumberOfPixelsOnBorder(self, label)

    def GetPerimeter(self, label):
        r"""GetPerimeter(LabelShapeStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetPerimeter(self, label)

    def GetPerimeterOnBorder(self, label):
        r"""GetPerimeterOnBorder(LabelShapeStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetPerimeterOnBorder(self, label)

    def GetPerimeterOnBorderRatio(self, label):
        r"""GetPerimeterOnBorderRatio(LabelShapeStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetPerimeterOnBorderRatio(self, label)

    def GetPhysicalSize(self, label):
        r"""GetPhysicalSize(LabelShapeStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetPhysicalSize(self, label)

    def GetPrincipalAxes(self, label):
        r"""GetPrincipalAxes(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorDouble"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetPrincipalAxes(self, label)

    def GetPrincipalMoments(self, label):
        r"""GetPrincipalMoments(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorDouble"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetPrincipalMoments(self, label)

    def GetRoundness(self, label):
        r"""GetRoundness(LabelShapeStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetRoundness(self, label)

    def GetOrientedBoundingBoxSize(self, label):
        r"""GetOrientedBoundingBoxSize(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorDouble"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetOrientedBoundingBoxSize(self, label)

    def GetOrientedBoundingBoxOrigin(self, label):
        r"""GetOrientedBoundingBoxOrigin(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorDouble"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetOrientedBoundingBoxOrigin(self, label)

    def GetOrientedBoundingBoxDirection(self, label):
        r"""GetOrientedBoundingBoxDirection(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorDouble"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetOrientedBoundingBoxDirection(self, label)

    def GetOrientedBoundingBoxVertices(self, label):
        r"""GetOrientedBoundingBoxVertices(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorDouble"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetOrientedBoundingBoxVertices(self, label)

    def GetIndexes(self, label):
        r"""GetIndexes(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorUInt32"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetIndexes(self, label)

    def GetRLEIndexes(self, label):
        r"""GetRLEIndexes(LabelShapeStatisticsImageFilter self, int64_t label) -> VectorUInt32"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetRLEIndexes(self, label)

    def GetName(self):
        r"""GetName(LabelShapeStatisticsImageFilter self) -> std::string"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(LabelShapeStatisticsImageFilter self) -> std::string"""
        return _SimpleITK.LabelShapeStatisticsImageFilter___str__(self)

    def Execute(self, image1):
        r"""Execute(LabelShapeStatisticsImageFilter self, Image image1)"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_Execute(self, image1)

    def HasLabel(self, label):
        r"""HasLabel(LabelShapeStatisticsImageFilter self, int64_t label) -> bool"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_HasLabel(self, label)

    def GetNumberOfLabels(self):
        r"""GetNumberOfLabels(LabelShapeStatisticsImageFilter self) -> uint64_t"""
        return _SimpleITK.LabelShapeStatisticsImageFilter_GetNumberOfLabels(self)

# Register LabelShapeStatisticsImageFilter in _SimpleITK:
_SimpleITK.LabelShapeStatisticsImageFilter_swigregister(LabelShapeStatisticsImageFilter)

class LabelStatisticsImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::LabelStatisticsImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_LabelStatisticsImageFilter

    def __init__(self):
        r"""__init__(LabelStatisticsImageFilter self) -> LabelStatisticsImageFilter"""
        _SimpleITK.LabelStatisticsImageFilter_swiginit(self, _SimpleITK.new_LabelStatisticsImageFilter())

    def SetUseHistograms(self, UseHistograms):
        r"""SetUseHistograms(LabelStatisticsImageFilter self, bool UseHistograms)"""
        return _SimpleITK.LabelStatisticsImageFilter_SetUseHistograms(self, UseHistograms)

    def UseHistogramsOn(self):
        r"""UseHistogramsOn(LabelStatisticsImageFilter self)"""
        return _SimpleITK.LabelStatisticsImageFilter_UseHistogramsOn(self)

    def UseHistogramsOff(self):
        r"""UseHistogramsOff(LabelStatisticsImageFilter self)"""
        return _SimpleITK.LabelStatisticsImageFilter_UseHistogramsOff(self)

    def GetUseHistograms(self):
        r"""GetUseHistograms(LabelStatisticsImageFilter self) -> bool"""
        return _SimpleITK.LabelStatisticsImageFilter_GetUseHistograms(self)

    def GetMinimum(self, label):
        r"""GetMinimum(LabelStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelStatisticsImageFilter_GetMinimum(self, label)

    def GetMaximum(self, label):
        r"""GetMaximum(LabelStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelStatisticsImageFilter_GetMaximum(self, label)

    def GetMean(self, label):
        r"""GetMean(LabelStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelStatisticsImageFilter_GetMean(self, label)

    def GetMedian(self, label):
        r"""GetMedian(LabelStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelStatisticsImageFilter_GetMedian(self, label)

    def GetSigma(self, label):
        r"""GetSigma(LabelStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelStatisticsImageFilter_GetSigma(self, label)

    def GetVariance(self, label):
        r"""GetVariance(LabelStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelStatisticsImageFilter_GetVariance(self, label)

    def GetSum(self, label):
        r"""GetSum(LabelStatisticsImageFilter self, int64_t label) -> double"""
        return _SimpleITK.LabelStatisticsImageFilter_GetSum(self, label)

    def GetCount(self, label):
        r"""GetCount(LabelStatisticsImageFilter self, int64_t label) -> uint64_t"""
        return _SimpleITK.LabelStatisticsImageFilter_GetCount(self, label)

    def GetBoundingBox(self, label):
        r"""GetBoundingBox(LabelStatisticsImageFilter self, int64_t label) -> VectorInt32"""
        return _SimpleITK.LabelStatisticsImageFilter_GetBoundingBox(self, label)

    def GetRegion(self, label):
        r"""GetRegion(LabelStatisticsImageFilter self, int64_t label) -> VectorUInt32"""
        return _SimpleITK.LabelStatisticsImageFilter_GetRegion(self, label)

    def GetLabels(self):
        r"""GetLabels(LabelStatisticsImageFilter self) -> VectorInt64"""
        return _SimpleITK.LabelStatisticsImageFilter_GetLabels(self)

    def GetName(self):
        r"""GetName(LabelStatisticsImageFilter self) -> std::string"""
        return _SimpleITK.LabelStatisticsImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(LabelStatisticsImageFilter self) -> std::string"""
        return _SimpleITK.LabelStatisticsImageFilter___str__(self)

    def Execute(self, image, labelImage):
        r"""Execute(LabelStatisticsImageFilter self, Image image, Image labelImage)"""
        return _SimpleITK.LabelStatisticsImageFilter_Execute(self, image, labelImage)

    def HasLabel(self, label):
        r"""HasLabel(LabelStatisticsImageFilter self, int64_t label) -> bool"""
        return _SimpleITK.LabelStatisticsImageFilter_HasLabel(self, label)

    def GetNumberOfLabels(self):
        r"""GetNumberOfLabels(LabelStatisticsImageFilter self) -> uint64_t"""
        return _SimpleITK.LabelStatisticsImageFilter_GetNumberOfLabels(self)

# Register LabelStatisticsImageFilter in _SimpleITK:
_SimpleITK.LabelStatisticsImageFilter_swigregister(LabelStatisticsImageFilter)

def Equal(*args):
    r"""
    Equal(Image image1, Image image2, uint8_t backgroundValue=0, uint8_t foregroundValue=1) -> Image
    Equal(Image image1, double constant, uint8_t backgroundValue=0, uint8_t foregroundValue=1) -> Image
    Equal(double constant, Image image2, uint8_t backgroundValue=0, uint8_t foregroundValue=1) -> Image
    """
    return _SimpleITK.Equal(*args)

class ConnectedComponentImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::ConnectedComponentImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ConnectedComponentImageFilter

    def __init__(self):
        r"""__init__(ConnectedComponentImageFilter self) -> ConnectedComponentImageFilter"""
        _SimpleITK.ConnectedComponentImageFilter_swiginit(self, _SimpleITK.new_ConnectedComponentImageFilter())

    def SetFullyConnected(self, FullyConnected):
        r"""SetFullyConnected(ConnectedComponentImageFilter self, bool FullyConnected)"""
        return _SimpleITK.ConnectedComponentImageFilter_SetFullyConnected(self, FullyConnected)

    def FullyConnectedOn(self):
        r"""FullyConnectedOn(ConnectedComponentImageFilter self)"""
        return _SimpleITK.ConnectedComponentImageFilter_FullyConnectedOn(self)

    def FullyConnectedOff(self):
        r"""FullyConnectedOff(ConnectedComponentImageFilter self)"""
        return _SimpleITK.ConnectedComponentImageFilter_FullyConnectedOff(self)

    def GetFullyConnected(self):
        r"""GetFullyConnected(ConnectedComponentImageFilter self) -> bool"""
        return _SimpleITK.ConnectedComponentImageFilter_GetFullyConnected(self)

    def GetObjectCount(self):
        r"""GetObjectCount(ConnectedComponentImageFilter self) -> uint32_t"""
        return _SimpleITK.ConnectedComponentImageFilter_GetObjectCount(self)

    def GetName(self):
        r"""GetName(ConnectedComponentImageFilter self) -> std::string"""
        return _SimpleITK.ConnectedComponentImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(ConnectedComponentImageFilter self) -> std::string"""
        return _SimpleITK.ConnectedComponentImageFilter___str__(self)

    def Execute(self, *args):
        r"""
        Execute(ConnectedComponentImageFilter self, Image image, Image maskImage) -> Image
        Execute(ConnectedComponentImageFilter self, Image image) -> Image
        """
        return _SimpleITK.ConnectedComponentImageFilter_Execute(self, *args)

# Register ConnectedComponentImageFilter in _SimpleITK:
_SimpleITK.ConnectedComponentImageFilter_swigregister(ConnectedComponentImageFilter)

def Normalize(image1):
    r"""Normalize(Image image1) -> Image"""
    return _SimpleITK.Normalize(image1)

class CropImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::CropImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_CropImageFilter

    def __init__(self):
        r"""__init__(CropImageFilter self) -> CropImageFilter"""
        _SimpleITK.CropImageFilter_swiginit(self, _SimpleITK.new_CropImageFilter())

    def SetLowerBoundaryCropSize(self, LowerBoundaryCropSize):
        r"""SetLowerBoundaryCropSize(CropImageFilter self, VectorUInt32 LowerBoundaryCropSize)"""
        return _SimpleITK.CropImageFilter_SetLowerBoundaryCropSize(self, LowerBoundaryCropSize)

    def GetLowerBoundaryCropSize(self):
        r"""GetLowerBoundaryCropSize(CropImageFilter self) -> VectorUInt32"""
        return _SimpleITK.CropImageFilter_GetLowerBoundaryCropSize(self)

    def SetUpperBoundaryCropSize(self, UpperBoundaryCropSize):
        r"""SetUpperBoundaryCropSize(CropImageFilter self, VectorUInt32 UpperBoundaryCropSize)"""
        return _SimpleITK.CropImageFilter_SetUpperBoundaryCropSize(self, UpperBoundaryCropSize)

    def GetUpperBoundaryCropSize(self):
        r"""GetUpperBoundaryCropSize(CropImageFilter self) -> VectorUInt32"""
        return _SimpleITK.CropImageFilter_GetUpperBoundaryCropSize(self)

    def GetName(self):
        r"""GetName(CropImageFilter self) -> std::string"""
        return _SimpleITK.CropImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(CropImageFilter self) -> std::string"""
        return _SimpleITK.CropImageFilter___str__(self)

    def Execute(self, image1):
        r"""Execute(CropImageFilter self, Image image1) -> Image"""
        return _SimpleITK.CropImageFilter_Execute(self, image1)

# Register CropImageFilter in _SimpleITK:
_SimpleITK.CropImageFilter_swigregister(CropImageFilter)


class ConstantPadImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::ConstantPadImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_ConstantPadImageFilter

    def __init__(self):
        r"""__init__(ConstantPadImageFilter self) -> ConstantPadImageFilter"""
        _SimpleITK.ConstantPadImageFilter_swiginit(self, _SimpleITK.new_ConstantPadImageFilter())

    def SetPadLowerBound(self, PadLowerBound):
        r"""SetPadLowerBound(ConstantPadImageFilter self, VectorUInt32 PadLowerBound)"""
        return _SimpleITK.ConstantPadImageFilter_SetPadLowerBound(self, PadLowerBound)

    def GetPadLowerBound(self):
        r"""GetPadLowerBound(ConstantPadImageFilter self) -> VectorUInt32"""
        return _SimpleITK.ConstantPadImageFilter_GetPadLowerBound(self)

    def SetPadUpperBound(self, PadUpperBound):
        r"""SetPadUpperBound(ConstantPadImageFilter self, VectorUInt32 PadUpperBound)"""
        return _SimpleITK.ConstantPadImageFilter_SetPadUpperBound(self, PadUpperBound)

    def GetPadUpperBound(self):
        r"""GetPadUpperBound(ConstantPadImageFilter self) -> VectorUInt32"""
        return _SimpleITK.ConstantPadImageFilter_GetPadUpperBound(self)

    def SetConstant(self, Constant):
        r"""SetConstant(ConstantPadImageFilter self, double Constant)"""
        return _SimpleITK.ConstantPadImageFilter_SetConstant(self, Constant)

    def GetConstant(self):
        r"""GetConstant(ConstantPadImageFilter self) -> double"""
        return _SimpleITK.ConstantPadImageFilter_GetConstant(self)

    def GetName(self):
        r"""GetName(ConstantPadImageFilter self) -> std::string"""
        return _SimpleITK.ConstantPadImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(ConstantPadImageFilter self) -> std::string"""
        return _SimpleITK.ConstantPadImageFilter___str__(self)

    def Execute(self, image1):
        r"""Execute(ConstantPadImageFilter self, Image image1) -> Image"""
        return _SimpleITK.ConstantPadImageFilter_Execute(self, image1)

# Register ConstantPadImageFilter in _SimpleITK:
_SimpleITK.ConstantPadImageFilter_swigregister(ConstantPadImageFilter)


class BinaryThresholdImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::BinaryThresholdImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_BinaryThresholdImageFilter

    def __init__(self):
        r"""__init__(BinaryThresholdImageFilter self) -> BinaryThresholdImageFilter"""
        _SimpleITK.BinaryThresholdImageFilter_swiginit(self, _SimpleITK.new_BinaryThresholdImageFilter())

    def SetLowerThreshold(self, LowerThreshold):
        r"""SetLowerThreshold(BinaryThresholdImageFilter self, double LowerThreshold)"""
        return _SimpleITK.BinaryThresholdImageFilter_SetLowerThreshold(self, LowerThreshold)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(BinaryThresholdImageFilter self) -> double"""
        return _SimpleITK.BinaryThresholdImageFilter_GetLowerThreshold(self)

    def SetUpperThreshold(self, UpperThreshold):
        r"""SetUpperThreshold(BinaryThresholdImageFilter self, double UpperThreshold)"""
        return _SimpleITK.BinaryThresholdImageFilter_SetUpperThreshold(self, UpperThreshold)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(BinaryThresholdImageFilter self) -> double"""
        return _SimpleITK.BinaryThresholdImageFilter_GetUpperThreshold(self)

    def SetInsideValue(self, InsideValue):
        r"""SetInsideValue(BinaryThresholdImageFilter self, uint8_t InsideValue)"""
        return _SimpleITK.BinaryThresholdImageFilter_SetInsideValue(self, InsideValue)

    def GetInsideValue(self):
        r"""GetInsideValue(BinaryThresholdImageFilter self) -> uint8_t"""
        return _SimpleITK.BinaryThresholdImageFilter_GetInsideValue(self)

    def SetOutsideValue(self, OutsideValue):
        r"""SetOutsideValue(BinaryThresholdImageFilter self, uint8_t OutsideValue)"""
        return _SimpleITK.BinaryThresholdImageFilter_SetOutsideValue(self, OutsideValue)

    def GetOutsideValue(self):
        r"""GetOutsideValue(BinaryThresholdImageFilter self) -> uint8_t"""
        return _SimpleITK.BinaryThresholdImageFilter_GetOutsideValue(self)

    def GetName(self):
        r"""GetName(BinaryThresholdImageFilter self) -> std::string"""
        return _SimpleITK.BinaryThresholdImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(BinaryThresholdImageFilter self) -> std::string"""
        return _SimpleITK.BinaryThresholdImageFilter___str__(self)

    def Execute(self, image1):
        r"""Execute(BinaryThresholdImageFilter self, Image image1) -> Image"""
        return _SimpleITK.BinaryThresholdImageFilter_Execute(self, image1)

# Register BinaryThresholdImageFilter in _SimpleITK:
_SimpleITK.BinaryThresholdImageFilter_swigregister(BinaryThresholdImageFilter)


def BinaryThreshold(image1, lowerThreshold=0.0, upperThreshold=255.0, insideValue=1, outsideValue=0):
    r"""BinaryThreshold(Image image1, double lowerThreshold=0.0, double upperThreshold=255.0, uint8_t insideValue=1, uint8_t outsideValue=0) -> Image"""
    return _SimpleITK.BinaryThreshold(image1, lowerThreshold, upperThreshold, insideValue, outsideValue)
    
    
class FlipImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::FlipImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_FlipImageFilter

    def __init__(self):
        r"""__init__(FlipImageFilter self) -> FlipImageFilter"""
        _SimpleITK.FlipImageFilter_swiginit(self, _SimpleITK.new_FlipImageFilter())

    def SetFlipAxes(self, FlipAxes):
        r"""SetFlipAxes(FlipImageFilter self, VectorBool FlipAxes)"""
        return _SimpleITK.FlipImageFilter_SetFlipAxes(self, FlipAxes)

    def GetFlipAxes(self):
        r"""GetFlipAxes(FlipImageFilter self) -> VectorBool"""
        return _SimpleITK.FlipImageFilter_GetFlipAxes(self)

    def SetFlipAboutOrigin(self, FlipAboutOrigin):
        r"""SetFlipAboutOrigin(FlipImageFilter self, bool FlipAboutOrigin)"""
        return _SimpleITK.FlipImageFilter_SetFlipAboutOrigin(self, FlipAboutOrigin)

    def FlipAboutOriginOn(self):
        r"""FlipAboutOriginOn(FlipImageFilter self)"""
        return _SimpleITK.FlipImageFilter_FlipAboutOriginOn(self)

    def FlipAboutOriginOff(self):
        r"""FlipAboutOriginOff(FlipImageFilter self)"""
        return _SimpleITK.FlipImageFilter_FlipAboutOriginOff(self)

    def GetFlipAboutOrigin(self):
        r"""GetFlipAboutOrigin(FlipImageFilter self) -> bool"""
        return _SimpleITK.FlipImageFilter_GetFlipAboutOrigin(self)

    def GetName(self):
        r"""GetName(FlipImageFilter self) -> std::string"""
        return _SimpleITK.FlipImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(FlipImageFilter self) -> std::string"""
        return _SimpleITK.FlipImageFilter___str__(self)

    def Execute(self, image1):
        r"""Execute(FlipImageFilter self, Image image1) -> Image"""
        return _SimpleITK.FlipImageFilter_Execute(self, image1)

# Register FlipImageFilter in _SimpleITK:
_SimpleITK.FlipImageFilter_swigregister(FlipImageFilter)

def Gradient(image1, useImageSpacing=True, useImageDirection=False):
    r"""Gradient(Image image1, bool useImageSpacing=True, bool useImageDirection=False) -> Image"""
    return _SimpleITK.Gradient(image1, useImageSpacing, useImageDirection)
class GradientMagnitudeImageFilter(ImageFilter):
    r"""Proxy of C++ itk::simple::GradientMagnitudeImageFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleITK.delete_GradientMagnitudeImageFilter

    def __init__(self):
        r"""__init__(GradientMagnitudeImageFilter self) -> GradientMagnitudeImageFilter"""
        _SimpleITK.GradientMagnitudeImageFilter_swiginit(self, _SimpleITK.new_GradientMagnitudeImageFilter())

    def SetUseImageSpacing(self, UseImageSpacing):
        r"""SetUseImageSpacing(GradientMagnitudeImageFilter self, bool UseImageSpacing)"""
        return _SimpleITK.GradientMagnitudeImageFilter_SetUseImageSpacing(self, UseImageSpacing)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(GradientMagnitudeImageFilter self)"""
        return _SimpleITK.GradientMagnitudeImageFilter_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(GradientMagnitudeImageFilter self)"""
        return _SimpleITK.GradientMagnitudeImageFilter_UseImageSpacingOff(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(GradientMagnitudeImageFilter self) -> bool"""
        return _SimpleITK.GradientMagnitudeImageFilter_GetUseImageSpacing(self)

    def GetName(self):
        r"""GetName(GradientMagnitudeImageFilter self) -> std::string"""
        return _SimpleITK.GradientMagnitudeImageFilter_GetName(self)

    def __str__(self):
        r"""__str__(GradientMagnitudeImageFilter self) -> std::string"""
        return _SimpleITK.GradientMagnitudeImageFilter___str__(self)

    def Execute(self, image1):
        r"""Execute(GradientMagnitudeImageFilter self, Image image1) -> Image"""
        return _SimpleITK.GradientMagnitudeImageFilter_Execute(self, image1)

# Register GradientMagnitudeImageFilter in _SimpleITK:
_SimpleITK.GradientMagnitudeImageFilter_swigregister(GradientMagnitudeImageFilter)
